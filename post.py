#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import asyncio
import logging
import random
import datetime as dt

import pendulum
from telegram import Bot, error as tg_err

from utils    import compass, clouds_word, wind_phrase, safe, get_fact
from weather  import get_weather
from air      import get_air, get_pollen, get_sst, get_kp
from schumann import get_schumann
from astro    import astro_events
from gpt      import gpt_blurb

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–û–ù–°–¢–ê–ù–¢–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LAT, LON = 34.707, 33.022
CITIES   = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}

TOKEN     = os.environ["TELEGRAM_TOKEN"]
CHAT      = os.environ["CHANNEL_ID"]

TZ        = pendulum.timezone("Asia/Nicosia")
TODAY     = pendulum.now(TZ).date()
TOMORROW  = TODAY.add(days=1)

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–ë–û–†–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    w = get_weather(LAT, LON)
    if not w:
        raise RuntimeError("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    # —Ä–∞–∑–±–∏—Ä–∞–µ–º OpenWeather vs Open-Meteo
    if "current" in w:
        # ‚îÄ OpenWeather ‚îÄ
        cur       = w["current"]
        day_block = w["daily"][0]["temp"]
        wind_kmh  = cur["wind_speed"] * 3.6
        wind_deg  = cur["wind_deg"]
        wcode     = cur.get("weather",[{"id":0}])[0]["id"]
        press     = cur["pressure"]
        cloud_w   = clouds_word(cur.get("clouds", 0))
        day_max   = day_block["max"]
        night_min = day_block["min"]
    else:
        # ‚îÄ Open-Meteo ‚îÄ
        cur        = w["current_weather"]
        dblock     = w["daily"]
        wind_kmh   = cur["windspeed"]
        wind_deg   = cur["winddirection"]
        press      = cur["pressure"]
        cloud_w    = clouds_word(cur.get("clouds", 0))

        # –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ daily[ ] 
        day_max   = dblock["temperature_2m_max"][1] if len(dblock["temperature_2m_max"])>1 else dblock["temperature_2m_max"][0]
        night_min = dblock["temperature_2m_min"][1] if len(dblock["temperature_2m_min"])>1 else dblock["temperature_2m_min"][0]
        wcode     = dblock["weathercode"][1]    if len(dblock["weathercode"])>1    else dblock["weathercode"][0]

    # —Ñ–ª–∞–≥–∏
    strong_wind = w.get("strong_wind", False)
    fog_alert   = w.get("fog_alert",   False)

    # –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ –≥–æ—Ä–æ–¥–∞–º
    temps = {}
    for city,(la,lo) in CITIES.items():
        wc = get_weather(la, lo)
        if not wc: continue
        if "current" in wc:
            temps[city] = wc["daily"][0]["temp"]["max"]
        else:
            arr = wc["daily"]["temperature_2m_max"]
            temps[city] = arr[1] if len(arr)>1 else arr[0]
    warm = max(temps, key=temps.get)
    cold = min(temps, key=temps.get)

    # –≤–æ–∑–¥—É—Ö / –ø—ã–ª—å—Ü–∞ / kp / schumann / sst / astro
    air     = get_air() or {}
    pollen  = get_pollen()
    kp_val, kp_state = get_kp()
    sch     = get_schumann()
    sst     = get_sst()
    astro   = astro_events()

    # –≤—ã–±–∏—Ä–∞–µ–º ¬´–≤–∏–Ω–æ–≤–Ω–∏–∫–∞¬ª
    if fog_alert:
        culprit = "—Ç—É–º–∞–Ω"
    elif kp_state == "–±—É—Ä—è":
        culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"
    elif press < 1007:
        culprit = "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"
    elif strong_wind:
        culprit = "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä"
    else:
        culprit = "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"
    summary, tips = gpt_blurb(culprit)

    # –∏–∫–æ–Ω–∫–∞ –ø–æ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏
    ICONS = {"—è—Å–Ω–æ":"‚òÄÔ∏è","–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è":"üå§Ô∏è","–ø–∞—Å–º—É—Ä–Ω–æ":"‚òÅÔ∏è"}
    icon = ICONS.get(cloud_w, "üå¶Ô∏è")

    # —Å–æ–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏
    P = [
        f"{icon} <b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ {TOMORROW.format('DD.MM.YYYY')}</b>",
        f"<b>–¢–µ–º–ø. –¥–Ω—ë–º:</b> –¥–æ {day_max:.1f} ¬∞C",
        f"<b>–¢–µ–º–ø. –Ω–æ—á—å—é:</b> –æ–∫–æ–ª–æ {night_min:.1f} ¬∞C",
        f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {cloud_w}",
        f"<b>–í–µ—Ç–µ—Ä:</b> {wind_phrase(wind_kmh)} ({wind_kmh:.1f} –∫–º/—á, {compass(wind_deg)})",
        *(["‚ö†Ô∏è –í–µ—Ç–µ—Ä –º–æ–∂–µ—Ç —É—Å–∏–ª–∏—Ç—å—Å—è"] if strong_wind else []),
        *(["üåÅ –í–æ–∑–º–æ–∂–µ–Ω —Ç—É–º–∞–Ω, –≤–æ–¥–∏—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ"] if fog_alert else []),
        f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {press:.0f} –≥–ü–∞",
        f"<i>–°–∞–º—ã–π —Ç—ë–ø–ª—ã–π –≥–æ—Ä–æ–¥:</i> {warm} ({temps[warm]:.1f} ¬∞C)",
        f"<i>–°–∞–º—ã–π –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –≥–æ—Ä–æ–¥:</i> {cold} ({temps[cold]:.1f} ¬∞C)",
        "‚Äî‚Äî‚Äî",
        "üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>",
        f"{air.get('emoji','‚ö™Ô∏è')} AQI {air.get('aqi','‚Äî')} | PM2.5: {safe(air.get('pm25','‚Äî'),' ¬µg/–º¬≥')} | PM10: {safe(air.get('pm10','‚Äî'),' ¬µg/–º¬≥')}",
    ]

    if pollen:
        idx = lambda v: ["–Ω–µ—Ç","–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω–Ω—ã–π","–≤—ã—Å–æ–∫–∏–π","–æ—á. –≤—ã—Å–æ–∫–∏–π","—ç–∫—Å—Ç—Ä–∏–º"][int(round(v))]
        P += [
            "üåø <b>–ü—ã–ª—å—Ü–∞</b>",
            f"–î–µ—Ä–µ–≤—å—è ‚Äî {idx(pollen['treeIndex'])} | –¢—Ä–∞–≤—ã ‚Äî {idx(pollen['grassIndex'])} | –°–æ—Ä–Ω—è–∫–∏ ‚Äî {idx(pollen['weedIndex'])}",
        ]

    P += [
        "üß≤ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>",
        f"K-index: {kp_val:.1f} ({kp_state})" if kp_val is not None else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
    ]

    if sch.get("high"):
        P += ["üéµ <b>–®—É–º–∞–Ω:</b> ‚ö°Ô∏è –≤–∏–±—Ä–∞—Ü–∏–∏ –ø–æ–≤—ã—à–µ–Ω—ã (>8 –ì—Ü)"]
    elif sch.get("freq") is not None:
        P += [f"üéµ <b>–®—É–º–∞–Ω:</b> ‚âà{sch['freq']:.1f} –ì—Ü, –∞–º–ø–ª–∏—Ç—É–¥–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞"]
    else:
        P += [f"üéµ <b>–®—É–º–∞–Ω:</b> {sch.get('msg','–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"]

    if sst is not None:
        P += [f"üåä <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã</b>\n–°–µ–π—á–∞—Å: {sst:.1f} ¬∞C"]

    if astro:
        P += ["üåå <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n" + " | ".join(astro)]

    P += [
        "‚Äî‚Äî‚Äî",
        f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}",
        "‚Äî‚Äî‚Äî",
        "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>",
        *[f"‚Ä¢ {t}" for t in tips],
        "‚Äî‚Äî‚Äî",
        f"üìö {get_fact(TOMORROW)}",
    ]

    return "\n".join(P)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    logging.info("Preview: %s", build_msg().replace("\n"," | ")[:200])
    bot = Bot(TOKEN)
    try:
        await bot.send_message(int(CHAT), build_msg()[:4096],
                               parse_mode="HTML",
                               disable_web_page_preview=True)
        logging.info("Sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise

if __name__ == "__main__":
    asyncio.run(main())
