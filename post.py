"""Automated daily Vaybo–ú–µ—Ç—Ä poster ‚Äì v2.0  (full vibe‚Äëstack)

–°–æ–±–∏—Ä–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –õ–∏–º–∞—Å—Å–æ–ª—É –∏ –≤—ã–∫–∞—Ç—ã–≤–∞–µ—Ç HTML‚Äë–¥–∞–π–¥–∂–µ—Å—Ç –≤ Telegram:

  ‚Ä¢ ‚òÄÔ∏è  –ü–æ–≥–æ–¥–∞          ‚Äî OpenWeather One Call 3.0 (OWM_KEY)
  ‚Ä¢ üå¨Ô∏è  –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ ‚Äî IQAir / AirVisual (AIRVISUAL_KEY)
  ‚Ä¢ üåø  –ü—ã–ª—å—Ü–∞           ‚Äî Tomorrow.io (TOMORROW_KEY)
  ‚Ä¢ üåä  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è ‚Äî Open‚ÄëMeteo marine API (–±–µ–∑ –∫–ª—é—á–∞)
  ‚Ä¢ üåå  Kp‚Äë–∏–Ω–¥–µ–∫—Å        ‚Äî NOAA SWPC JSON (–±–µ–∑ –∫–ª—é—á–∞)
  ‚Ä¢ üìà  –†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞  ‚Äî Global¬†Coherence API (–±–µ–∑ –∫–ª—é—á–∞)
  ‚Ä¢ üîÆ  –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è     ‚Äî Swiss¬†Ephemeris (–ª–æ–∫–∞–ª—å–Ω–æ)

GitHub Secrets (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ):
  OPENAI_API_KEY   ‚Äì OpenAI
  TELEGRAM_TOKEN   ‚Äì Telegram bot token
  CHANNEL_ID       ‚Äì id/@ –∫–∞–Ω–∞–ª–∞
  OWM_KEY          ‚Äì OpenWeather
  AIRVISUAL_KEY    ‚Äì IQAir
  TOMORROW_KEY     ‚Äì Tomorrow.io

Python deps (–¥–æ–±–∞–≤—å –≤ requirements.txt / workflow):
  requests python-dateutil openai python-telegram-bot pyswisseph
"""
from __future__ import annotations

import asyncio
import json
import math
import os
import re
import sys
from datetime import datetime, timezone
from typing import Any, Dict, Optional

import requests
import swisseph as swe  # pip install pyswisseph
from dateutil import tz
from telegram import Bot
from openai import OpenAI

LAT = 34.707  # Limassol Marina
LON = 33.022
LOCAL_TZ = tz.gettz("Asia/Nicosia")

# ---------------------------------------------------------------------------
# tiny HTTP helper -----------------------------------------------------------
# ---------------------------------------------------------------------------

def _get(url: str, **params) -> Optional[dict]:
    try:
        r = requests.get(url, params=params, timeout=20)
        r.raise_for_status()
        return r.json()
    except Exception as exc:  # noqa: BLE001, S110
        print(f"[warn] {url} failed: {exc}", file=sys.stderr)
        return None


# ---------------------------------------------------------------------------
# Data sources ---------------------------------------------------------------
# ---------------------------------------------------------------------------

def get_weather() -> Optional[dict]:
    """Try One¬†Call¬†3.0 ‚Üí fallback –Ω–∞ 2.5 ‚Üí –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ Open‚ÄëMeteo."""
    key = os.getenv("OWM_KEY")
    if not key:
        return None

    # --- attempt: One¬†Call¬†3.0 ------------------------------------------------
    data = _get(
        "https://api.openweathermap.org/data/3.0/onecall",
        lat=LAT,
        lon=LON,
        appid=key,
        units="metric",
        exclude="minutely,hourly,alerts",
    )
    if data and "current" in data:
        return data  # —É—Å–ø–µ—Ö 3.0

    # --- fallback: One¬†Call¬†2.5 (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è) ----------------------------------
    data = _get(
        "https://api.openweathermap.org/data/2.5/onecall",
        lat=LAT,
        lon=LON,
        appid=key,
        units="metric",
        exclude="minutely,hourly,alerts",
    )
    if data and "current" in data:
        return data

    # --- ultimate fallback: Open‚ÄëMeteo (no key) ------------------------------
    return _get(
        "https://api.open-meteo.com/v1/forecast",
        latitude=LAT,
        longitude=LON,
        current_weather=True,
    )
        "https://api.openweathermap.org/data/3.0/onecall",
        lat=LAT,
        lon=LON,
        appid=key,
        units="metric",
        exclude="minutely,hourly,alerts",
    )


def get_air_quality() -> Optional[dict]:
    key = os.getenv("AIRVISUAL_KEY")
    if not key:
        return None
    return _get(
        "https://api.airvisual.com/v2/nearest_city",
        lat=LAT,
        lon=LON,
        key=key,
    )


def get_pollen() -> Optional[dict]:
    key = os.getenv("TOMORROW_KEY")
    if not key:
        return None
    data = _get(
        "https://api.tomorrow.io/v4/timelines",
        apikey=key,
        location=f"{LAT},{LON}",
        fields="treeIndex,grassIndex,weedIndex",
        timesteps="1d",
        units="metric",
    )
    try:
        entry = data["data"]["timelines"][0]["intervals"][0]["values"]
        return {
            "tree": entry.get("treeIndex"),
            "grass": entry.get("grassIndex"),
            "weed": entry.get("weedIndex"),
        }
    except Exception:
        return None


def get_sst() -> Optional[dict]:
    data = _get(
        "https://marine-api.open-meteo.com/v1/marine",
        latitude=LAT,
        longitude=LON,
        hourly="sea_surface_temperature",
        timezone="UTC",
    )
    try:
        temp = float(data["hourly"]["sea_surface_temperature"][0])
        return {"sst": round(temp, 1)}
    except Exception:
        return None


def get_geomagnetic() -> Optional[dict]:
    data = _get("https://services.swpc.noaa.gov/products/noaa-planetary-k-index.json")
    if not data or len(data) < 2:
        return None
    try:
        kp = float(data[-1][1])
        return {"kp": kp}
    except Exception:
        return None


def get_schumann() -> Optional[dict]:
    data = _get("https://api.glcoherence.org/v1/earth")
    try:
        return {"amp": data["amplitude_1"], "freq": data["frequency_1"]}
    except Exception:
        return None


# üîÆ simple astro event ------------------------------------------------------

def get_astro() -> Optional[dict]:
    """–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–∏–º–µ—Ä: –ª–æ–≤–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –í–µ–Ω–µ—Ä—ã‚Äë–°–∞—Ç—É—Ä–Ω–∞ ¬±3¬∞."""
    today = datetime.utcnow()
    jd = swe.julday(today.year, today.month, today.day)
    lon_ven = swe.calc_ut(jd, swe.VENUS)[0]  # –¥–æ–ª–≥–æ—Ç–∞ –≤ ¬∞
    lon_sat = swe.calc_ut(jd, swe.SATURN)[0]
    diff = abs((lon_ven - lon_sat + 180) % 360 - 180)
    if diff < 3:
        return {"event": "–ö–æ–Ω—ä—é–Ω–∫—Ü–∏—è –í–µ–Ω–µ—Ä—ã –∏ –°–∞—Ç—É—Ä–Ω–∞ (—Ñ–æ–∫—É—Å –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö)"}
    return None


# ---------------------------------------------------------------------------
# Collect raw ---------------------------------------------------------------
# ---------------------------------------------------------------------------

def collect() -> Dict[str, Any]:
    return {
        "timestamp_utc": datetime.now(timezone.utc).isoformat(),
        "weather": get_weather(),
        "air": get_air_quality(),
        "pollen": get_pollen(),
        "sst": get_sst(),
        "geomagnetic": get_geomagnetic(),
        "schumann": get_schumann(),
        "astro": get_astro(),
    }


# ---------------------------------------------------------------------------
# OpenAI prettifier ----------------------------------------------------------
# ---------------------------------------------------------------------------

def prettify(raw: Dict[str, Any]) -> str:
    client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

    system_msg = """
–¢—ã ‚Äî Vaybo–ú–µ—Ç—Ä‚Äë–ø–æ—ç—Ç. –°—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π HTML‚Äë–¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è Telegram —Å—Ç—Ä–æ–≥–æ —Ç–∞–∫:

<b>üó∫Ô∏è –õ–æ–∫–∞—Ü–∏—è</b>
–ì–æ—Ä–æ–¥: Limassol
–°—Ç—Ä–∞–Ω–∞: Cyprus

<b>üå¨Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>
AQI: <—á–∏—Å–ª–æ> (<–∑–∞–≥—Ä—è–∑–Ω–∏—Ç–µ–ª—å>)
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <–∫–æ—Ä–æ—Ç–∫–æ>

<b>‚òÄÔ∏è –ü–æ–≥–æ–¥–∞</b>
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <¬∞C>
–û–±–ª–∞—á–Ω–æ—Å—Ç—å: <–æ–ø–∏—Å–∞–Ω–∏–µ>
–î–∞–≤–ª–µ–Ω–∏–µ: <hPa>
–í–µ—Ç–µ—Ä: <–º/—Å> (<–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ>)

<b>üåä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è</b>
–°–µ–π—á–∞—Å: <¬∞C> ‚Äî –æ–ø—É—Å—Ç–∏ –±–ª–æ–∫, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç

<b>üåø –ü—ã–ª—å—Ü–∞</b>
–î–µ—Ä–µ–≤—å—è/–¢—Ä–∞–≤—ã/–°–æ—Ä–Ω—è–∫–∏: <0‚Äë5>/<0‚Äë5>/<0‚Äë5> ‚Äî –æ–ø—É—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ—Ç

<b>üåå –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∏–∫–∞</b>
Kp‚Äë–∏–Ω–¥–µ–∫—Å: <—á–∏—Å–ª–æ> ‚Äî —Å–ø–æ–∫–æ–π–Ω–∞—è/–±—É—Ä—è ‚Äî –æ–ø—É—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ—Ç

<b>üìà –†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞</b>
–ê–º–ø–ª–∏—Ç—É–¥–∞: <–∑–Ω–∞—á–µ–Ω–∏–µ> ‚Äî –æ–ø—É—Å—Ç–∏ –±–ª–æ–∫, –µ—Å–ª–∏ –Ω–µ—Ç

<b>üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è</b>
<—Å–æ–±—ã—Ç–∏–µ> ‚Äî –æ–ø—É—Å—Ç–∏, –µ—Å–ª–∏ None

<b>‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</b>
–ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞.

–ü—Ä–∞–≤–∏–ª–∞: —Ç–æ–ª—å–∫–æ <b> —Ç–µ–≥–∏, –Ω–∏–∫–∞–∫–∏—Ö <html>/<body>, —Å–∏–º–≤–æ–ª \n = –ø–µ—Ä–µ–Ω–æ—Å.
"""

    prompt = "–°—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –∫—Ä–∞—Å–∏–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö:\n" + json.dumps(raw, ensure_ascii=False, indent=2)

    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_msg},
            {"role": "user", "content": prompt},
        ],
        temperature=0.35,
    )
    text = resp.choices[0].message.content.strip()

    # sanitize for Telegram
    text = re.sub(r"^```[\s\S]*?\n|\n```$", "", text)
    text = text.replace("\\n", "\n")
    text = re.sub(r"(?i)<!DOCTYPE[^>]*>", "", text)
    text = re.sub(r"(?i)</?(html|body)[^>]*>", "", text)
    return text.strip()


# ---------------------------------------------------------------------------
# Telegram sender -----------------------------------------------------------
# ---------------------------------------------------------------------------

async def send(html: str) -> None:
    bot = Bot(token=os.environ["TELEGRAM_TOKEN"])
    await bot.send_message(
        chat_id=os.environ["CHANNEL_ID"],
        text=html[:4096],
        parse_mode="HTML",
        disable_web_page_preview=True,
    )


# ---------------------------------------------------------------------------
# main ----------------------------------------------------------------------
# ---------------------------------------------------------------------------

async def main() -> None:
    raw = collect()
    html = prettify(raw)
    await send(html)


if __name__ == "__main__":
    asyncio.run(main())
