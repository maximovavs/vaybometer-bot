"""Automated daily Vaybo–ú–µ—Ç—Ä poster ‚Äì v1.3 (pretty template)

–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ (–ø–æ–≥–æ–¥–∞, AQI, –ø—ã–ª—å—Ü–∞, Kp‚Äë–∏–Ω–¥–µ–∫—Å, —Ä–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞, SST) –∏
–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ Telegram‚Äë–∫–∞–Ω–∞–ª @vaybometer.
"""
from __future__ import annotations

import asyncio
import json
import os
import re
import sys
from datetime import datetime, timezone
from typing import Any, Dict, Optional

import requests
from dateutil import tz
from telegram import Bot
from openai import OpenAI

LAT = 34.707  # Limassol Marina
LON = 33.022
LOCAL_TZ = tz.gettz("Asia/Nicosia")

# ---------------------------------------------------------------------------
# helpers -------------------------------------------------------------------
# ---------------------------------------------------------------------------

def _get(url: str, **params) -> Optional[dict]:
    """HTTP GET ‚Üí json | None (–ø–µ—á–∞—Ç–∞–µ—Ç warning –ø—Ä–∏ –æ—à–∏–±–∫–µ)."""
    try:
        r = requests.get(url, params=params, timeout=15)
        r.raise_for_status()
        return r.json()
    except Exception as exc:  # noqa: BLE001, S110
        print(f"[warn] {url} failed: {exc}", file=sys.stderr)
        return None


# ‚òÄÔ∏è Weather ----------------------------------------------------------------

def get_weather() -> Optional[dict]:
    key = os.getenv("OWM_KEY")
    if not key:
        return None
    return _get(
        "https://api.openweathermap.org/data/3.0/onecall",
        lat=LAT,
        lon=LON,
        appid=key,
        units="metric",
        exclude="minutely,hourly,alerts",
    )


# üå¨ Air Quality -------------------------------------------------------------

def get_air_quality() -> Optional[dict]:
    key = os.getenv("AIRVISUAL_KEY")
    if not key:
        return None
    return _get(
        "https://api.airvisual.com/v2/nearest_city",
        lat=LAT,
        lon=LON,
        key=key,
    )


# üåø Pollen via Tomorrow.io --------------------------------------------------

def get_pollen() -> Optional[dict]:
    key = os.getenv("TOMORROW_KEY")
    if not key:
        return None
    return _get(
        "https://api.tomorrow.io/v4/timelines",
        apikey=key,
        location=f"{LAT},{LON}",
        fields="treeIndex,grassIndex,weedIndex",
        timesteps="1d",
        units="metric",
    )


# üåå Geomagnetic -------------------------------------------------------------

def get_geomagnetic() -> Optional[dict]:
    data = _get("https://services.swpc.noaa.gov/products/noaa-planetary-k-index.json")
    if not data or len(data) < 2:
        return None
    try:
        ts, kp = data[-1]
        return {"kp": float(kp)}
    except Exception:
        return None


# üìà Schumann ----------------------------------------------------------------

def get_schumann() -> Optional[dict]:
    return _get("https://api.glcoherence.org/v1/earth")


# üåä SST placeholder ---------------------------------------------------------

def get_sst() -> Optional[dict]:
    user = os.getenv("COPERNICUS_USER")
    pwd = os.getenv("COPERNICUS_PASS")
    if not user or not pwd:
        return None
    return {"sst": "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}  # TODO: motuclient


# ---------------------------------------------------------------------------
# collect -------------------------------------------------------------------
# ---------------------------------------------------------------------------

def collect() -> Dict[str, Any]:
    return {
        "timestamp_utc": datetime.now(timezone.utc).isoformat(),
        "weather": get_weather(),
        "air": get_air_quality(),
        "pollen": get_pollen(),
        "geomagnetic": get_geomagnetic(),
        "schumann": get_schumann(),
        "sst": get_sst(),
    }


# ---------------------------------------------------------------------------
# prettify via OpenAI --------------------------------------------------------
# ---------------------------------------------------------------------------

def prettify(raw: Dict[str, Any]) -> str:
    client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

    system_msg = """
–¢—ã ‚Äî Vaybo–ú–µ—Ç—Ä‚Äë–ø–æ—ç—Ç. –í—ã–≤–µ–¥–∏ –¥–∞–π–¥–∂–µ—Å—Ç –¢–û–õ–¨–ö–û –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ (HTML Telegram):

<b>üó∫Ô∏è –õ–æ–∫–∞—Ü–∏—è</b>
–ì–æ—Ä–æ–¥: Limassol
–°—Ç—Ä–∞–Ω–∞: Cyprus

<b>üå¨Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>
AQI (US): <—á–∏—Å–ª–æ> (<–≥–ª–∞–≤–Ω—ã–π –∑–∞–≥—Ä—è–∑–Ω–∏—Ç–µ–ª—å>)
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <–∫–æ—Ä–æ—Ç–∫–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º>

<b>‚òÄÔ∏è –ü–æ–≥–æ–¥–∞</b>
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <—á–∏—Å–ª–æ>¬∞C
–û–±–ª–∞—á–Ω–æ—Å—Ç—å: <–æ–ø–∏—Å–∞–Ω–∏–µ>
–î–∞–≤–ª–µ–Ω–∏–µ: <hPa>
–í–µ—Ç–µ—Ä: <—á–∏—Å–ª–æ> –º/—Å (<–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ>)

<b>üåä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è</b>
–°–µ–π—á–∞—Å: <—á–∏—Å–ª–æ>¬∞C (–∏–ª–∏ ¬´–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö¬ª)

<b>üåø –ü—ã–ª—å—Ü–∞</b>
–î–µ—Ä–µ–≤—å—è: <0‚Äë5> | –¢—Ä–∞–≤—ã: <0‚Äë5> | –°–æ—Ä–Ω—è–∫–∏: <0‚Äë5>

<b>üåå –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∏–∫–∞</b>
Kp‚Äë–∏–Ω–¥–µ–∫—Å: <—á–∏—Å–ª–æ> ‚Äî <–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π>

<b>üìà –†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞</b>
–ê–º–ø–ª–∏—Ç—É–¥–∞: <–∑–Ω–∞—á–µ–Ω–∏–µ>

<b>‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</b>
–ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞.

–ï—Å–ª–∏ –∫–∞–∫–æ–≥–æ‚Äë—Ç–æ –±–ª–æ–∫–∞ –Ω–µ—Ç (None) ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–ø—É—Å—Ç–∏ –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º.
–ë–µ–∑ ```code```, –±–µ–∑ <html>/<body>. –°–∏–º–≤–æ–ª \n = –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏.
"""

    user_msg = "–°—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –∫—Ä–∞—Å–∏–≤–æ:\n" + json.dumps(raw, ensure_ascii=False, indent=2)

    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_msg},
            {"role": "user", "content": user_msg},
        ],
        temperature=0.4,
    )
    text: str = resp.choices[0].message.content.strip()

    # sanitation for Telegram
    text = re.sub(r"^```[\s\S]*?\n|\n```$", "", text)  # code fence
    text = text.replace("\\n", "\n")                   # literal \n ‚Üí newline
    text = re.sub(r"(?i)<!DOCTYPE[^>]*>", "", text)      # doctype
    text = re.sub(r"(?i)</?(html|body)[^>]*>", "", text)  # html/body tags
    return text.strip()


# ---------------------------------------------------------------------------
# Telegram sender -----------------------------------------------------------
# ---------------------------------------------------------------------------

async def send(html: str) -> None:
    bot = Bot(token=os.environ["TELEGRAM_TOKEN"])
    await bot.send_message(
        chat_id=os.environ["CHANNEL_ID"],
        text=html[:4096],
        parse_mode="HTML",
        disable_web_page_preview=True,
    )


# ---------------------------------------------------------------------------
# main ----------------------------------------------------------------------
# ---------------------------------------------------------------------------

async def main() -> None:
    raw = collect()
    html = prettify(raw)
    await send(html)


if __name__ == "__main__":
    asyncio.run(main())
