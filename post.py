#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import asyncio
import logging
import random
import pendulum
from telegram import Bot, error as tg_err

from utils import (
    compass, clouds_word, wind_phrase, safe,
    get_fact, WEATHER_ICONS, AIR_EMOJI, aqi_color
)
from weather import get_weather
from air import get_air, get_pollen, get_sst, get_kp
from schumann import get_schumann
from astro import astro_events
from gpt import gpt_blurb

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ         = pendulum.timezone("Asia/Nicosia")
TODAY      = pendulum.now(TZ).date()
TOMORROW   = TODAY.add(days=1)

# –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
LAT, LON   = 34.707, 33.022
CITIES     = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}

# Telegram
TOKEN      = os.environ["TELEGRAM_TOKEN"]
CHAT_ID    = int(os.environ["CHANNEL_ID"])

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ñ–æ—Ç–æ —Å Unsplash
UNSPLASH_KEY = os.getenv("UNSPLASH_KEY")

# –û–ø—Ä–æ—Å
POLL_QUESTION = "–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î"
POLL_OPTIONS  = ["üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏","üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ","üò¥ –°–ª–µ–≥–∫–∞ –≤—è–ª—ã–π(–∞—è)","ü§í –í—Å—ë –ø–ª–æ—Ö–æ"]


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    P: list[str] = []

    # 1) –ü–æ–≥–æ–¥–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ
    w = get_weather(LAT, LON)
    if not w:
        raise RuntimeError("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    # –≤–µ—Ç–∫–∞ OpenWeather
    if "current" in w:
        cur      = w["current"]
        day_blk  = w["daily"][0]["temp"]
        wind_kmh = cur["wind_speed"] * 3.6
        wind_dir = cur["wind_deg"]
        press    = cur["pressure"]
        cloud_w  = clouds_word(cur.get("clouds", 0))
        day_max  = day_blk["max"]
        night_min = day_blk["min"]
        strong   = w.get("strong_wind", False)
        fog      = w.get("fog_alert", False)

    # –≤–µ—Ç–∫–∞ Open-Meteo
    else:
        cw       = w["current_weather"]
        wind_kmh = cw["windspeed"]
        wind_dir = cw["winddirection"]
        press    = w["hourly"]["surface_pressure"][0]    # <-- –∏–º–µ–Ω–Ω–æ —Ç–∞–∫
        cloud_w  = clouds_word(w["hourly"]["cloud_cover"][0])
        strong   = w.get("strong_wind", False)
        fog      = w.get("fog_alert", False)

        # –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö tÀö –∏–∑ daily
        daily = w["daily"]
        blk   = daily[0] if isinstance(daily, list) else daily
        arr_d = blk["temperature_2m_max"]
        arr_n = blk["temperature_2m_min"]
        codes = blk["weathercode"]
        day_max   = arr_d[1] if len(arr_d) > 1 else arr_d[0]
        night_min = arr_n[1] if len(arr_n) > 1 else arr_n[0]

    # —Ç–µ–ø–µ—Ä—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: icon, day_max, night_min, wind_kmh, wind_dir, press, cloud_w, strong, fog
    icon = WEATHER_ICONS.get(cloud_w, "üå¶Ô∏è")
    P.append(f"{icon} <b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ {TOMORROW.format('DD.MM.YYYY')}</b>")
    P.append(f"<b>–¢–µ–º–ø.: {day_max:.1f}/{night_min:.1f} ¬∞C</b>")
    P.append(f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {cloud_w}")
    P.append(f"<b>–í–µ—Ç–µ—Ä:</b> {wind_phrase(wind_kmh)} ({wind_kmh:.1f} –∫–º/—á, {compass(wind_dir)})")
    if strong:
        P.append("‚ö†Ô∏è –í–µ—Ç–µ—Ä –º–æ–∂–µ—Ç —É—Å–∏–ª–∏—Ç—å—Å—è")
    if fog:
        P.append("üåÅ –í–æ–∑–º–æ–∂–µ–Ω —Ç—É–º–∞–Ω, –≤–æ–¥–∏—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ")
    P.append(f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {press:.0f} –≥–ü–∞")
    P.append("‚Äî‚Äî‚Äî")

    # ‚Ä¶–¥–∞–ª–µ–µ –ø–æ –æ—Å—Ç–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π‚Ä¶


    # 2) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥—ë–Ω./–Ω–æ—á–Ω.) —Å –º–µ–¥–∞–ª—è–º–∏
    temps_d, temps_n = {}, {}
    for city, (la, lo) in CITIES.items():
        w2 = get_weather(la, lo)
        if not w2: 
            continue
        if "current" in w2:
            tb = w2["daily"][0]["temp"]
            temps_d[city] = tb["max"]
            temps_n[city] = tb["min"]
        else:
            blk2         = w2["daily"][0] if isinstance(w2["daily"], list) else w2["daily"]
            arr_d, arr_n = blk2["temperature_2m_max"], blk2["temperature_2m_min"]
            temps_d[city] = arr_d[1] if len(arr_d)>1 else arr_d[0]
            temps_n[city] = arr_n[1] if len(arr_n)>1 else arr_n[0]

    ranked = sorted(temps_d.items(), key=lambda x: x[1], reverse=True)
    medals = ["ü•á","ü•à","ü•â","üèÖ"]
    P.append("üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –ø–æ –¥–Ω./–Ω–æ—á–Ω. —Ç–µ–º–ø.</b>")
    for i, (city, dval) in enumerate(ranked):
        med = medals[i] if i < len(medals) else ""
        nval = temps_n[city]
        P.append(f"{med} {city}: {dval:.1f}/{nval:.1f} ¬∞C")
    P.append("‚Äî‚Äî‚Äî")

    # 3) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –∏ –ø—ã–ª—å—Ü–∞
    air    = get_air() or {}
    pollen = get_pollen()
    if air:
        aqi   = air["aqi"]
        lvl   = air["lvl"]
        em    = aqi_color(aqi)
        pm25  = safe(air["pm25"], " ¬µg/–º¬≥")
        pm10  = safe(air["pm10"], " ¬µg/–º¬≥")
        P.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
        P.append(f"{em} AQI {aqi} | PM‚ÇÇ.‚ÇÖ: {pm25} | PM‚ÇÅ‚ÇÄ: {pm10}")
    else:
        P.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
        P.append("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    if pollen:
        idx = lambda v: ["–Ω–µ—Ç","–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω–Ω—ã–π","–≤—ã—Å–æ–∫–∏–π","–æ—á. –≤—ã—Å–æ–∫–∏–π","—ç–∫—Å—Ç—Ä–∏–º"][int(round(v))]
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(
            f"–î–µ—Ä–µ–≤—å—è ‚Äî {idx(pollen['treeIndex'])} | "
            f"–¢—Ä–∞–≤—ã ‚Äî {idx(pollen['grassIndex'])} | "
            f"–°–æ—Ä–Ω—è–∫–∏ ‚Äî {idx(pollen['weedIndex'])}"
        )
    P.append("‚Äî‚Äî‚Äî")

    # 4) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è + –®—É–º–∞–Ω + SST
    kp_val, kp_state = get_kp()
    sch = get_schumann()
    sst = get_sst()

    P.append(f"üß≤ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞</b> K-index: {kp_val:.1f} ({kp_state})" if kp_val is not None else "üß≤ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞</b> –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    if sch.get("high"):
        P.append("üéµ <b>–®—É–º–∞–Ω:</b> ‚ö°Ô∏è –≤–∏–±—Ä–∞—Ü–∏–∏ –ø–æ–≤—ã—à–µ–Ω—ã (>8 –ì—Ü)")
    elif "freq" in sch:
        P.append(f"üéµ <b>–®—É–º–∞–Ω:</b> ‚âà{sch['freq']:.1f} –ì—Ü, –∞–º–ø–ª–∏—Ç—É–¥–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞")
    else:
        P.append(f"üéµ <b>–®—É–º–∞–Ω:</b> {sch.get('msg','–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
    if sst is not None:
        P.append(f"üåä <b>–¢–µ–º–ø. –≤–æ–¥—ã</b> {sst:.1f} ¬∞C")
    P.append("‚Äî‚Äî‚Äî")

    # 5) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    ev = astro_events()
    if ev:
        main_phase, *others = ev
        line = main_phase + ((" | " + " | ".join(others)) if others else "")
        P.append(f"üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>\n{line}")
    P.append("‚Äî‚Äî‚Äî")

    # 6) –í—ã–≤–æ–¥ –∏ —Å–æ–≤–µ—Ç—ã
    # –í—ã–±–∏—Ä–∞–µ–º –≤–∏–Ω–æ–≤–Ω–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    culprit = "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"
    if fog:             culprit = "—Ç—É–º–∞–Ω"
    elif kp_state=="–±—É—Ä—è": culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"
    elif press < 1007:  culprit = "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"
    elif strong:        culprit = "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä"

    summary, tips = gpt_blurb(culprit)
    P.append(f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    for t in tips:
        P.append(f"‚Ä¢ {t}")
    P.append("‚Äî‚Äî‚Äî")
    P.append(f"üìö {get_fact(TOMORROW)}")

    return "\n".join(P)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–ø—Ä–æ—Å –∏ —Ñ–æ—Ç–æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_poll_if_friday(bot: Bot):
    if pendulum.now(TZ).is_friday():
        try:
            await bot.send_poll(CHAT_ID, POLL_QUESTION, POLL_OPTIONS,
                                is_anonymous=False, allows_multiple_answers=False)
        except tg_err.TelegramError as e:
            logging.warning("Poll error: %s", e)

async def send_unsplash_photo(bot: Bot):
    if not UNSPLASH_KEY:
        return
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑ –≤ 3 –¥–Ω—è –ø–æ UTC
    if (_ := pendulum.now("UTC").day_of_year) % 3 != 0:
        return
    url = f"https://api.unsplash.com/photos/random?query=cyprus sunset&client_id={UNSPLASH_KEY}"
    try:
        j = get_weather._get(url)  # –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ–±—â–∏–π _get
        photo = j.get("urls", {}).get("regular")
        if photo:
            await bot.send_photo(CHAT_ID, photo, caption="–§–æ—Ç–æ –¥–Ω—è ‚Ä¢ Unsplash")
    except Exception as e:
        logging.warning("Photo error: %s", e)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main() ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    bot = Bot(TOKEN)
    msg = build_msg()
    logging.info("Preview: %s", msg.replace("\n"," | ")[:200])
    try:
        await bot.send_message(CHAT_ID, msg, parse_mode="HTML", disable_web_page_preview=True)
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise

    await send_poll_if_friday(bot)
    await send_unsplash_photo(bot)
    logging.info("All done ‚úì")


if __name__ == "__main__":
    asyncio.run(main())
