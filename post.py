#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
post.py  ‚Ä¢  nightly summary for Cyprus

‚úì —Å—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ 4-–º –≥–æ—Ä–æ–¥–∞–º
‚úì —Ä–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–µ–Ω—å / –Ω–æ—á—å)
‚úì AQI + PM, –ø—ã–ª—å—Ü–∞, –≥–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞, –®—É–º–∞–Ω, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è
‚úì WMO-–æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
"""

import os, asyncio, logging
from typing import Any, Dict, List, Tuple, Optional

import pendulum
from telegram import Bot, error as tg_err

from utils import (
    compass, clouds_word, wind_phrase, safe, get_fact,
    WEATHER_ICONS, AIR_EMOJI, WMO_DESCRIPTIONS
)
from weather   import get_weather           # –≤–∞—à –ø–∞—Ç—á —Å _auto_ —É–∂–µ –≤ weather.py
from air       import get_air, get_pollen, get_sst, get_kp
from schumann  import get_schumann
from astro     import astro_events
from gpt       import gpt_blurb

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ        = pendulum.timezone("Asia/Nicosia")
TODAY     = pendulum.now(TZ).date()
TOMORROW  = TODAY.add(days=1)

TOKEN   = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = int(os.getenv("CHANNEL_ID"))

CITIES: dict[str, Tuple[float, float]] = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def extract_day_night(w: Dict[str, Any]) -> Tuple[float, float]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (day_max, night_min) –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Open-Meteo –∏–ª–∏ OpenWeather.
    """
    d = w["daily"]

    # ‚Äî Open-Mete–æ dict-—Ñ–æ—Ä–º–∞—Ç ‚Äî
    if isinstance(d, dict):
        ma = d["temperature_2m_max"]
        mi = d["temperature_2m_min"]
        day   = ma[1] if len(ma) > 1 else ma[0]
        night = mi[1] if len(mi) > 1 else mi[0]
        return day, night

    # ‚Äî list —Ñ–æ—Ä–º–∞—Ç—ã (Open-Mete–æ list | OpenWeather list) ‚Äî
    blk = d[1] if len(d) > 1 else d[0]
    if "temp" in blk:                                 # OpenWeather
        return blk["temp"]["max"], blk["temp"]["min"]

    # Open-Mete–æ list-of-dicts
    return blk["temperature_2m_max"][-1], blk["temperature_2m_min"][0]


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    P: List[str] = []

    # ===== 1. —Å—Ä–µ–¥–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –ö–∏–ø—Ä—É =======================
    temp_pairs: List[Tuple[float, float]] = []
    for la, lo in CITIES.values():
        if (w := get_weather(la, lo)):
            temp_pairs.append(extract_day_night(w))

    if not temp_pairs:
        raise RuntimeError("–ù–∏ –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–≥–æ–¥—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")

    avg_day   = sum(d for d, _ in temp_pairs) / len(temp_pairs)
    avg_night = sum(n for _, n in temp_pairs) / len(temp_pairs)

    # ===== 2. –¥–∞–Ω–Ω—ã–µ –¥–ª—è –õ–∏–º–∞—Å—Å–æ–ª–∞ ===============================
    w_lim = get_weather(*CITIES["Limassol"])
    if not w_lim:
        raise RuntimeError("–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –õ–∏–º–∞—Å—Å–æ–ª–∞")

    # —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ (—É–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–ª—é—á–∏)
    cur = w_lim.get("current") or w_lim["current_weather"]

    wind_kmh = cur.get("windspeed")     or cur.get("wind_speed") or 0.0
    wind_deg = cur.get("winddirection") or cur.get("wind_deg")  or 0.0

    press = (
        cur.get("pressure") or
        w_lim.get("hourly", {}).get("surface_pressure", [1013])[0]
    )

    clouds_pc = cur.get("clouds") or w_lim.get("hourly", {}).get("cloud_cover", [0])[0]
    cloud_word = clouds_word(clouds_pc)

    # WMO weather-code ‚Üí —Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    wcode = cur.get("weathercode")
    wmo_text = f" ({WMO_DESCRIPTIONS.get(wcode, '')})" if wcode is not None else ""

    # ===== 3. –∑–∞–≥–æ–ª–æ–≤–æ–∫ =========================================
    icon = WEATHER_ICONS.get(cloud_word, "üå¶Ô∏è")
    P += [
        f"{icon} –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –ö–∏–ø—Ä–µ "
        f"({TOMORROW.format('DD.MM.YYYY')})",
        f"üå°Ô∏è –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø.: {avg_day:.0f} ¬∞C",
        f"üìà –¢–µ–º–ø. –¥–Ω—ë–º/–Ω–æ—á—å—é: {avg_day:.1f}/{avg_night:.1f} ¬∞C",
        f"üå§ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {cloud_word}{wmo_text}",
        f"üí® –í–µ—Ç–µ—Ä: {wind_phrase(wind_kmh)} "
        f"({wind_kmh:.1f} –∫–º/—á, {compass(wind_deg)})",
        f"üîΩ –î–∞–≤–ª–µ–Ω–∏–µ: {press:.0f} –≥–ü–∞",
        "‚Äî‚Äî‚Äî",
    ]

    # ===== 4. —Ä–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ ===================================
    city_rows: List[Tuple[str, float, float]] = []
    for city, (la, lo) in CITIES.items():
        if (w := get_weather(la, lo)):
            d, n = extract_day_night(w)
            city_rows.append((city, d, n))

    city_rows.sort(key=lambda x: x[1], reverse=True)
    medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£"]

    P.append("üéñÔ∏è –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å)")
    for i, (c, d, n) in enumerate(city_rows[:4]):
        P.append(f"{medals[i]} {c}: {d:.1f}/{n:.1f} ¬∞C")
    P.append("‚Äî‚Äî‚Äî")

    # ===== 5. –≤–æ–∑–¥—É—Ö + –ø—ã–ª—å—Ü–∞ ====================================
    air = get_air() or {}
    P.append("üèôÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞")
    if air:
        P.append(
            f"{AIR_EMOJI[air['lvl']]} {air['lvl']} (AQI {air['aqi']}) | "
            f"PM2.5: {safe(air['pm25'],' ¬µg/–º¬≥')} | "
            f"PM10: {safe(air['pm10'],' ¬µg/–º¬≥')}"
        )
    else:
        P.append("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    if (p := get_pollen()):
        idx = lambda v: ["–Ω–µ—Ç","–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω–Ω—ã–π","–≤—ã—Å–æ–∫–∏–π",
                         "–æ—á. –≤—ã—Å–æ–∫–∏–π","—ç–∫—Å—Ç—Ä–∏–º"][int(round(v))]
        P += [
            "üåø –ü—ã–ª—å—Ü–∞",
            f"–î–µ—Ä–µ–≤—å—è ‚Äì {idx(p['treeIndex'])}, "
            f"–¢—Ä–∞–≤—ã ‚Äì {idx(p['grassIndex'])}, "
            f"–°–æ—Ä–Ω—è–∫–∏ ‚Äì {idx(p['weedIndex'])}",
        ]
    P.append("‚Äî‚Äî‚Äî")

    # ===== 6. –≥–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ + –®—É–º–∞–Ω + –º–æ—Ä–µ + –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è ==========
    kp, kp_state = get_kp()
    sch          = get_schumann()
    sst          = get_sst()
    astro        = astro_events()

    P.append(f"üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ Kp={kp:.1f} ({kp_state})" if kp is not None
             else "üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ ‚Äì –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    if sch.get("high"):
        P.append("üéµ –®—É–º–∞–Ω: ‚ö°Ô∏è –≤–∏–±—Ä–∞—Ü–∏–∏ –ø–æ–≤—ã—à–µ–Ω—ã")
    elif "freq" in sch:
        P.append(f"üéµ –®—É–º–∞–Ω: ‚âà{sch['freq']:.1f} –ì—Ü")
    else:
        P.append(f"üéµ –®—É–º–∞–Ω: {sch.get('msg','–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")

    if sst is not None:
        P.append(f"üåä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: {sst:.1f} ¬∞C")

    if astro:
        P.append("üåå –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è: " + " | ".join(astro))

    P.append("‚Äî‚Äî‚Äî")

    # ===== 7. –≤—ã–≤–æ–¥ + —Å–æ–≤–µ—Ç—ã GPT =================================
    culprit = (
        "—Ç—É–º–∞–Ω"            if w_lim.get("fog_alert")          else
        "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"   if kp_state == "–±—É—Ä—è"              else
        "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"  if press < 1007                    else
        "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä"    if w_lim.get("strong_wind")        else
        "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"
    )

    summary, tips = gpt_blurb(culprit)
    P += [
        f"üìú –í—ã–≤–æ–¥\n{summary}",
        "‚Äî‚Äî‚Äî",
        "‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        *[f"‚Ä¢ {t}" for t in tips],
        "‚Äî‚Äî‚Äî",
        f"üìö {get_fact(TOMORROW)}",
    ]

    return "\n".join(P)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    bot = Bot(token=TOKEN)

    try:
        text = build_msg()
    except Exception as e:
        logging.error("–°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
        return

    logging.info("Preview: %s", text.replace('\n',' | ')[:200])

    try:
        await bot.send_message(CHAT_ID, text,
                               parse_mode="HTML",
                               disable_web_page_preview=True)
        logging.info("Message sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram: %s", e)


if __name__ == "__main__":
    asyncio.run(main())
