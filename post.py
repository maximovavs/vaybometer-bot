#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post.py ‚Äî –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç VayboMeter-–±–æ—Ç–∞ (–ö–∏–ø—Ä).

‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–¥–µ–Ω—å/–Ω–æ—á—å, –≤–µ—Ç–µ—Ä, –ø–æ—Ä—ã–≤—ã, RH, –¥–∞–≤–ª–µ–Ω–∏–µ)
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (—Å SST –¥–ª—è –ø—Ä–∏–±—Ä–µ–∂–Ω—ã—Ö)
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ + –ø—ã–ª—å—Ü–∞ + ‚ò¢Ô∏è –†–∞–¥–∏–∞—Ü–∏—è
‚Ä¢ Kp-–∏–Ω–¥–µ–∫—Å + —Ä–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞ (—Ñ–æ–ª–ª–±—ç–∫ –∏–∑ JSON)
‚Ä¢ –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (–∏–∑ lunar_calendar.json; –∑–Ω–∞–∫–∏ ‚Üí ‚ôà-‚ôì + VoC)
‚Ä¢ –£–º–Ω—ã–π ¬´–í—ã–≤–æ–¥¬ª + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –§–∞–∫—Ç –¥–Ω—è
"""

from __future__ import annotations
import os, json, logging, asyncio, re, math
from pathlib import Path
from typing import Dict, Any, Tuple, List, Optional

import pendulum
from telegram import Bot, error as tg_err

from utils   import compass, clouds_word, get_fact, AIR_EMOJI, pm_color, kp_emoji, kmh_to_ms, smoke_index
from weather import get_weather, fetch_tomorrow_temps, day_night_stats
from air     import get_air, get_sst, get_kp
from pollen  import get_pollen
from schumann import get_schumann
from gpt     import gpt_blurb  # (LLM-—Å–æ–≤–µ—Ç—ã)
import radiation  # ‚ò¢Ô∏è

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ        = pendulum.timezone("Asia/Nicosia")
TODAY     = pendulum.today(TZ)
TOMORROW  = TODAY.add(days=1).date()

TOKEN   = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID = int(os.getenv("CHANNEL_ID", "0"))
if not TOKEN or CHAT_ID == 0:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏/–∏–ª–∏ CHANNEL_ID")
    raise SystemExit(1)

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ö–∏–ø—Ä)
CITIES: Dict[str, Tuple[float, float]] = {
    "Nicosia":   (35.170, 33.360),
    "Larnaca":   (34.916, 33.624),
    "Limassol":  (34.707, 33.022),
    "Pafos":     (34.776, 32.424),
    "Troodos":   (34.916, 32.823),
    "Ayia Napa": (34.988, 34.012),
}
COASTAL_CITIES = {"Larnaca", "Limassol", "Pafos", "Ayia Napa"}

WMO_DESC = {
    0: "‚òÄÔ∏è —è—Å–Ω–æ", 1: "‚õÖ —á.–æ–±–ª", 2: "‚òÅÔ∏è –æ–±–ª", 3: "üå• –ø–∞—Å–º",
   45: "üå´ —Ç—É–º–∞–Ω", 48: "üå´ –∏–∑–º–æ—Ä–æ–∑—å", 51: "üå¶ –º–æ—Ä–æ—Å—å",
   61: "üåß –¥–æ–∂–¥—å", 71: "‚ùÑÔ∏è —Å–Ω–µ–≥", 95: "‚õà –≥—Ä–æ–∑–∞",
}
def code_desc(c: Any) -> Optional[str]:
    try:
        return WMO_DESC.get(int(c))
    except Exception:
        return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers: –≤—Ä–µ–º—è/—á–∞—Å–æ–≤–∫–∏ –¥–ª—è –∑–∞–≤—Ç—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _hourly_times(wm: Dict[str, Any]) -> List[pendulum.DateTime]:
    hourly = wm.get("hourly") or {}
    times = hourly.get("time") or hourly.get("time_local") or hourly.get("timestamp") or []
    out: List[pendulum.DateTime] = []
    for t in times:
        try:
            out.append(pendulum.parse(str(t)))
        except Exception:
            pass
    return out

def _nearest_index(times: List[pendulum.DateTime], date_obj: pendulum.Date, prefer_hour: int) -> Optional[int]:
    if not times:
        return None
    target = pendulum.datetime(date_obj.year, date_obj.month, date_obj.day, prefer_hour, 0, tz=TZ)
    best_i, best_diff = None, None
    for i, dt in enumerate(times):
        try:
            dt_local = dt.in_tz(TZ)
        except Exception:
            dt_local = dt
        if dt_local.date() != date_obj:
            continue
        diff = abs((dt_local - target).total_seconds())
        if best_diff is None or diff < best_diff:
            best_i, best_diff = i, diff
    return best_i

def _tomorrow_indices(wm: Dict[str, Any]) -> List[int]:
    times = _hourly_times(wm)
    idxs: List[int] = []
    for i, dt in enumerate(times):
        try:
            if dt.in_tz(TZ).date() == TOMORROW:
                idxs.append(i)
        except Exception:
            pass
    return idxs

def _circular_mean_deg(deg_list: List[float]) -> Optional[float]:
    if not deg_list:
        return None
    x = sum(math.cos(math.radians(d)) for d in deg_list)
    y = sum(math.sin(math.radians(d)) for d in deg_list)
    if x == 0 and y == 0:
        return None
    ang = math.degrees(math.atan2(y, x))
    return (ang + 360.0) % 360.0

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤–µ—Ç–µ—Ä/–¥–∞–≤–ª–µ–Ω–∏–µ –≤ —à–∞–ø–∫—É + –ø–æ—Ä—ã–≤—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def pick_header_metrics(wm: Dict[str, Any]) -> Tuple[Optional[float], Optional[int], Optional[int], str, Optional[float]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: wind_ms, wind_dir_deg, pressure_hpa, pressure_trend(‚Üë/‚Üì/‚Üí), gust_max_ms
    ‚Ä¢ –ë–µ—Ä—ë–º –±–ª–∏–∂–∞–π—à–µ–µ –∫ 12:00 –∑–∞–≤—Ç—Ä–∞ (–¥–ª—è —Ç—Ä–µ–Ω–¥–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å ~06:00).
    ‚Ä¢ gust_max_ms ‚Äî –º–∞–∫—Å–∏–º—É–º –∑–∞ –≤–µ—Å—å –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å.
    """
    hourly = wm.get("hourly") or {}
    times = _hourly_times(wm)
    idx_noon = _nearest_index(times, TOMORROW, 12)
    idx_morn = _nearest_index(times, TOMORROW, 6)

    # –º–∞—Å—Å–∏–≤—ã —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    spd = hourly.get("wind_speed_10m") or hourly.get("windspeed_10m") or hourly.get("windspeed") or []
    dr  = hourly.get("wind_direction_10m") or hourly.get("winddirection_10m") or hourly.get("winddirection") or []
    pr  = hourly.get("surface_pressure") or hourly.get("pressure") or []
    gs  = hourly.get("wind_gusts_10m") or hourly.get("wind_gusts") or hourly.get("windgusts_10m") or []

    wind_ms = wind_dir = press_val = None
    trend = "‚Üí"

    if idx_noon is not None:
        try: wind_ms = kmh_to_ms(float(spd[idx_noon])) if idx_noon < len(spd) else None
        except Exception: pass
        try: wind_dir = int(round(float(dr[idx_noon]))) if idx_noon < len(dr) else None
        except Exception: pass
        try: p_noon = float(pr[idx_noon]) if idx_noon < len(pr) else None
        except Exception: p_noon = None
        try: p_morn = float(pr[idx_morn]) if (idx_morn is not None and idx_morn < len(pr)) else None
        except Exception: p_morn = None
        if p_noon is not None:
            press_val = int(round(p_noon))
        if (p_noon is not None) and (p_morn is not None):
            diff = p_noon - p_morn
            trend = "‚Üë" if diff >= 0.3 else "‚Üì" if diff <= -0.3 else "‚Üí"

    # fallback: —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –¥–Ω—é
    if wind_ms is None or wind_dir is None or press_val is None:
        idxs = _tomorrow_indices(wm)
        if idxs:
            try: spds = [float(spd[i]) for i in idxs if i < len(spd)]
            except Exception: spds = []
            try: dirs = [float(dr[i]) for i in idxs if i < len(dr)]
            except Exception: dirs = []
            try: prs = [float(pr[i]) for i in idxs if i < len(pr)]
            except Exception: prs = []
            if spds: wind_ms = kmh_to_ms(sum(spds)/len(spds))
            md = _circular_mean_deg(dirs)
            wind_dir = int(round(md)) if md is not None else wind_dir
            if prs: press_val = int(round(sum(prs)/len(prs)))

    # gusts –∑–∞ –¥–µ–Ω—å
    gust_max_ms = None
    idxs = _tomorrow_indices(wm)
    if gs and idxs:
        vals = []
        for i in idxs:
            if i < len(gs):
                try: vals.append(float(gs[i]))
                except Exception: ...
        if vals:
            gust_max_ms = kmh_to_ms(max(vals))

    return wind_ms, wind_dir, press_val, trend, gust_max_ms

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —à—Ç–æ—Ä–º-—Ñ–ª–∞–≥–∏ –ø–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–º —á–∞—Å–∞–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def storm_flags_for_tomorrow(wm: Dict[str, Any]) -> Dict[str, Any]:
    hourly = wm.get("hourly") or {}
    idxs = _tomorrow_indices(wm)
    if not idxs:
        return {"warning": False}

    def _arr(*names, default=None):
        for n in names:
            v = hourly.get(n)
            if isinstance(v, list):
                return v
        return default or []

    def _vals(arr):
        out = []
        for i in idxs:
            if i < len(arr):
                try: out.append(float(arr[i]))
                except Exception: pass
        return out

    speeds = _vals(_arr("windspeed_10m", "windspeed", "wind_speed_10m", "wind_speed"))
    gusts  = _vals(_arr("windgusts_10m", "wind_gusts_10m", "wind_gusts"))
    rain   = _vals(_arr("rain"))
    tprob  = _vals(_arr("thunderstorm_probability"))

    max_speed_ms = kmh_to_ms(max(speeds)) if speeds else None
    max_gust_ms  = kmh_to_ms(max(gusts))  if gusts  else None
    heavy_rain   = (max(rain) >= 8.0) if rain else False
    thunder      = (max(tprob) >= 60) if tprob else False

    reasons = []
    if isinstance(max_speed_ms, (int, float)) and max_speed_ms >= 13: reasons.append(f"–≤–µ—Ç–µ—Ä –¥–æ {max_speed_ms:.0f} –º/—Å")
    if isinstance(max_gust_ms,  (int, float)) and max_gust_ms  >= 17: reasons.append(f"–ø–æ—Ä—ã–≤—ã –¥–æ {max_gust_ms:.0f} –º/—Å")
    if heavy_rain: reasons.append("—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å")
    if thunder:    reasons.append("–≥—Ä–æ–∑–∞")

    return {
        "max_speed_ms": max_speed_ms,
        "max_gust_ms": max_gust_ms,
        "heavy_rain": heavy_rain,
        "thunder": thunder,
        "warning": bool(reasons),
        "warning_text": "‚ö†Ô∏è <b>–®—Ç–æ—Ä–º–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>: " + ", ".join(reasons) if reasons else "",
    }

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®—É–º–∞–Ω: —Ñ–æ–ª–ª–±—ç–∫ / —Ä–µ–Ω–¥–µ—Ä 2 —Å—Ç—Ä–æ–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _trend_text(sym: str) -> str:
    return {"‚Üë": "—Ä–∞—Å—Ç—ë—Ç", "‚Üì": "—Å–Ω–∏–∂–∞–µ—Ç—Å—è", "‚Üí": "—Å—Ç–∞–±–∏–ª—å–Ω–æ"}.get(sym, "—Å—Ç–∞–±–∏–ª—å–Ω–æ")

def _trend_from_series(vals: List[float], delta: float = 0.1) -> str:
    tail = vals[-24:] if len(vals) > 24 else vals
    if len(tail) < 2:
        return "‚Üí"
    avg_prev = sum(tail[:-1])/(len(tail)-1)
    d = tail[-1] - avg_prev
    return "‚Üë" if d >= delta else "‚Üì" if d <= -delta else "‚Üí"

def get_schumann_with_fallback() -> Dict[str, Any]:
    sch = (get_schumann() or {})
    if isinstance(sch.get("freq"), (int, float)) and isinstance(sch.get("amp"), (int, float)):
        sch["cached"] = False
        sch["trend_text"] = _trend_text(sch.get("trend", "‚Üí"))
        return sch

    cache = Path(__file__).parent / "schumann_hourly.json"
    if cache.exists():
        try:
            arr = json.loads(cache.read_text(encoding="utf-8")) or []
            freqs = [float(x["freq"]) for x in arr if isinstance(x.get("freq"), (int, float))]
            amps  = [float(x["amp"])  for x in arr if isinstance(x.get("amp"), (int, float))]
            last  = arr[-1] if arr else {}
            trend = _trend_from_series(amps) if amps else "‚Üí"
            return {
                "freq": float(last["freq"]) if isinstance(last.get("freq"), (int, float)) else None,
                "amp":  float(last["amp"])  if isinstance(last.get("amp"),  (int, float)) else None,
                "trend": trend,
                "trend_text": _trend_text(trend),
                "cached": True,
                "status": "üü¢ –≤ –Ω–æ—Ä–º–µ" if (isinstance(last.get("freq"), (int, float)) and 7.7 <= float(last["freq"]) <= 8.1)
                          else ("üü° –∫–æ–ª–µ–±–∞–Ω–∏—è" if isinstance(last.get("freq"), (int, float)) and 7.4 <= float(last["freq"]) <= 8.4
                                else "üî¥ —Å–∏–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ")
            }
        except Exception:
            pass
    return {"freq": None, "amp": None, "trend": "‚Üí", "trend_text": "—Å—Ç–∞–±–∏–ª—å–Ω–æ", "cached": True, "status": "üü° –∫–æ–ª–µ–±–∞–Ω–∏—è"}

def schumann_lines(s: Dict[str, Any]) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 2 —Å—Ç—Ä–æ–∫–∏: —Å—Ç–∞—Ç—É—Å+—á–∏—Å–ª–∞ –∏ –º—è–≥–∫—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é."""
    freq = s.get("freq"); amp = s.get("amp")
    trend_text = s.get("trend_text", "—Å—Ç–∞–±–∏–ª—å–Ω–æ")
    cached = s.get("cached", False)
    status = s.get("status", "üü° –∫–æ–ª–µ–±–∞–Ω–∏—è")
    stale = " ‚è≥ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö —á–∏—Å–µ–ª" if cached else ""
    if not isinstance(freq, (int, float)) and not isinstance(amp, (int, float)):
        return [f"{status}{stale} ‚Ä¢ —Ç—Ä–µ–Ω–¥: {trend_text} ‚Ä¢ H7: ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                "–í–æ–ª–Ω—ã –®—É–º–∞–Ω–∞ –±–ª–∏–∑–∫–∏ –∫ –Ω–æ—Ä–º–µ –∏–ª–∏ –∫–æ–ª–µ–±–ª—é—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–Ω—è."]
    main = f"{status}{stale} ‚Ä¢ –®—É–º–∞–Ω: {freq:.2f} –ì—Ü / {amp:.1f} pT ‚Ä¢ —Ç—Ä–µ–Ω–¥: {trend_text} ‚Ä¢ H7: ‚Äî –Ω/–¥"
    return [main, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä; –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ."]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Air ‚Üí –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –¥–ª—è ¬´–í—ã–≤–æ–¥–∞¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _is_air_bad(air: Dict[str, Any]) -> Tuple[bool, str, str]:
    def _num(x):
        try: return float(x)
        except Exception: return None
    aqi = _num(air.get("aqi"))
    p25 = _num(air.get("pm25"))
    p10 = _num(air.get("pm10"))
    bad = False
    label = "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
    reasons = []
    if aqi is not None and aqi >= 100:
        bad = True; reasons.append(f"AQI {aqi:.0f}")
        if aqi >= 150: label = "–≤—ã—Å–æ–∫–∏–π"
    if p25 is not None and p25 > 35:
        bad = True; reasons.append(f"PM‚ÇÇ.‚ÇÖ {p25:.0f}")
        if p25 > 55: label = "–≤—ã—Å–æ–∫–∏–π"
    if p10 is not None and p10 > 50:
        bad = True; reasons.append(f"PM‚ÇÅ‚ÇÄ {p10:.0f}")
        if p10 > 100: label = "–≤—ã—Å–æ–∫–∏–π"
    return bad, label, ", ".join(reasons) if reasons else "–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å (–∫–∞–∫ –≤ KLD: –∏–∑ lunar_calendar.json) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _load_calendar(path: str = "lunar_calendar.json") -> dict:
    try:
        data = json.loads(Path(path).read_text("utf-8"))
    except Exception:
        return {}
    if isinstance(data, dict) and isinstance(data.get("days"), dict):
        return data["days"]
    return data if isinstance(data, dict) else {}

_ZODIAC = {
    "–û–≤–µ–Ω": "‚ôà","–¢–µ–ª–µ—Ü": "‚ôâ","–ë–ª–∏–∑–Ω–µ—Ü—ã": "‚ôä","–†–∞–∫": "‚ôã","–õ–µ–≤": "‚ôå",
    "–î–µ–≤–∞": "‚ôç","–í–µ—Å—ã": "‚ôé","–°–∫–æ—Ä–ø–∏–æ–Ω": "‚ôè","–°—Ç—Ä–µ–ª–µ—Ü": "‚ôê",
    "–ö–æ–∑–µ—Ä–æ–≥": "‚ôë","–í–æ–¥–æ–ª–µ–π": "‚ôí","–†—ã–±—ã": "‚ôì",
}
def _zsym(s: str) -> str:
    for k,v in _ZODIAC.items():
        s = s.replace(k, v)
    return s

def _parse_voc_dt(s: str, tz: pendulum.Timezone):
    if not s: return None
    try:
        return pendulum.parse(s).in_tz(tz)
    except Exception:
        try:
            dmy, hm = s.split()
            d, m = map(int, dmy.split("."))
            hh, mm = map(int, hm.split(":"))
            year = pendulum.today(tz).year
            return pendulum.datetime(year, m, d, hh, mm, tz=tz)
        except Exception:
            return None

def _voc_interval(rec: dict, tz_local: str = "Asia/Nicosia"):
    voc = (rec or {}).get("void_of_course") or (rec or {}).get("voc") or (rec or {}).get("void") or {}
    if not isinstance(voc, dict): return None
    s = voc.get("start") or voc.get("from") or voc.get("start_time")
    e = voc.get("end")   or voc.get("to")   or voc.get("end_time")
    if not s or not e: return None
    tz = pendulum.timezone(tz_local)
    t1 = _parse_voc_dt(s, tz); t2 = _parse_voc_dt(e, tz)
    if not t1 or not t2: return None
    return t1, t2

def build_astro_section_for_tomorrow() -> List[str]:
    tz = TZ
    date_local = pendulum.today(tz).add(days=1)
    cal = _load_calendar("lunar_calendar.json")
    rec = cal.get(date_local.format("YYYY-MM-DD"), {}) if isinstance(cal, dict) else {}

    phase_raw = (rec.get("phase_name") or rec.get("phase") or "").strip()
    phase_name = re.sub(r"^[^\w–ê-–Ø–∞-—è–Å—ë]+", "", phase_raw).split(",")[0].strip() or "–õ—É–Ω–∞"
    percent = rec.get("percent") or rec.get("illumination") or rec.get("illum") or 0
    try: percent = int(round(float(percent)))
    except Exception: percent = 0
    sign = rec.get("sign") or rec.get("zodiac") or ""
    bullets = rec.get("advice") or []

    lines = ["üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>"]
    if bullets:
        lines += [_zsym(str(x)) for x in bullets[:3]]
    else:
        base = f"üåô –§–∞–∑–∞: {phase_name}"
        prm  = f" ({percent}%)" if percent else ""
        lines += [base + prm, (_zsym(f"‚ôí –ó–Ω–∞–∫: {sign}") if sign else "‚Äî –∑–Ω–∞–∫ –õ—É–Ω—ã –Ω/–¥")]

    voc = _voc_interval(rec, tz_local=tz.name)
    if voc:
        t1, t2 = voc
        lines.append(f"‚ö´Ô∏è VoC: {t1.format('HH:mm')}‚Äì{t2.format('HH:mm')}")
    return lines

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ build_msg ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    P: List[str] = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    P.append(f"<b>üåÖ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({TOMORROW.strftime('%d.%m.%Y')})</b>")

    # –°—Ä. SST
    sst_vals = [t for c in COASTAL_CITIES if (t:=get_sst(*CITIES[c])) is not None]
    P.append(f"üåä –°—Ä. —Ç–µ–º–ø. –º–æ—Ä—è: {sum(sst_vals)/len(sst_vals):.1f} ¬∞C" if sst_vals
             else "üåä –°—Ä. —Ç–µ–º–ø. –º–æ—Ä—è: –Ω/–¥")
    P.append("‚Äî‚Äî‚Äî")

    # –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    primary = os.getenv("PRIMARY_CITY", "Limassol")
    lat, lon = CITIES.get(primary, CITIES["Limassol"])

    # –ü—Ä–æ–≥–Ω–æ–∑/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    wm  = get_weather(lat, lon) or {}
    st  = day_night_stats(lat, lon, tz=TZ.name) or {}
    t_day_max   = st.get("t_day_max")
    t_night_min = st.get("t_night_min")
    rh_min, rh_max = st.get("rh_min"), st.get("rh_max")
    wcarr = (wm.get("daily", {}) or {}).get("weathercode", [])
    wc = wcarr[1] if isinstance(wcarr, list) and len(wcarr) > 1 else None

    wind_ms, wind_dir, press_hpa, p_trend, gust_max = pick_header_metrics(wm)
    storm = storm_flags_for_tomorrow(wm)

    # –®–∞–ø–∫–∞ –∫–∞–∫ –≤ KLD: d/n, –ø–æ–≥–æ–¥–∞, –≤–µ—Ç–µ—Ä(+–ø–æ—Ä—ã–≤—ã), RH, –¥–∞–≤–ª–µ–Ω–∏–µ
    wind_part = (
        f"üí® {wind_ms:.1f} –º/—Å ({compass(wind_dir)})" if isinstance(wind_ms, (int, float)) and wind_dir is not None
        else (f"üí® {wind_ms:.1f} –º/—Å" if isinstance(wind_ms, (int, float)) else "üí® –Ω/–¥")
    )
    if isinstance(storm.get("max_gust_ms"), (int, float)):
        wind_part += f" (–ø–æ—Ä—ã–≤—ã –¥–æ {storm['max_gust_ms']:.0f})"

    parts = [
        f"üèôÔ∏è {primary}: {t_day_max:.0f}/{t_night_min:.0f} ¬∞C" if (t_day_max is not None and t_night_min is not None) else f"üèôÔ∏è {primary}: –Ω/–¥",
        (code_desc(wc) or None),
        wind_part,
        (f"üíß RH {rh_min:.0f}‚Äì{rh_max:.0f}%" if rh_min is not None and rh_max is not None else None),
        (f"üîπ {press_hpa} –≥–ü–∞ {('‚Üë' if p_trend=='‚Üë' else '‚Üì' if p_trend=='‚Üì' else '‚Üí')}" if isinstance(press_hpa, int) else None),
    ]
    P.append(" ‚Ä¢ ".join([p for p in parts if p]))
    P.append("‚Äî‚Äî‚Äî")

    if storm.get("warning"):
        P.append(storm["warning_text"])
        P.append("‚Äî‚Äî‚Äî")

    # –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤
    temps: Dict[str,Tuple[float,float,int,Optional[float]]] = {}
    for city,(la,lo) in CITIES.items():
        d,n = fetch_tomorrow_temps(la,lo, tz=TZ.name)
        if d is None:
            continue
        wcx  = (get_weather(la,lo) or {}).get("daily",{}).get("weathercode",[])
        wcx  = wcx[1] if isinstance(wcx,list) and len(wcx)>1 else 0
        sst = get_sst(la,lo) if city in COASTAL_CITIES else None
        temps[city] = (d, n if n is not None else d, wcx, sst)

    if temps:
        P.append("üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥./–Ω. ¬∞C, –ø–æ–≥–æ–¥–∞, üåä)</b>")
        medals = ["ü•á","ü•à","ü•â","4Ô∏è‚É£","5Ô∏è‚É£","6Ô∏è‚É£"]
        for i,(city,(d,n,wcx,sst)) in enumerate(sorted(temps.items(), key=lambda kv: kv[1][0], reverse=True)[:6]):
            line = f"{medals[i]} {city}: {d:.1f}/{n:.1f}"
            descx = code_desc(wcx)
            if descx: line += f", {descx}"
            if sst is not None: line += f", üåä {sst:.1f}"
            P.append(line)
        P.append("‚Äî‚Äî‚Äî")

    # Air + pollen
    air = get_air(lat, lon) or {}
    lvl = air.get("lvl","–Ω/–¥")
    P.append("üè≠ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | "
             f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}")

    em_sm, lbl_sm = smoke_index(air.get("pm25"), air.get("pm10"))
    if lbl_sm and str(lbl_sm).lower() not in ("–Ω–∏–∑–∫–æ–µ", "–Ω–∏–∑–∫–∏–π", "–Ω–µ—Ç", "–Ω/–¥"):
        P.append(f"üî• –ó–∞–¥—ã–º–ª–µ–Ω–∏–µ: {em_sm} {lbl_sm}")

    if (p:=get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(f"–î–µ—Ä–µ–≤—å—è: {p['tree']} | –¢—Ä–∞–≤—ã: {p['grass']} | –°–æ—Ä–Ω—è–∫–∏: {p['weed']} ‚Äî —Ä–∏—Å–∫ {p['risk']}")

    # ‚ò¢Ô∏è –†–∞–¥–∏–∞—Ü–∏—è (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
    rad = radiation.get_radiation(lat, lon) or {}
    val = rad.get("value") or rad.get("dose")
    if isinstance(val, (int, float)):
        P.append(f"‚ò¢Ô∏è –†–∞–¥–∏–∞—Ü–∏—è: {float(val):.3f} ¬µSv/h")
    P.append("‚Äî‚Äî‚Äî")

    # –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ + –®—É–º–∞–Ω
    try:
        kp, ks = get_kp()
    except Exception:
        kp, ks = None, "–Ω/–¥"
    P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({ks})" if isinstance(kp, (int, float)) else "üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")

    schu_state = get_schumann_with_fallback()
    P.extend(schumann_lines(schu_state))
    P.append("‚Äî‚Äî‚Äî")

    # –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (–∏–∑ lunar_calendar.json)
    P.extend(build_astro_section_for_tomorrow())
    P.append("‚Äî‚Äî‚Äî")

    # ¬´–£–º–Ω—ã–π¬ª –≤—ã–≤–æ–¥
    P.append("üìú <b>–í—ã–≤–æ–¥</b>")
    P.extend(
        (lambda air=air, kp=kp, ks=ks, storm=storm, schu=schu_state: (
            (lambda lines: lines)(
                [] if False else
                __import__('builtins') or []
            )
        ))()  # placeholder to keep scope
    )
    # —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å —É—á—ë—Ç–æ–º —à—Ç–æ—Ä–º-—Ñ–ª–∞–≥–∞:
    P[-1:] = []  # —É–¥–∞–ª—è–µ–º placeholder
    P.extend((lambda: (
        # –æ—Å–Ω–æ–≤–Ω–æ–π –¥—Ä–∞–π–≤–µ—Ä: –ø–æ—Ä—ã–≤—ã/–≤–æ–∑–¥—É—Ö/kp/—à—É–º–∞–Ω
        (lambda air_bad, air_label, air_reason: (
            ( ["–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî —à—Ç–æ—Ä–º–æ–≤–∞—è –ø–æ–≥–æ–¥–∞: " +
                (", ".join([s for s in [
                    (f"–ø–æ—Ä—ã–≤—ã –¥–æ {storm.get('max_gust_ms'):.0f} –º/—Å" if isinstance(storm.get('max_gust_ms'), (int,float)) else None),
                    ("–ª–∏–≤–Ω–∏" if storm.get("heavy_rain") else None),
                    ("–≥—Ä–æ–∑–∞"  if storm.get("thunder") else None),
                ] if s])) + ". –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –¥–µ–ª–∞ —Å —É—á—ë—Ç–æ–º –ø–æ–≥–æ–¥—ã."]
              if storm.get("warning") else
              ([f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞: {air_label} ({air_reason}). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ –∏ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏."]
               if air_bad else
               ([f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî –º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: Kp‚âà{kp:.1f} ({ks}). –í–æ–∑–º–æ–∂–Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É –º–µ—Ç–µ–æ–∑–∞–≤–∏—Å–∏–º—ã—Ö."]
                if (isinstance(kp,(int,float)) and kp>=5) else
                (["–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî –≤–æ–ª–Ω—ã –®—É–º–∞–Ω–∞: –æ—Ç–º–µ—á–∞—é—Ç—Å—è —Å–∏–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è."]
                 if (schu_state or {}).get("status","").startswith("üî¥") else
                 ["–°–µ—Ä—å—ë–∑–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞ –Ω–µ –≤–∏–¥–Ω–æ ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –ø–ª–∞–Ω—ã."]))))
        ))(*_is_air_bad(air))
    ))())

    # —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    P.append("‚Äî‚Äî‚Äî")
    try:
        theme = (
            "–ø–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞" if storm.get("warning") else
            ("–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if isinstance(kp, (int, float)) and kp >= 5 else
             ("–ø–ª–æ—Ö–æ–π –≤–æ–∑–¥—É—Ö" if _is_air_bad(air)[0] else "–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å"))
        )
        _, tips = gpt_blurb(theme)
        for tip in tips[:3]:
            t = tip.strip()
            if t:
                P.append(t)
    except Exception:
        P.append("‚Äî –±–æ–ª—å—à–µ –≤–æ–¥—ã, –º–µ–Ω—å—à–µ —Å—Ç—Ä–µ—Å—Å–∞, –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–æ–Ω")
    P.append("‚Äî‚Äî‚Äî")

    # —Ñ–∞–∫—Ç –¥–Ω—è
    P.append(f"üìö {get_fact(TOMORROW)}")
    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_main_post(bot: Bot) -> None:
    txt = build_msg()
    logging.info("Preview: %s", txt[:200].replace('\n',' | '))
    try:
        await bot.send_message(chat_id=CHAT_ID, text=txt,
                               parse_mode="HTML", disable_web_page_preview=True)
        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)

async def main() -> None:
    await send_main_post(Bot(token=TOKEN))

if __name__ == "__main__":
    asyncio.run(main())
