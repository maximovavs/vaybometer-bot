#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
post.py

–°–±–æ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –ö–∏–ø—Ä–∞ (–õ–∏–º–∞—Å—Å–æ–ª + —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤).
"""

import os
import asyncio
import logging
import pendulum
from telegram import Bot, error as tg_err

from utils import (
    compass, clouds_word, wind_phrase, safe,
    get_fact, WEATHER_ICONS, AIR_EMOJI
)
from weather import get_weather
from air import get_air, get_pollen, get_sst, get_kp
from schumann import get_schumann
from astro import astro_events
from gpt import gpt_blurb

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 0. CONST ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ        = pendulum.timezone("Asia/Nicosia")
TODAY     = pendulum.now(TZ).date()
TOMORROW  = TODAY + pendulum.duration(days=1)
TOKEN     = os.environ["TELEGRAM_TOKEN"]
CHAT      = os.environ["CHANNEL_ID"]

# –ì–æ—Ä–æ–¥–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}


def build_msg() -> str:
    # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
    w = get_weather(*CITIES["Limassol"])
    if not w:
        raise RuntimeError("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º OpenWeather vs Open-Meteo
    if "current" in w:
        cur        = w["current"]
        day_block  = w["daily"][0]["temp"]
        wind_kmh   = cur["wind_speed"] * 3.6
        wind_deg   = cur["wind_deg"]
        press      = cur["pressure"]
        cloud_word = clouds_word(cur.get("clouds", 0))
        day_max    = day_block["max"]
        night_min  = day_block["min"]
    else:
        cw         = w["current_weather"]
        wind_kmh   = cw["windspeed"]
        wind_deg   = cw["winddirection"]
        press      = cw["pressure"]
        cloud_word = clouds_word(w["hourly"]["cloud_cover"][0])
        # –∑–∞–≤—Ç—Ä–∞ ‚Äî –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç daily
        block      = w["daily"][0] if isinstance(w["daily"], list) else w["daily"]
        tm, tn     = block["temperature_2m_max"], block["temperature_2m_min"]
        day_max    = tm[0]
        night_min  = tn[0]

    strong = w.get("strong_wind", False)
    fog    = w.get("fog_alert",   False)

    # 2Ô∏è‚É£ –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —Ç–µ–º–ø. (–¥–Ω/–Ω–æ—á—å)
    temps: dict[str, tuple[float, float]] = {}
    for city, (la, lo) in CITIES.items():
        w2 = get_weather(la, lo)
        if not w2:
            continue
        if "current" in w2:
            db = w2["daily"][0]["temp"]
            tmax, tmin = db["max"], db["min"]
        else:
            blk = w2["daily"][0] if isinstance(w2["daily"], list) else w2["daily"]
            arr_max, arr_min = blk["temperature_2m_max"], blk["temperature_2m_min"]
            tmax, tmin = arr_max[0], arr_min[0]
        temps[city] = (tmax, tmin)

    warm = max(temps, key=lambda c: temps[c][0])
    cold = min(temps, key=lambda c: temps[c][1])

    # 3Ô∏è‚É£ –û—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏
    air    = get_air() or {}
    idx_p  = lambda v: ["–Ω–µ—Ç","–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω–Ω—ã–π","–≤—ã—Å–æ–∫–∏–π","–æ—á. –≤—ã—Å–æ–∫–∏–π","—ç–∫—Å—Ç—Ä–∏–º"][int(round(v))]
    pollen = get_pollen()
    kp, kp_state   = get_kp()
    sch            = get_schumann()
    sst            = get_sst()
    astro_list     = astro_events()

    # 4Ô∏è‚É£ ¬´–í–∏–Ω–æ–≤–Ω–∏–∫¬ª –∏ —Å–æ–≤–µ—Ç—ã
    if fog:
        culprit = "—Ç—É–º–∞–Ω"
    elif kp_state == "–±—É—Ä—è":
        culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"
    elif press < 1007:
        culprit = "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"
    elif strong:
        culprit = "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä"
    else:
        culprit = "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"
    summary, tips = gpt_blurb(culprit)

    # 5Ô∏è‚É£ –°–±–æ—Ä–∫–∞ HTML
    icon = WEATHER_ICONS.get(cloud_word, "üå¶Ô∏è")
    lines = [
        f"{icon} <b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ {TOMORROW.format('DD.MM.YYYY')}</b>",
        f"<b>–¢–µ–º–ø. (–¥–Ω/–Ω–æ—á—å):</b> {day_max:.1f}/{night_min:.1f} ¬∞C",
        f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {press:.0f} –≥–ü–∞",
        f"<b>–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω/–Ω–æ—á—å):</b> " + " | ".join(
            f"{c}: {temps[c][0]:.1f}/{temps[c][1]:.1f} ¬∞C" for c in (warm, cold)
        ),
        "‚Äî‚Äî‚Äî",
        f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {cloud_word}",
        f"<b>–í–µ—Ç–µ—Ä:</b> {wind_phrase(wind_kmh)} ({wind_kmh:.1f} –∫–º/—á, {compass(wind_deg)})",
        *(["‚ö†Ô∏è –í–µ—Ç–µ—Ä –±—É–¥–µ—Ç —É—Å–∏–ª–∏–≤–∞—Ç—å—Å—è"] if strong else []),
        *(["üåÅ –í–æ–∑–º–æ–∂–µ–Ω —Ç—É–º–∞–Ω, –≤–æ–¥–∏—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ"] if fog else []),
        "‚Äî‚Äî‚Äî",
        "üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>",
        f"{AIR_EMOJI.get(air.get('lvl'),'‚ö™')} AQI {air.get('aqi','‚Äî')} | PM2.5: {safe(air.get('pm25'),' ¬µg/–º¬≥')} | PM10: {safe(air.get('pm10'),' ¬µg/–º¬≥')}",
    ]

    if pollen:
        lines += [
            "üåø <b>–ü—ã–ª—å—Ü–∞</b>",
            f"–î–µ—Ä–µ–≤—å—è ‚Äî {idx_p(pollen['treeIndex'])} | –¢—Ä–∞–≤—ã ‚Äî {idx_p(pollen['grassIndex'])} | –°–æ—Ä–Ω—è–∫–∏ ‚Äî {idx_p(pollen['weedIndex'])}"
        ]

    lines += [
        "‚Äî‚Äî‚Äî",
        "üß≤ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>",
        f"K-index: {kp:.1f} ({kp_state})" if kp is not None else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
    ]

    if sch.get("high"):
        lines += ["üéµ <b>–®—É–º–∞–Ω:</b> ‚ö°Ô∏è –≤–∏–±—Ä–∞—Ü–∏–∏ –ø–æ–≤—ã—à–µ–Ω—ã (>8 –ì—Ü)"]
    elif "freq" in sch:
        lines += [f"üéµ <b>–®—É–º–∞–Ω:</b> ‚âà{sch['freq']:.1f} –ì—Ü, –∞–º–ø–ª–∏—Ç—É–¥–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞"]
    else:
        lines += [f"üéµ <b>–®—É–º–∞–Ω:</b> {sch.get('msg','–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"]

    if sst is not None:
        lines += [f"üåä <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã:</b> {sst:.1f} ¬∞C"]

    if astro_list:
        lines += ["üîÆ <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>", " | ".join(astro_list)]

    lines += [
        "‚Äî‚Äî‚Äî",
        f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}",
        "‚Äî‚Äî‚Äî",
        "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>",
        *[f"‚Ä¢ {t}" for t in tips],
        "‚Äî‚Äî‚Äî",
        f"üìö {get_fact(TOMORROW)}",
    ]

    return "\n".join(lines)


async def main() -> None:
    bot = Bot(TOKEN)
    msg = build_msg()
    logging.info("Preview: %s", msg.replace("\n", " | ")[:200])
    try:
        await bot.send_message(int(CHAT), msg, parse_mode="HTML", disable_web_page_preview=True)
        logging.info("Message sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise


if __name__ == "__main__":
    asyncio.run(main())
