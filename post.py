"""
post.py ‚Äì Vaybo–ú–µ—Ç—Ä Cyprus v5.0 (night-before edition)

‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤–µ—á–µ—Ä–æ–º (21:00 –ø–æ Asia/Nicosia) –∏ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ó–ê–í–¢–†–ê.
‚Ä¢ –ï—Å–ª–∏ ‚â•40 % —á–∞—Å–æ–≤ –∑–∞–≤—Ç—Ä–∞ —Å weathercode 45/48 ‚Üí —Å–æ–æ–±—â–∞–µ–º –ø—Ä–æ —Ç—É–º–∞–Ω.
‚Ä¢ –í—ã–≤–æ–¥–∏–º, –≥–¥–µ –∑–∞–≤—Ç—Ä–∞ —Ç–µ–ø–ª–µ–µ –≤—Å–µ–≥–æ / —Ö–æ–ª–æ–¥–Ω–µ–µ –≤—Å–µ–≥–æ –Ω–∞ –ö–∏–ø—Ä–µ
  (–õ–∏–º–∞—Å—Å–æ–ª, –õ–∞—Ä–Ω–∞–∫–∞, –ù–∏–∫–æ—Å–∏—è, –ü–∞—Ñ–æ—Å).
"""

from __future__ import annotations
import asyncio, os, sys, math
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

import requests, swisseph as swe
from openai import OpenAI
from telegram import Bot, error as tg_err

# --- –ì–µ–æ–≥—Ä–∞—Ñ–∏—è -----------------------------------------------------------
HOME = ("–õ–∏–º–∞—Å—Å–æ–ª", 34.707, 33.022)
CITIES = {
    "–õ–∏–º–∞—Å—Å–æ–ª": (34.707, 33.022),
    "–õ–∞—Ä–Ω–∞–∫–∞":  (34.916, 33.613),
    "–ù–∏–∫–æ—Å–∏—è":  (35.166, 33.366),
    "–ü–∞—Ñ–æ—Å":    (34.776, 32.429),
}

# --- HTTP helper ---------------------------------------------------------
def _get(url: str, **params) -> Optional[dict]:
    try:
        r = requests.get(url, params=params, timeout=20)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        print(f"[warn] {url} -> {e}", file=sys.stderr)
        return None

# --- Tomorrow's weather for one point ------------------------------------
def forecast_tomorrow(lat: float, lon: float) -> dict:
    tomorrow = datetime.utcnow().date() + timedelta(days=1)
    iso_start = tomorrow.isoformat()
    iso_end   = (tomorrow + timedelta(days=1)).isoformat()
    d = _get("https://api.open-meteo.com/v1/forecast",
             latitude=lat, longitude=lon, timezone="UTC",
             hourly="temperature_2m,weathercode",
             daily="temperature_2m_max,temperature_2m_min",
             start_date=iso_start, end_date=iso_end)
    if not d:
        raise RuntimeError("No forecast")
    return d

# --- Fog probability for Limassol ---------------------------------------
def fog_risk(hourly_codes: list[int]) -> bool:
    fog_hours = sum(1 for code in hourly_codes if code in (45, 48))
    return fog_hours / 24 >= 0.40  # ‚â• 40 %

# --- Hot / Cold city -----------------------------------------------------
def hot_cold() -> tuple[str, float, str, float]:
    results = []
    for name, (lat, lon) in CITIES.items():
        try:
            daily = forecast_tomorrow(lat, lon)["daily"]
            t_max = daily["temperature_2m_max"][0]
            results.append((name, t_max))
        except Exception:
            continue
    hot = max(results, key=lambda x: x[1])
    cold = min(results, key=lambda x: x[1])
    return hot[0], hot[1], cold[0], cold[1]

# --- Build message -------------------------------------------------------
def build_message() -> str:
    name, lat, lon = HOME
    data = forecast_tomorrow(lat, lon)
    daily = data["daily"]
    hourly_codes = data["hourly"]["weathercode"]
    fog = fog_risk(hourly_codes)

    hot_city, hot_temp, cold_city, cold_temp = hot_cold()

    P = []
    P += ["‚òÄÔ∏è <b>–ü–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞</b>",
          f"<b>–¢–µ–º–ø. –¥–Ω—ë–º:</b> –¥–æ {daily['temperature_2m_max'][0]:.0f} ¬∞C",
          f"<b>–¢–µ–º–ø. –Ω–æ—á—å—é:</b> –æ–∫–æ–ª–æ {daily['temperature_2m_min'][0]:.0f} ¬∞C"]
    if fog:
        P.append("–í –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è –≤–µ–ª–∏–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç—É–º–∞–Ω–∞ üå´Ô∏è")
    P.append(f"–°–∞–º–æ–µ —Ç—ë–ø–ª–æ–µ –º–µ—Å—Ç–æ: {hot_city} ({hot_temp:.1f} ¬∞C)")
    P.append(f"–°–∞–º–æ–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–µ: {cold_city} ({cold_temp:.1f} ¬∞C)")

    # –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ã–≤–æ–¥ –∏ —Å–æ–≤–µ—Ç—ã —á–µ—Ä–µ–∑ GPT
    culprit = "—Ç—É–º–∞–Ω" if fog else "–∫–∞–ø—Ä–∏–∑—ã –ø–æ–≥–æ–¥—ã"
    summary, tips = gpt_blurb(culprit)
    P += ["---", "<b>üìù –í—ã–≤–æ–¥</b>", summary,
          "", "<b>‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>", tips]
    return "\n".join(P)

# --- GPT short block -----------------------------------------------------
def gpt_blurb(culprit: str) -> tuple[str,str]:
    prompt=(f"–û–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: '–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}.'"
            " + –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∑–∏—Ç–∏–≤ (‚â§12 —Å–ª–æ–≤). –ó–∞—Ç–µ–º –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ 3 –≤–µ—Å—ë–ª—ã—Ö bullet-—Å–æ–≤–µ—Ç–∞, ‚â§12 —Å–ª–æ–≤.")
    res = OpenAI(api_key=os.getenv("OPENAI_API_KEY")).chat.completions.create(
        model="gpt-4o-mini", temperature=0.6,
        messages=[{"role":"user","content":prompt}]
    ).choices[0].message.content.strip().splitlines()
    lines=[l.strip() for l in res if l.strip()]
    summary=lines[0]
    tips="\n".join(f"- {l.lstrip('-‚Ä¢ ').strip()}" for l in lines[1:4])
    return summary, tips

# --- Telegram send -------------------------------------------------------
async def send(text: str):
    await Bot(os.getenv("TELEGRAM_TOKEN")).send_message(
        chat_id=os.getenv("CHANNEL_ID"),
        text=text[:4096], parse_mode="HTML",
        disable_web_page_preview=True)

# --- main ----------------------------------------------------------------
async def main():
    md = build_message()
    print("Preview:", md.replace("\n"," | ")[:300])
    try:
        await send(md)
        print("‚úì sent")
    except tg_err.TelegramError as e:
        print("Telegram error:", e, file=sys.stderr)
        raise

if __name__ == "__main__":
    asyncio.run(main())
