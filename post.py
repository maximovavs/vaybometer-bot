#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post.py  ‚Äì –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ Telegram-–∫–∞–Ω–∞–ª–∞ ¬´VayboMeter¬ª

–û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç–ª–∏—á–∏—è:
‚Ä¢ ¬´–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ **–Ω–∞ –ö–∏–ø—Ä–µ** ‚Ä¶¬ª, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –õ–∏–º–∞—Å—Å–æ–ª.
‚Ä¢ –ü–æ–¥ –æ–±–ª–∞—á–Ω–æ—Å—Ç—å—é –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–µ–∫—Å—Ç WMO-–æ–ø–∏—Å–∞–Ω–∏—è.
‚Ä¢ –î–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–µ–ª–∫—É —Ç—Ä–µ–Ω–¥–∞ (utils.pressure_trend).
‚Ä¢ –¶–≤–µ—Ç–Ω–∞—è —à–∫–∞–ª–∞ K-index (utils.kp_emoji).
‚Ä¢ PM-–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –æ–∫—Ä–∞—à–∏–≤–∞—é—Ç—Å—è (utils.pm_color), –±–µ–∑ ¬´‚Äî¬ª.
‚Ä¢ –ü—ã–ª—å—Ü–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ –Ω–æ–≤–æ–≥–æ pollen.py.
‚Ä¢ –®—É–º–∞–Ω: —á–∞—Å—Ç–æ—Ç–∞ + —Å—Ç—Ä–µ–ª–∫–∞ get_schumann_trend().
‚Ä¢ –í–æ–¥–∞: –ø–æ–º–µ—Ç–∫–∞ ¬´ü•∂ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ¬ª / ¬´üå° –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ¬ª.
"""

from __future__ import annotations

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ std / pypi ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import os, asyncio, logging, statistics, requests
from typing import Dict, Tuple, List, Optional

import pendulum
from telegram import Bot, error as tg_err

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –Ω–∞—à–∏ —É—Ç–∏–ª–∏—Ç—ã –∏ –º–æ–¥—É–ª–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from utils import (
    compass,          # –∞–Ω–≥–ª. —Ä—É–º–±—ã (–æ—Å—Ç–∞–≤–∏–º –¥–ª—è fallback)
    clouds_word, wind_phrase, safe, get_fact,
    WEATHER_ICONS, AIR_EMOJI,
    pm_color, kp_emoji, pressure_trend          # –Ω–æ–≤—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏
)
from weather   import get_weather, fetch_tomorrow_temps
from air       import get_air, get_sst, get_kp
from pollen    import get_pollen
from schumann  import get_schumann, get_schumann_trend
from astro     import astro_events
from gpt       import gpt_blurb

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è / –æ–∫—Ä—É–∂–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

TZ            = pendulum.timezone("Asia/Nicosia")
TODAY         = pendulum.now(TZ).date()
TOMORROW      = TODAY.add(days=1)

TOKEN         = os.environ["TELEGRAM_TOKEN"]
CHAT_ID       = int(os.environ["CHANNEL_ID"])
UNSPLASH_KEY  = os.getenv("UNSPLASH_KEY")

POLL_QUESTION = "–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î"
POLL_OPTIONS  = ["üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏", "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
                 "üò¥ –°–ª–µ–≥–∫–∞ –≤—è–ª—ã–π(–∞—è)", "ü§í –í—Å—ë –ø–ª–æ—Ö–æ"]

# –æ—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
CITIES: Dict[str, Tuple[float, float]] = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}

# –∫—Ä–∞—Ç–∫–∏–π —Å–ª–æ–≤–∞—Ä—å WMO-–∫–æ–¥ ‚Üí –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ–ø–æ–ª¬≠–Ω—è–π—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
WMO_DESC = {
    0:  "–Ø—Å–Ω–æ", 1: "–ü—Ä–µ–∏–º. —è—Å–Ω–æ", 2: "–ü–µ—Ä–µ–º. –æ–±–ª–∞—á–Ω–æ—Å—Ç—å", 3: "–ü–∞—Å–º—É—Ä–Ω–æ",
    45: "–¢—É–º–∞–Ω", 48: "–ò–∑–º–æ—Ä–æ–∑—å", 51: "–ú–µ–ª–∫–∏–π –º–æ—Ä–æ—Å—å", 53: "–ú–æ—Ä–æ—Å—å",
    55: "–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å", 61: "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å", 63: "–î–æ–∂–¥—å",
    65: "–õ–∏–≤–µ–Ω—å", 71: "–°–Ω–µ–≥", 95: "–ì—Ä–æ–∑–∞"
}

# —Ä—É—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º 16 —Ä—É–º–± –∫–æ–º–ø–∞—Å–∞ (–¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã)
COMPASS_RU = [
    "C", "–°C–í", "–°–í", "–íC–í", "–í", "–í–Æ–í", "–Æ–í", "–Æ–Æ–í",
    "–Æ", "–Æ–Æ–ó", "–Æ–ó", "–ó–Æ–ó", "–ó", "–óC–ó", "–°–ó", "–°C–ó"
]
def compass_ru(deg: float) -> str:
    return COMPASS_RU[int((deg / 22.5) + .5) % 16]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    parts: List[str] = []

    # 1. –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è/–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–≤—Ç—Ä–∞ (–õ–∏–º–∞—Å—Å–æ–ª)
    day_max, night_min = fetch_tomorrow_temps(*CITIES["Limassol"])
    if day_max is None or night_min is None:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å max/min –Ω–∞ –∑–∞–≤—Ç—Ä–∞")

    # —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –≤–µ—Ç—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏—è‚Ä¶)
    w_lim = get_weather(*CITIES["Limassol"])
    if not w_lim:
        raise RuntimeError("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    cur          = w_lim.get("current") or w_lim["current_weather"]
    wind_kmh     = cur.get("windspeed")     or cur.get("wind_speed") or 0.0
    wind_deg     = cur.get("winddirection") or cur.get("wind_deg")   or 0.0
    press        = cur.get("pressure")      or w_lim["hourly"]["surface_pressure"][0]
    clouds_pct   = cur.get("clouds")        or w_lim["hourly"]["cloud_cover"][0]
    cloud_w      = clouds_word(clouds_pct)
    press_arrow  = pressure_trend(w_lim)

    # WMO-–æ–ø–∏—Å–∞–Ω–∏–µ
    wcode        = cur.get("weathercode", 0)
    w_desc       = WMO_DESC.get(wcode, "")

    # —Å—Ä–µ–¥–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –ö–∏–ø—Ä—É
    all_day, all_night = [], []
    for la, lo in CITIES.values():
        d, n = fetch_tomorrow_temps(la, lo)
        if d is not None:
            all_day.append(d)
            all_night.append(n if n is not None else d)
    avg_day   = statistics.mean(all_day)   if all_day   else day_max
    avg_night = statistics.mean(all_night) if all_night else night_min

    icon = WEATHER_ICONS.get(cloud_w, "üå¶Ô∏è")
    parts += [
        f"{icon} <b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –ö–∏–ø—Ä–µ {TOMORROW.format('DD.MM.YYYY')}</b>",
        f"üå° –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø.: {avg_day:.0f} ¬∞C",
        f"<b>–¢–µ–º–ø. –¥–Ω—ë–º/–Ω–æ—á—å—é:</b> {day_max:.1f}/{night_min:.1f} ¬∞C",
        #  f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {cloud_w}",
        f"üå°Ô∏è {w_desc}",
        f"<b>–í–µ—Ç–µ—Ä:</b> {wind_phrase(wind_kmh)} "
        f"({wind_kmh:.1f} –∫–º/—á, {compass_ru(wind_deg)})",
        f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {press:.0f} –≥–ü–∞ {press_arrow}",
    ]
    if w_lim.get("strong_wind"):
        parts.append("‚ö†Ô∏è –í–æ–∑–º–æ–∂–µ–Ω –ø–æ—Ä—ã–≤–∏—Å—Ç—ã–π –≤–µ—Ç–µ—Ä")
    if w_lim.get("fog_alert"):
        parts.append("üåÅ –£—Ç—Ä–æ–º –≤–æ–∑–º–æ–∂–µ–Ω —Ç—É–º–∞–Ω ‚Äì –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö")
    parts.append("‚Äî‚Äî‚Äî")

    # 2. —Ä–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤
    temps: Dict[str, Tuple[float, float]] = {}
    for city, (la, lo) in CITIES.items():
        d, n = fetch_tomorrow_temps(la, lo)
        if d is not None:
            temps[city] = (d, n if n is not None else d)

    parts.append("üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å)</b>")
    medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£"]
    for i, (city, (d, n)) in enumerate(sorted(temps.items(),
                                              key=lambda kv: kv[1][0],
                                              reverse=True)[:4]):
        parts.append(f"{medals[i]} {city}: {d:.1f}/{n:.1f} ¬∞C")
    parts.append("‚Äî‚Äî‚Äî")

    # 3. –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞
    air = get_air()
    parts.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    parts.append(
        f"{AIR_EMOJI[air['lvl']]} {air['lvl']} "
        f"(AQI {air['aqi']}) | "
        f"PM‚ÇÇ.‚ÇÖ: {pm_color(air['pm25'])} | "
        f"PM‚ÇÅ‚ÇÄ: {pm_color(air['pm10'])}"
    )

    # 4. –ø—ã–ª—å—Ü–∞
    pol = get_pollen()
    if pol:
        parts.append(
            f"üåø –ü—ã–ª—å—Ü–∞ ‚Ä¢ –¥–µ—Ä–µ–≤—å—è {pol['tree']} | "
            f"—Ç—Ä–∞–≤—ã {pol['grass']} | —Å–æ—Ä–Ω—è–∫–∏ {pol['weed']} ‚Äî —Ä–∏—Å–∫ {pol['risk']}"
        )
    parts.append("‚Äî‚Äî‚Äî")

    # 5. –≥–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ / –®—É–º–∞–Ω / –≤–æ–¥–∞ / –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    kp_val, kp_state = get_kp()
    if kp_val is not None:
        parts.append(f"{kp_emoji(kp_val)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ Kp {kp_val:.1f} ({kp_state})")
    else:
        parts.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ ‚Äì –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    sch = get_schumann()
    if "freq" in sch:
        trend = get_schumann_trend()
        arrow = "‚Üë" if trend == "up" else "‚Üì" if trend == "down" else "‚Üí"
        parts.append(f"üéµ –®—É–º–∞–Ω: {sch['freq']:.2f} –ì—Ü {arrow}")
    else:
        parts.append(f"üéµ –®—É–º–∞–Ω: {sch['msg']}")

    sst = get_sst()
    if sst is not None:
        label = "üå° –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ" if sst >= 18 else "ü•∂ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ"
        parts.append(f"üåä –í–æ–¥–∞: {sst:.1f} ¬∞C {label} (Open-Meteo)")
    astro = astro_events()
    if astro:
        parts.append("üåå –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è ‚Äì " + " | ".join(astro))
    parts.append("‚Äî‚Äî‚Äî")

    # 6. –≤—ã–≤–æ–¥ –∏ —Å–æ–≤–µ—Ç—ã
    culprit = ("—Ç—É–º–∞–Ω"            if w_lim.get("fog_alert")        else
               "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"   if kp_val and kp_val >= 5        else
               "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"  if press < 1007                  else
               "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä"    if w_lim.get("strong_wind")      else
               "–ª—É–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ")
    summary, tips = gpt_blurb(culprit)

    parts.append(f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}")
    parts.append("‚Äî‚Äî‚Äî")
    parts.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    parts.extend(f"‚Ä¢ {t}" for t in tips)
    parts.append("‚Äî‚Äî‚Äî")
    parts.append(f"üìö {get_fact(TOMORROW)}")

    return "\n".join(parts)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Telegram helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_main_post(bot: Bot) -> None:
    html = build_msg()
    logging.info("Preview: %s", html.replace("\n", " | ")[:250])
    await bot.send_message(
        CHAT_ID, html,
        parse_mode="HTML", disable_web_page_preview=True
    )

async def send_poll_if_friday(bot: Bot) -> None:
    if pendulum.now(TZ).weekday() == 4:  # Friday
        await bot.send_poll(
            CHAT_ID, question=POLL_QUESTION, options=POLL_OPTIONS,
            is_anonymous=False, allows_multiple_answers=False
        )

async def fetch_unsplash_photo() -> Optional[str]:
    if not UNSPLASH_KEY:
        return None
    j = requests.get(
        "https://api.unsplash.com/photos/random",
        params={"query": "cyprus coast sunset", "client_id": UNSPLASH_KEY},
        timeout=15
    ).json()
    return j.get("urls", {}).get("regular")

async def send_photo(bot: Bot, url: str) -> None:
    try:
        await bot.send_photo(CHAT_ID, photo=url, caption="–§–æ—Ç–æ –¥–Ω—è ‚Ä¢ Unsplash")
    except tg_err.TelegramError as e:
        logging.warning("Photo send error: %s", e)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main entrypoint ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    bot = Bot(token=TOKEN)

    await send_main_post(bot)
    await send_poll_if_friday(bot)

    if UNSPLASH_KEY and TODAY.day % 3 == 0:
        if (photo := await fetch_unsplash_photo()):
            await send_photo(bot, photo)

    logging.info("All tasks done ‚úì")

if __name__ == "__main__":
    asyncio.run(main())
