"""
post.py ‚Äì Vaybo–ú–µ—Ç—Ä v3.0
–§–æ—Ä–º–∏—Ä—É–µ—Ç Markdown-–¥–∞–π–¥–∂–µ—Å—Ç —Ä–æ–≤–Ω–æ –≤ —Å—Ç–∏–ª–µ ¬´–∏–¥–µ–∞–ª—å–Ω–æ–≥–æ¬ª —Å–æ–æ–±—â–µ–Ω–∏—è.

* –í—Å–µ –±–ª–æ–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤ Python –∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–≥–∏–π —à–∞–±–ª–æ–Ω
* GPT –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è –∞–±–∑–∞—Ü–∞ ¬´–í—ã–≤–æ–¥¬ª –∏ —Å–ø–∏—Å–∫–∞ ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª
* –ù–∏–∫–∞–∫–∏—Ö <br>, &nbsp;, HTML-—Ç–µ–≥–æ–≤ ‚Äî Telegram –ø–æ–ª—É—á–∞–µ—Ç Markdown
* –ü—É—Å—Ç—ã–µ –±–ª–æ–∫–∏ (None) –æ—Ç–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è, —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è

GitHub Secrets (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
  OPENAI_API_KEY  TELEGRAM_TOKEN  CHANNEL_ID   # -100‚Ä¶
  OWM_KEY         AIRVISUAL_KEY   TOMORROW_KEY

requirements.txt:
  requests python-dateutil openai python-telegram-bot pyswisseph
"""
from __future__ import annotations

import asyncio
import json
import os
import sys
from datetime import datetime, timezone
from typing import Any, Dict, Optional

import requests
import swisseph as swe                     # pip install pyswisseph
from dateutil import tz
from openai import OpenAI
from telegram import Bot, error as tg_err

LAT, LON = 34.707, 33.022                  # Limassol marina
TZ = tz.gettz("Asia/Nicosia")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HTTP helper ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _get(url: str, **params) -> Optional[dict]:
    try:
        r = requests.get(url, params=params, timeout=20)
        r.raise_for_status()
        return r.json()
    except Exception as exc:                 # noqa: BLE001
        print(f"[warn] {url} ‚Üí {exc}", file=sys.stderr)
        return None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Data sources ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_weather() -> Optional[dict]:
    key = os.getenv("OWM_KEY")
    if key:
        for ver in ("3.0", "2.5"):
            data = _get(
                f"https://api.openweathermap.org/data/{ver}/onecall",
                lat=LAT, lon=LON, appid=key,
                units="metric", exclude="minutely,hourly,alerts",
            )
            if data and data.get("current"):
                return data
    # fallback: Open-Meteo
    return _get(
        "https://api.open-meteo.com/v1/forecast",
        latitude=LAT, longitude=LON,
        current_weather=True,
    )


def get_air() -> Optional[dict]:
    key = os.getenv("AIRVISUAL_KEY")
    if not key:
        return None
    return _get(
        "https://api.airvisual.com/v2/nearest_city",
        lat=LAT, lon=LON, key=key
    )


def get_pollen() -> Optional[dict]:
    key = os.getenv("TOMORROW_KEY")
    if not key:
        return None
    data = _get(
        "https://api.tomorrow.io/v4/timelines",
        apikey=key, location=f"{LAT},{LON}",
        fields="treeIndex,grassIndex,weedIndex",
        timesteps="1d", units="metric",
    )
    try:
        v = data["data"]["timelines"][0]["intervals"][0]["values"]
        return {"tree": v["treeIndex"], "grass": v["grassIndex"], "weed": v["weedIndex"]}
    except Exception:
        return None


def get_sst() -> Optional[float]:
    data = _get(
        "https://marine-api.open-meteo.com/v1/marine",
        latitude=LAT, longitude=LON,
        hourly="sea_surface_temperature", timezone="UTC",
    )
    try:
        return round(float(data["hourly"]["sea_surface_temperature"][0]), 1)
    except Exception:
        return None


def get_kp() -> Optional[float]:
    arr = _get("https://services.swpc.noaa.gov/products/noaa-planetary-k-index.json")
    try:
        return float(arr[-1][1])
    except Exception:
        return None


def get_schumann() -> Optional[dict]:
    data = _get("https://api.glcoherence.org/v1/earth")
    try:
        return {"freq": data["frequency_1"], "amp": data["amplitude_1"]}
    except Exception:
        return None


def get_astro_event() -> Optional[str]:
    today = datetime.utcnow()
    jd = swe.julday(today.year, today.month, today.day)
    lon_ven = swe.calc_ut(jd, swe.VENUS)[0][0]
    lon_sat = swe.calc_ut(jd, swe.SATURN)[0][0]
    diff = abs((lon_ven - lon_sat + 180) % 360 - 180)
    if diff < 3:
        return "–ö–æ–Ω—ä—é–Ω–∫—Ü–∏—è –í–µ–Ω–µ—Ä—ã –∏ –°–∞—Ç—É—Ä–Ω–∞ ‚Äî —Ñ–æ–∫—É—Å –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"
    return None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ GPT: –≤—ã–≤–æ–¥ + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def gpt_comment(weather_json: dict) -> tuple[str, str]:
    client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])
    prompt = (
        "–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞–π –æ–¥–∏–Ω –∞–±–∑–∞—Ü –≤—ã–≤–æ–¥–∞ "
        "–∏ 4‚Äì5 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è. –§–æ—Ä–º–∞—Ç:\n"
        "–í—ã–≤–æ–¥: ...\n"
        "–°–æ–≤–µ—Ç—ã:\n- ...\n- ...\n" +
        json.dumps(weather_json, ensure_ascii=False)
    )
    rsp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.5,
    )
    text = rsp.choices[0].message.content.strip()
    if "–°–æ–≤–µ—Ç—ã:" in text:
        summary, tips_block = text.split("–°–æ–≤–µ—Ç—ã:", 1)
        tips = "\n".join(f"- {t.strip('- ')}" for t in tips_block.strip().splitlines() if t.strip())
        return summary.replace("–í—ã–≤–æ–¥:", "").strip(), tips
    return text, ""


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Digest builder (Markdown) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_md(data: Dict[str, Any]) -> str:
    parts: list[str] = []

    # --- –ü–æ–≥–æ–¥–∞ ---
    w = data["weather"]
    if w:
        if "current" in w:                      # OpenWeather
            cur = w["current"]
            temp = round(cur["temp"])
            wind = cur["wind_speed"] * 3.6      # m/s ‚Üí km/h
            cloud = cur.get("clouds", "‚Äî")
            pres = cur.get("pressure", "‚Äî")
            parts += [
                "‚òÄÔ∏è **–ü–æ–≥–æ–¥–∞**",
                f"**–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** –¥–Ω—ë–º –¥–æ {temp} ¬∞C",
                f"**–û–±–ª–∞—á–Ω–æ—Å—Ç—å:** {cloud} %",
                f"**–í–µ—Ç–µ—Ä:** {wind:.1f} –∫–º/—á",
                f"**–î–∞–≤–ª–µ–Ω–∏–µ:** {pres} –≥–ü–∞",
            ]
        else:                                   # Open-meteo
            cw = w["current_weather"]
            parts += [
                "‚òÄÔ∏è **–ü–æ–≥–æ–¥–∞**",
                f"**–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {cw['temperature']} ¬∞C",
                f"**–í–µ—Ç–µ—Ä:** {cw['windspeed']:.1f} –∫–º/—á",
            ]

    # --- –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ ---
    air = data["air"]
    if air:
        pol = air["data"]["current"]["pollution"]
        parts += [
            "",
            "üå¨Ô∏è **–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞**",
            f"**AQI:** {pol['aqius']}  |  **PM2.5:** {pol['aqius']}",
        ]

    # --- –ü—ã–ª—å—Ü–∞ ---
    p = data["pollen"]
    if p:
        parts += [
            "",
            "üåø **–£—Ä–æ–≤–µ–Ω—å –ø—ã–ª—å—Ü—ã**",
            f"**–î–µ—Ä–µ–≤—å—è:** {p['tree']}  |  **–¢—Ä–∞–≤—ã:** {p['grass']}  |  **–°–æ—Ä–Ω—è–∫–∏:** {p['weed']}",
        ]

    # --- –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∏–∫–∞ ---
    kp = data["kp"]
    if kp is not None:
        status = "–Ω–∏–∑–∫–∏–π" if kp < 4 else "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π"
        parts += [
            "",
            "üåå **–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**",
            f"**–£—Ä–æ–≤–µ–Ω—å:** {status} (Kp {kp:.1f})",
        ]

    # --- –®—É–º–∞–Ω ---
    sch = data["schumann"]
    if sch:
        parts += [
            "",
            "üìà **–†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞**",
            f"**–ß–∞—Å—Ç–æ—Ç–∞:** ‚âà{sch['freq']:.1f} –ì—Ü",
            f"**–ê–º–ø–ª–∏—Ç—É–¥–∞:** {sch['amp']}",
        ]

    # --- –ú–æ—Ä–µ ---
    if data["sst"]:
        parts += [
            "",
            "üåä **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã –≤ –º–æ—Ä–µ**",
            f"**–°–µ–π—á–∞—Å:** {data['sst']} ¬∞C",
        ]

    # --- –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è ---
    if data["astro"]:
        parts += ["", "üîÆ **–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è**", data["astro"]]

    parts.append("---")

    # GPT-–≤—ã–≤–æ–¥ / —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    summary, tips = gpt_comment(w or {})
    parts += ["### üìù –í—ã–≤–æ–¥", summary, "", "---", "### ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", tips]

    return "\n".join(parts)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Telegram send ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_markdown(md: str) -> None:
    bot = Bot(os.environ["TELEGRAM_TOKEN"])
    await bot.send_message(chat_id=os.environ["CHANNEL_ID"],
                           text=md[:4096], parse_mode="Markdown",
                           disable_web_page_preview=True)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    raw = {
        "weather": get_weather(),
        "air": get_air(),
        "pollen": get_pollen(),
        "sst": get_sst(),
        "kp": get_kp(),
        "schumann": get_schumann(),
        "astro": get_astro_event(),
    }
    print("RAW slice:", json.dumps(raw, ensure_ascii=False)[:400])
    md = build_md(raw)
    print("MD snippet:", md[:200].replace("\n", " | "))
    try:
        await send_markdown(md)
        print("‚úì sent")
    except tg_err.TelegramError as exc:
        print("Telegram error:", exc, file=sys.stderr)
        raise


if __name__ == "__main__":
    asyncio.run(main())
