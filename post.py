#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import asyncio
import logging
from typing import Any, Dict, Optional

import pendulum
from telegram import Bot, error as tg_err

from utils import (
    compass, clouds_word, wind_phrase, safe, get_fact,
    WEATHER_ICONS, AIR_EMOJI
)
from weather import get_weather
from air import get_air, get_pollen, get_sst, get_kp
from schumann import get_schumann
from astro import astro_events
from gpt import gpt_blurb

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Constants ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ        = pendulum.timezone("Asia/Nicosia")
TODAY     = pendulum.now(TZ).date()
TOMORROW  = TODAY.add(days=1)
TOKEN     = os.environ["TELEGRAM_TOKEN"]
CHAT_ID   = int(os.environ["CHANNEL_ID"])
UNSPLASH  = os.getenv("UNSPLASH_KEY")

POLL_Q    = "–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î"
POLL_OPTS = ["üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏", "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üò¥ –°–ª–µ–≥–∫–∞ –≤—è–ª—ã–π(–∞—è)", "ü§í –í—Å—ë –ø–ª–æ—Ö–æ"]

CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ build_msg ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    P: list[str] = []

    # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –õ–∏–º–∞—Å—Å–æ–ª–∞
    lat, lon = CITIES["Limassol"]
    w = get_weather(lat, lon)
    if not w:
        raise RuntimeError("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    # –í—ã–Ω–µ—Å–µ–º common
    strong = w.get("strong_wind", False)
    fog    = w.get("fog_alert", False)

    # ‚Ä¶–Ω–æ cur –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ w["current"] –∏–ª–∏ —Ç–æ–ª—å–∫–æ –≤ w["current_weather"]
    if "current" in w:
        cur = w["current"]
    else:
        # fallback: Open-Meteo –±–µ–∑ ¬´current¬ª
        cw = w["current_weather"]
        cur = {
            "windspeed":     cw["windspeed"],
            "winddirection": cw["winddirection"],
            "pressure":      w["hourly"]["surface_pressure"][0],
            "clouds":        w["hourly"]["cloud_cover"][0],
        }

    wind_kmh = cur["windspeed"]
    wind_deg = cur["winddirection"]
    press    = cur["pressure"]
    cloud_w  = clouds_word(cur["clouds"])

    # –î–æ—Å—Ç–∞–µ–º –∑–∞–≤—Ç—Ä–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ daily (–¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞)
    day_arr   = w["daily"]["temperature_2m_max"]
    night_arr = w["daily"]["temperature_2m_min"]
    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –µ—Å—Ç—å index 1
    day_max   = day_arr[1]
    night_min = night_arr[1]

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –±–∞–∑–æ–≤—ã–π –±–ª–æ–∫
    icon = WEATHER_ICONS.get(cloud_w, "üå¶Ô∏è")
    P.append(f"{icon} <b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ {TOMORROW.format('DD.MM.YYYY')}</b>")
    P.append(f"<b>–¢–µ–º–ø. –¥–Ω—ë–º/–Ω–æ—á—å—é:</b> {day_max:.1f}/{night_min:.1f} ¬∞C")
    P.append(f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {cloud_w}")
    P.append(f"<b>–í–µ—Ç–µ—Ä:</b> {wind_phrase(wind_kmh)} ({wind_kmh:.1f} –∫–º/—á, {compass(wind_deg)})")
    if strong: P.append("‚ö†Ô∏è –í–µ—Ç–µ—Ä –º–æ–∂–µ—Ç —É—Å–∏–ª–∏—Ç—å—Å—è")
    if fog:    P.append("üåÅ –í–æ–∑–º–æ–∂–µ–Ω —Ç—É–º–∞–Ω, –≤–æ–¥–∏—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ")
    P.append(f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {press:.0f} –≥–ü–∞")
    P.append("‚Äî‚Äî‚Äî")

    # 2Ô∏è‚É£ –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å)
    temps: Dict[str, tuple[float, float]] = {}
    for city, (la, lo) in CITIES.items():
        w2 = get_weather(la, lo)
        if not w2:
            continue
        d2 = w2["daily"]["temperature_2m_max"][1]
        n2 = w2["daily"]["temperature_2m_min"][1]
        temps[city] = (d2, n2)

    P.append("üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å)</b>")
    sorted_c = sorted(temps.items(), key=lambda kv: kv[1][0], reverse=True)
    medals   = ["ü•á","ü•à","ü•â","4Ô∏è‚É£"]
    for i, (city, (d_v, n_v)) in enumerate(sorted_c[:4]):
        P.append(f"{medals[i]} {city}: {d_v:.1f}/{n_v:.1f} ¬∞C")
    P.append("‚Äî‚Äî‚Äî")

    # 3Ô∏è‚É£ –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ + –ø—ã–ª—å—Ü–∞
    air = get_air() or {}
    P.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    if air:
        lvl = air["lvl"]
        aqi = air["aqi"]
        P.append(f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {aqi}) | "
                 f"PM2.5: {safe(air['pm25'],'¬µg/–º¬≥')} | PM10: {safe(air['pm10'],'¬µg/–º¬≥')}")
    else:
        P.append("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    pollen = get_pollen()
    if pollen:
        idx = lambda v: ["–Ω–µ—Ç","–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω–Ω—ã–π","–≤—ã—Å–æ–∫–∏–π","–æ—á. –≤—ã—Å–æ–∫–∏–π","—ç–∫—Å—Ç—Ä–∏–º"][int(round(v))]
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(f"–î–µ—Ä–µ–≤—å—è ‚Äî {idx(pollen['treeIndex'])} | "
                 f"–¢—Ä–∞–≤—ã ‚Äî {idx(pollen['grassIndex'])} | "
                 f"–°–æ—Ä–Ω—è–∫–∏ ‚Äî {idx(pollen['weedIndex'])}")
    P.append("‚Äî‚Äî‚Äî")

    # 4Ô∏è‚É£ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ / –®—É–º–∞–Ω / –≤–æ–¥–∞ / –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    kp, kp_st = get_kp()
    sch       = get_schumann()
    sst       = get_sst()
    astro     = astro_events()

    if kp is not None:
        P.append(f"üß≤ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞</b> K-index: {kp:.1f} ({kp_st})")
    else:
        P.append("üß≤ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞</b> –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    if sch.get("high"):
        P.append("üéµ <b>–®—É–º–∞–Ω:</b> ‚ö°Ô∏è –≤–∏–±—Ä–∞—Ü–∏–∏ –ø–æ–≤—ã—à–µ–Ω—ã")
    elif "freq" in sch:
        P.append(f"üéµ <b>–®—É–º–∞–Ω:</b> ‚âà{sch['freq']:.1f} –ì—Ü")
    else:
        P.append(f"üéµ <b>–®—É–º–∞–Ω:</b> {sch.get('msg','–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")

    if sst is not None:
        P.append(f"üåä <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã:</b> {sst:.1f} ¬∞C")
    if astro:
        P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b> ‚Äì " + " | ".join(astro))
    P.append("‚Äî‚Äî‚Äî")

    # 5Ô∏è‚É£ –í—ã–≤–æ–¥ + —Å–æ–≤–µ—Ç—ã
    if fog:
        culprit = "—Ç—É–º–∞–Ω"
    elif kp_st == "–±—É—Ä—è":
        culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"
    elif press < 1007:
        culprit = "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"
    elif strong:
        culprit = "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä"
    else:
        culprit = "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"

    summary, tips = gpt_blurb(culprit)
    P.append(f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    for t in tips:
        P.append(f"‚Ä¢ {t}")
    P.append("‚Äî‚Äî‚Äî")
    P.append(f"üìö {get_fact(TOMORROW)}")

    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û—Ç–ø—Ä–∞–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_main(bot: Bot) -> None:
    html = build_msg()
    logging.info("Preview: %s", html.replace("\n"," | ")[:200])
    try:
        await bot.send_message(
            CHAT_ID, html,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise

async def send_poll(bot: Bot) -> None:
    if pendulum.now(TZ).weekday() == 4:
        try:
            await bot.send_poll(
                CHAT_ID,
                question=POLL_Q,
                options=POLL_OPTS,
                is_anonymous=False,
                allows_multiple_answers=False
            )
        except tg_err.TelegramError as e:
            logging.warning("Poll error: %s", e)

async def fetch_photo() -> Optional[str]:
    if not UNSPLASH:
        return None
    j = get_weather._get(  # <-- –ø–æ–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –≤–∞—à _get –∏–∑ utils, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        "https://api.unsplash.com/photos/random",
        query="cyprus coast sunset",
        client_id=UNSPLASH
    )
    return j.get("urls", {}).get("regular")

async def send_photo(bot: Bot, url: str) -> None:
    try:
        await bot.send_photo(CHAT_ID, photo=url, caption="–§–æ—Ç–æ –¥–Ω—è ‚Ä¢ Unsplash")
    except tg_err.TelegramError as e:
        logging.warning("Photo error: %s", e)

async def main() -> None:
    bot = Bot(TOKEN)
    await send_main(bot)
    await send_poll(bot)
    if UNSPLASH and pendulum.now(TZ).day % 3 == 0:
        if url := await fetch_photo():
            await send_photo(bot, url)
    logging.info("All done ‚úì")

if __name__ == "__main__":
    asyncio.run(main())
