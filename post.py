#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import asyncio
import logging

import pendulum
from telegram import Bot, error as tg_err

from utils import (
    compass, clouds_word, wind_phrase, safe, get_fact,
    WEATHER_ICONS, AIR_EMOJI
)
from weather import get_weather
from air import get_air, get_pollen, get_sst, get_kp
from schumann import get_schumann
from astro import astro_events
from gpt import gpt_blurb

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Logger ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Constants ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ       = pendulum.timezone("Asia/Nicosia")
TODAY    = pendulum.now(TZ).date()
TOMORROW = TODAY.add(days=1)

TOKEN    = os.environ["TELEGRAM_TOKEN"]
CHAT_ID  = int(os.environ["CHANNEL_ID"])
UNSPLASH_KEY = os.getenv("UNSPLASH_KEY")

POLL_QUESTION = "–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î"
POLL_OPTIONS  = ["üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏", "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üò¥ –°–ª–µ–≥–∫–∞ –≤—è–ª—ã–π(–∞—è)", "ü§í –í—Å—ë –ø–ª–æ—Ö–æ"]


def build_msg() -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram."""
    # 1) –ü–æ–≥–æ–¥–∞
    w = get_weather(34.707, 33.022)
    if not w:
        raise RuntimeError("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π current
    if "current" in w:
        cur = w["current"]
    else:
        cur = w["current_weather"]

    # –î–∞–≤–ª–µ–Ω–∏–µ, –æ–±–ª–∞–∫–∞, –≤–µ—Ç–µ—Ä
    press     = cur["pressure"]
    cloud_pc  = cur["clouds"]
    cloud_w   = clouds_word(cloud_pc)
    wind_kmh  = (cur.get("wind_speed") or cur.get("windspeed")) * (3.6 if "wind_speed" in cur else 1)
    wind_deg  = cur.get("wind_deg") or cur.get("winddirection")

    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –∫–æ–¥ –ø–æ–≥–æ–¥—ã
    if "current" in w:
        d = w["daily"][0]["temp"]
        day_max, night_min = d["max"], d["min"]
        wcode = cur.get("weather",[{"id":0}])[0]["id"]
    else:
        dblock = w["daily"]
        blk = dblock[0] if isinstance(dblock,list) else dblock
        temps = blk["temperature_2m_max"]; mins = blk["temperature_2m_min"]; codes = blk["weathercode"]
        day_max   = temps[1]  if len(temps)>1  else temps[0]
        night_min = mins[1]   if len(mins)>1   else mins[0]
        wcode     = codes[1]  if len(codes)>1  else codes[0]

    strong = w.get("strong_wind", False)
    fog    = w.get("fog_alert",   False)

    # 2) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
    CITIES = {
        "Limassol": (34.707,33.022),
        "Larnaca" : (34.916,33.624),
        "Nicosia" : (35.170,33.360),
        "Pafos"   : (34.776,32.424),
    }
    temps = {}
    for city,(la,lo) in CITIES.items():
        w2 = get_weather(la, lo)
        if not w2: continue
        if "current" in w2:
            mx = w2["daily"][0]["temp"]["max"]
            mn = w2["daily"][0]["temp"]["min"]
        else:
            blk2 = w2["daily"][0] if isinstance(w2["daily"],list) else w2["daily"]
            arr_mx = blk2["temperature_2m_max"]
            arr_mn = blk2["temperature_2m_min"]
            mx = arr_mx[1] if len(arr_mx)>1 else arr_mx[0]
            mn = arr_mn[1] if len(arr_mn)>1 else arr_mn[0]
        temps[city] = (mx, mn)
    # –°–∞–º—ã–π —Ç—ë–ø–ª—ã–π –∏ –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π (–ø–æ –¥–Ω—é)
    warm = max(temps, key=lambda c: temps[c][0])
    cold = min(temps, key=lambda c: temps[c][0])

    # 3) –í–æ–∑–¥—É—Ö, –ø—ã–ª—å—Ü–∞, KP, SST, –®—É–º–∞–Ω, Astro
    air   = get_air() or {}
    pollen= get_pollen() or {}
    kp, kp_state = get_kp()
    sst   = get_sst()
    sch   = get_schumann()
    astro = astro_events()

    # 4) –í–∏–Ω–æ–≤–Ω–∏–∫ –¥–ª—è GPT
    if fog:
        culprit = "—Ç—É–º–∞–Ω"
    elif kp_state=="–±—É—Ä—è":
        culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"
    elif press<1007:
        culprit = "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"
    elif strong:
        culprit = "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä"
    else:
        culprit = "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"
    summary, tips = gpt_blurb(culprit)

    # 5) –°–±–æ—Ä–∫–∞ HTML
    icon = WEATHER_ICONS.get(cloud_w, "üå¶Ô∏è")
    lines = [
        f"{icon} <b>–ü–æ–≥–æ–¥–∞ –Ω–∞ {TOMORROW.format('DD.MM.YYYY')} –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ</b>",
        f"<b>–¢–µ–º–ø.:</b> {day_max:.1f}/{night_min:.1f} ¬∞C",
        f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {cloud_w}",
        f"<b>–í–µ—Ç–µ—Ä:</b> {wind_phrase(wind_kmh)} ({wind_kmh:.1f} –∫–º/—á, {compass(wind_deg)})",
        *(["‚ö†Ô∏è –í–µ—Ç–µ—Ä –º–æ–∂–µ—Ç —É—Å–∏–ª–∏—Ç—å—Å—è"] if strong else []),
        *(["üåÅ –í–æ–∑–º–æ–∂–µ–Ω —Ç—É–º–∞–Ω"] if fog else []),
        f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {press:.0f} –≥–ü–∞",
        "‚Äî‚Äî‚Äî",
        "<b>üå°Ô∏è –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω—ë–º/–Ω–æ—á—å—é)</b>",
        *[f"{c}: {mx:.1f}/{mn:.1f} ¬∞C" for c,(mx,mn) in temps.items()],
        f"‚Ä¢ –°–∞–º—ã–π —Ç—ë–ø–ª—ã–π: {warm} | –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π: {cold}",
        "‚Äî‚Äî‚Äî",
        "üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>",
        f"{AIR_EMOJI.get(air.get('lvl'),'‚ö™')} AQI {air.get('aqi','‚Äî')} | "
        f"PM2.5: {safe(air.get('pm25'),' ¬µg/–º¬≥')} | PM10: {safe(air.get('pm10'),' ¬µg/–º¬≥')}",
    ]
    if pollen:
        idx = lambda v: ["–Ω–µ—Ç","–Ω–∏–∑–∫–∏–π","—É–º","–≤—ã—Å–æ–∫–∏–π","–æ—á. –≤—ã—Å–æ–∫–∏–π","—ç–∫—Å—Ç—Ä–∏–º"][int(round(v))]
        lines += [
            "üåø <b>–ü—ã–ª—å—Ü–∞</b>",
            f"–î–µ—Ä–µ–≤—å—è {idx(pollen['treeIndex'])}, –¢—Ä–∞–≤—ã {idx(pollen['grassIndex'])}, –°–æ—Ä–Ω—è–∫–∏ {idx(pollen['weedIndex'])}"
        ]
    lines += [
        f"üß≤ <b>–ì–µ–æ–º–∞–≥–Ω. –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {kp:.1f} ({kp_state})" if kp is not None else "üß≤ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
    ]
    if sch.get("high"):
        lines.append("üéµ <b>–®—É–º–∞–Ω:</b> ‚ö°Ô∏è –≤–∏–±—Ä–∞—Ü–∏–∏ –ø–æ–≤—ã—à–µ–Ω—ã")
    elif "freq" in sch:
        lines.append(f"üéµ <b>–®—É–º–∞–Ω:</b> ‚âà{sch['freq']:.1f} –ì—Ü")
    else:
        lines.append(f"üéµ <b>–®—É–º–∞–Ω:</b> {sch.get('msg','‚Äî')}")
    if sst is not None:
        lines.append(f"üåä <b>–¢–µ–º–ø. –≤–æ–¥—ã:</b> {sst:.1f} ¬∞C")
    if astro:
        lines.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è:</b> " + " | ".join(astro))
    lines += [
        "‚Äî‚Äî‚Äî",
        f"üìú <b>–í—ã–≤–æ–¥:</b> {summary}",
        "‚Äî‚Äî‚Äî",
        "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>",
        *[f"‚Ä¢ {t}" for t in tips],
        "‚Äî‚Äî‚Äî",
        f"üìö {get_fact(TOMORROW)}",
    ]

    return "\n".join(lines)


async def send_main_post(bot: Bot, text: str) -> None:
    try:
        await bot.send_message(CHAT_ID, text, parse_mode="HTML", disable_web_page_preview=True)
    except tg_err.TelegramError as e:
        logging.error("Telegram send error: %s", e)
        raise

async def send_friday_poll(bot: Bot) -> None:
    try:
        await bot.send_poll(CHAT_ID, POLL_QUESTION, POLL_OPTIONS,
                            is_anonymous=False, allows_multiple_answers=False)
    except tg_err.TelegramError as e:
        logging.warning("Poll error: %s", e)

async def fetch_unsplash_photo() -> str | None:
    if not UNSPLASH_KEY:
        return None
    j = await asyncio.get_event_loop().run_in_executor(
        None,
        lambda: __import__("utils")._get("https://api.unsplash.com/photos/random",
                                         query="cyprus sunset", client_id=UNSPLASH_KEY)
    )
    return j.get("urls",{}).get("regular")

async def send_photo(bot: Bot, url: str) -> None:
    try:
        await bot.send_photo(CHAT_ID, photo=url, caption="–§–æ—Ç–æ –¥–Ω—è ‚Ä¢ Unsplash")
    except tg_err.TelegramError as e:
        logging.warning("Photo error: %s", e)


async def main() -> None:
    bot = Bot(TOKEN)
    html = build_msg()
    logging.info("Preview: %s", html.replace("\n"," | ")[:200])

    await send_main_post(bot, html)

    # –æ–ø—Ä–æ—Å –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º
    if pendulum.now(TZ).is_friday():
        await send_friday_poll(bot)

    # —Ñ–æ—Ç–æ —Ä–∞–∑ –≤ 3 –¥–Ω—è (UTC)
    if UNSPLASH_KEY and (_dt := os.getenv("GITHUB_RUN_ID")) and (pendulum.now("UTC").day % 3 == 0):
        if photo_url := await fetch_unsplash_photo():
            await send_photo(bot, photo_url)

    logging.info("All done ‚úì")


if __name__ == "__main__":
    asyncio.run(main())
