"""post.py ‚Äì Vaybo–ú–µ—Ç—Ä v2.1 (indent‚Äësafe)

–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –õ–∏–º–∞—Å—Å–æ–ª—É –∏ —à–ª—ë—Ç –∫—Ä–∞—Å–∏–≤—ã–π HTML‚Äë–¥–∞–π–¥–∂–µ—Å—Ç –≤ Telegram.
–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:
  ‚òÄÔ∏è  –ü–æ–≥–æ–¥–∞             ‚Äî OpenWeather One Call (3.0 ‚Üí 2.5) ‚Üí Open‚ÄëMeteo fallback
  üå¨Ô∏è  –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞   ‚Äî IQAir / AirVisual
  üåø  –ü—ã–ª—å—Ü–∞              ‚Äî Tomorrow.io
  üåä  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è    ‚Äî Open‚ÄëMeteo Marine API
  üåå  –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∏–∫–∞ (Kp)   ‚Äî NOAA SWPC
  üìà  –†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞     ‚Äî Global Coherence (–º–æ–∂–µ—Ç —Ç–∞–π–º‚Äë–∞—É—Ç–∏—Ç—å—Å—è)
  üîÆ  –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è          ‚Äî Swiss Ephemeris (–ª–æ–∫–∞–ª—å–Ω–æ)

–¢—Ä–µ–±—É–µ–º—ã–µ GitHub‚Äë—Å–µ–∫—Ä–µ—Ç—ã:
  OPENAI_API_KEY, TELEGRAM_TOKEN, CHANNEL_ID,
  OWM_KEY, AIRVISUAL_KEY, TOMORROW_KEY

requirements.txt ‚Üí –¥–æ–±–∞–≤—å:
  requests python-dateutil openai python-telegram-bot pyswisseph
"""
from __future__ import annotations

import asyncio
import json
import math
import os
import re
import sys
from datetime import datetime, timezone
from typing import Any, Dict, Optional

import requests
import swisseph as swe  # pip install pyswisseph
from dateutil import tz
from openai import OpenAI
from telegram import Bot

LAT = 34.707  # Limassol Marina
LON = 33.022
LOCAL_TZ = tz.gettz("Asia/Nicosia")

# ---------------------------------------------------------------------------
# HTTP helper
# ---------------------------------------------------------------------------

def _get(url: str, **params) -> Optional[dict]:
    try:
        r = requests.get(url, params=params, timeout=20)
        r.raise_for_status()
        return r.json()
    except Exception as exc:  # noqa: BLE001, S110
        print(f"[warn] {url} failed: {exc}", file=sys.stderr)
        return None


# ---------------------------------------------------------------------------
# Data sources
# ---------------------------------------------------------------------------

def get_weather() -> Optional[dict]:
    """OpenWeather One¬†Call¬†3.0 ‚Üí¬†2.5 ‚Üí¬†Open‚ÄëMeteo."""
    key = os.getenv("OWM_KEY")
    if not key:
        return None

    # 1) One¬†Call¬†3.0
    data = _get(
        "https://api.openweathermap.org/data/3.0/onecall",
        lat=LAT,
        lon=LON,
        appid=key,
        units="metric",
        exclude="minutely,hourly,alerts",
    )
    if data and data.get("current"):
        return data

    # 2) One¬†Call¬†2.5 (free)
    data = _get(
        "https://api.openweathermap.org/data/2.5/onecall",
        lat=LAT,
        lon=LON,
        appid=key,
        units="metric",
        exclude="minutely,hourly,alerts",
    )
    if data and data.get("current"):
        return data

    # 3) Fallback ‚Äî Open‚ÄëMeteo
    return _get(
        "https://api.open-meteo.com/v1/forecast",
        latitude=LAT,
        longitude=LON,
        current_weather=True,
    )


def get_air_quality() -> Optional[dict]:
    key = os.getenv("AIRVISUAL_KEY")
    if not key:
        return None
    return _get(
        "https://api.airvisual.com/v2/nearest_city",
        lat=LAT,
        lon=LON,
        key=key,
    )


def get_pollen() -> Optional[dict]:
    key = os.getenv("TOMORROW_KEY")
    if not key:
        return None
    data = _get(
        "https://api.tomorrow.io/v4/timelines",
        apikey=key,
        location=f"{LAT},{LON}",
        fields="treeIndex,grassIndex,weedIndex",
        timesteps="1d",
        units="metric",
    )
    try:
        values = data["data"]["timelines"][0]["intervals"][0]["values"]
        return {
            "tree": values.get("treeIndex"),
            "grass": values.get("grassIndex"),
            "weed": values.get("weedIndex"),
        }
    except Exception:
        return None


def get_sst() -> Optional[dict]:
    data = _get(
        "https://marine-api.open-meteo.com/v1/marine",
        latitude=LAT,
        longitude=LON,
        hourly="sea_surface_temperature",
        timezone="UTC",
    )
    try:
        temp = float(data["hourly"]["sea_surface_temperature"][0])
        return {"sst": round(temp, 1)}
    except Exception:
        return None


def get_geomagnetic() -> Optional[dict]:
    arr = _get("https://services.swpc.noaa.gov/products/noaa-planetary-k-index.json")
    if not arr:
        return None
    try:
        kp = float(arr[-1][1])
        return {"kp": kp}
    except Exception:
        return None


def get_schumann() -> Optional[dict]:
    data = _get("https://api.glcoherence.org/v1/earth")
    try:
        return {"amp": data["amplitude_1"], "freq": data["frequency_1"]}
    except Exception:
        return None


# üîÆ Astrology (simple Venus‚ÄëSaturn conjunction)

def get_astro() -> Optional[dict]:
    today = datetime.utcnow()
    jd = swe.julday(today.year, today.month, today.day)
    lon_ven = swe.calc_ut(jd, swe.VENUS)[0]
    lon_sat = swe.calc_ut(jd, swe.SATURN)[0]
    diff = abs((lon_ven - lon_sat + 180) % 360 - 180)
    if diff < 3:
        return {"event": "–ö–æ–Ω—ä—é–Ω–∫—Ü–∏—è –í–µ–Ω–µ—Ä—ã –∏ –°–∞—Ç—É—Ä–Ω–∞ ‚Äî —Ñ–æ–∫—É—Å –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"}
    return None


# ---------------------------------------------------------------------------
# Collect raw data
# ---------------------------------------------------------------------------

def collect() -> Dict[str, Any]:
    return {
        "timestamp_utc": datetime.now(timezone.utc).isoformat(),
        "weather": get_weather(),
        "air": get_air_quality(),
        "pollen": get_pollen(),
        "sst": get_sst(),
        "geomagnetic": get_geomagnetic(),
        "schumann": get_schumann(),
        "astro": get_astro(),
    }


# ---------------------------------------------------------------------------
# OpenAI prettifier
# ---------------------------------------------------------------------------

def prettify(raw: Dict[str, Any]) -> str:
    client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

    system_msg = """
–¢—ã ‚Äî Vaybo–ú–µ—Ç—Ä‚Äë–ø–æ—ç—Ç. –°–¥–µ–ª–∞–π HTML‚Äë–¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è Telegram:\n
<b>üó∫Ô∏è –õ–æ–∫–∞—Ü–∏—è</b>\n–ì–æ—Ä–æ–¥: Limassol\n–°—Ç—Ä–∞–Ω–∞: Cyprus\n\n<b>üå¨Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>\nAQI: <—á–∏—Å–ª–æ> (<–∑–∞–≥—Ä—è–∑–Ω–∏—Ç–µ–ª—å>)\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <–∫–æ—Ä–æ—Ç–∫–æ>\n\n<b>‚òÄÔ∏è –ü–æ–≥–æ–¥–∞</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <¬∞C>\n–û–±–ª–∞—á–Ω–æ—Å—Ç—å: <–æ–ø–∏—Å–∞–Ω–∏–µ>\n–î–∞–≤–ª–µ–Ω–∏–µ: <hPa>\n–í–µ—Ç–µ—Ä: <–º/—Å> (<–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ>)\n\n<b>üåä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è</b>\n–°–µ–π—á–∞—Å: <¬∞C> ‚Äî –æ–ø—É—Å—Ç–∏, –µ—Å–ª–∏ None\n\n<b>üåø –ü—ã–ª—å—Ü–∞</b>\n–î–µ—Ä–µ–≤—å—è/–¢—Ä–∞–≤—ã/–°–æ—Ä–Ω—è–∫–∏: <0‚Äë5>/<0‚Äë5>/<0‚Äë5> ‚Äî –æ–ø—É—Å—Ç–∏, –µ—Å–ª–∏ None\n\n<b>üåå –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∏–∫–∞</b>\nKp‚Äë–∏–Ω–¥–µ–∫—Å: <—á–∏—Å–ª–æ> ‚Äî –æ–ø—É—Å—Ç–∏, –µ—Å–ª–∏ None\n\n<b>üìà –†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞</b>\n–ê–º–ø–ª–∏—Ç—É–¥–∞: <–∑–Ω–∞—á–µ–Ω–∏–µ> ‚Äî –æ–ø—É—Å—Ç–∏, –µ—Å–ª–∏ None\n\n<b>üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è</b>\n<—Å–æ–±—ã—Ç–∏–µ> ‚Äî –æ–ø—É—Å—Ç–∏, –µ—Å–ª–∏ None\n\n<b>‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</b>\n–ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞.\n\n–¢–æ–ª—å–∫–æ —Ç–µ–≥ <b>, –±–µ–∑ <html>/<body>, —Å–∏–º–≤–æ–ª \n = –ø–µ—Ä–µ–Ω–æ—Å"""

    prompt = "–°—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –∫—Ä–∞—Å–∏–≤–æ –ø–æ –¥–∞–Ω–Ω—ã–º:\n" + json.dumps(raw, ensure_ascii=False, indent=2)

    resp = client
