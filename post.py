#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
post.py
~~~~~~~~
–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ—Å—Ç-–¥–∞–π–¥–∂–µ—Å—Ç –≤ Telegram-–∫–∞–Ω–∞–ª.

–ù–æ–≤—ã–µ —Ñ–∏—á–∏
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ —Å—Ç—Ä–µ–ª–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –¥–∞–≤–ª–µ–Ω–∏—è (utils.pressure_trend)
‚Ä¢ ¬´—Å–≤–µ—Ç–æ—Ñ–æ—Ä¬ª K-index  (utils.kp_emoji)
‚Ä¢ –ø–æ–ª–Ω–æ-–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π AQI-–±–ª–æ–∫ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º (air.py)
‚Ä¢ –ø—ã–ª—å—Ü–∞ –∏–∑ Open-Meteo (pollen.py)
‚Ä¢ —Ç—Ä–µ–Ω–¥ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞ –®—É–º–∞–Ω–∞ (schumann.py)
‚Ä¢ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è (air.get_sst)
"""

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∏–º–ø–æ—Ä—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from __future__ import annotations
import os, asyncio, logging, requests
from typing import Dict, Tuple, Optional

import pendulum
from telegram import Bot, error as tg_err

from utils   import (
    compass, clouds_word, wind_phrase, safe, get_fact,
    WEATHER_ICONS, AIR_EMOJI, pressure_trend, kp_emoji
)
from weather import get_weather
from air     import get_air, get_sst, get_kp
from pollen  import get_pollen
from schumann import get_schumann, get_schumann_trend
from gpt     import gpt_blurb

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

TZ           = pendulum.timezone("Asia/Nicosia")
TODAY        = pendulum.now(TZ).date()
TOMORROW     = TODAY.add(days=1)
TOKEN        = os.environ["TELEGRAM_TOKEN"]
CHAT_ID      = int(os.environ["CHANNEL_ID"])
UNSPLASH_KEY = os.getenv("UNSPLASH_KEY")

# –æ–ø—Ä–æ—Å
POLL_QUESTION = "–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î"
POLL_OPTIONS  = ["üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏", "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
                 "üò¥ –°–ª–µ–≥–∫–∞ –≤—è–ª—ã–π(–∞—è)", "ü§í –í—Å—ë –ø–ª–æ—Ö–æ"]

# –≥–æ—Ä–æ–¥–∞ –ö–∏–ø—Ä–∞
CITIES: Dict[str, Tuple[float,float]] = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –º–∞–∫—Å/–º–∏–Ω Open-Meteo (1 –¥–∞—Ç–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def fetch_tomorrow_temps(lat: float, lon: float) -> Tuple[Optional[float], Optional[float]]:
    date = TOMORROW.to_date_string()
    url  = "https://api.open-meteo.com/v1/forecast"
    params = {
        "latitude":   lat,
        "longitude":  lon,
        "timezone":   "UTC",
        "daily":      "temperature_2m_max,temperature_2m_min",
        "start_date": date,
        "end_date":   date,
    }
    j = requests.get(url, params=params, timeout=15).json()
    d = j.get("daily", {})
    tmax = d.get("temperature_2m_max", [None])[0]
    tmin = d.get("temperature_2m_min", [None])[0]
    return tmax, tmin

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    P: list[str] = []

    # 1) —Å—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ 4 –≥–æ—Ä–æ–¥–∞–º
    day_vals, night_vals = [], []
    for la, lo in CITIES.values():
        d, n = fetch_tomorrow_temps(la, lo)
        if d is not None and n is not None:
            day_vals.append(d); night_vals.append(n)
    avg_day   = sum(day_vals)   / len(day_vals)
    avg_night = sum(night_vals) / len(night_vals)

    # –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –õ–∏–º–∞—Å—Å–æ–ª–∞
    lat, lon           = CITIES["Limassol"]
    day_max, night_min = fetch_tomorrow_temps(lat, lon)
    w                  = get_weather(lat, lon)
    if not w or day_max is None or night_min is None:
        raise RuntimeError("–ü–æ–≥–æ–¥–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

    cur        = w.get("current") or w["current_weather"]
    wind_kmh   = cur.get("windspeed") or cur.get("wind_speed", 0)
    wind_deg   = cur.get("winddirection") or cur.get("wind_deg", 0)
    press      = cur.get("pressure") or w["hourly"]["surface_pressure"][0]
    cloud_w    = clouds_word(cur.get("clouds") or w["hourly"]["cloud_cover"][0])
    trend      = pressure_trend(w)
    strong     = w.get("strong_wind", False)
    fog        = w.get("fog_alert" , False)

    icon = WEATHER_ICONS.get(cloud_w, "üå¶Ô∏è")
    P += [
        f"{icon} –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –ö–∏–ø—Ä–µ ({TOMORROW.format('DD.MM.YYYY')})",
        f"üå° –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø.: {avg_day:.0f} ¬∞C",
        f"üìà –¢–µ–º–ø. –¥–Ω—ë–º/–Ω–æ—á—å—é: {day_max:.1f} / {night_min:.1f} ¬∞C",
        f"üå§ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {cloud_w}",
        f"üí® –í–µ—Ç–µ—Ä: {wind_phrase(wind_kmh)} ({wind_kmh:.0f} –∫–º/—á, {compass(wind_deg)})",
        f"üîΩ –î–∞–≤–ª–µ–Ω–∏–µ: {press:.0f} –≥–ü–∞ {trend}",
    ]
    if strong: P.append("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞ >30 –∫–º/—á")
    if fog:    P.append("üåÅ –í–æ–∑–º–æ–∂–µ–Ω —Ç—É–º–∞–Ω ‚Äì –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ –Ω–∞ –¥–æ—Ä–æ–≥–µ")
    P.append("‚Äî‚Äî‚Äî")

    # 2) —Ä–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤
    temps = {c: fetch_tomorrow_temps(*coords) for c,coords in CITIES.items()}
    temps = {c:(d,n if n else d) for c,(d,n) in temps.items() if d}
    P.append("üéñÔ∏è –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å)")
    medals = ["ü•á","ü•à","ü•â","4Ô∏è‚É£"]
    for i,(c,(d,n)) in enumerate(sorted(temps.items(), key=lambda kv: kv[1][0], reverse=True)[:4]):
        P.append(f"{medals[i]} {c}: {d:.1f}/{n:.1f} ¬∞C")
    P.append("‚Äî‚Äî‚Äî")

    # 3) –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞
    air = get_air()
    pm   = lambda v: f"{v:.0f}" if v not in (None,"–Ω/–¥") else "–Ω/–¥"
    P.append("üèôÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞")
    P.append(f"{AIR_EMOJI[air['lvl']]} {air['lvl'].title()} (AQI {air['aqi']}) | "
             f"PM‚ÇÇ.‚ÇÖ: {pm(air['pm25'])} | PM‚ÇÅ‚ÇÄ: {pm(air['pm10'])}")
    # 4) –ø—ã–ª—å—Ü–∞
    pol = get_pollen()
    if pol:
        risk = pol["risk"]
        P.append(f"üåø –ü—ã–ª—å—Ü–∞ ‚Ä¢ —Ä–∏—Å–∫: <b>{risk}</b> "
                 f"(–¥–µ—Ä–µ–≤—å—è {pol['tree']} | —Ç—Ä–∞–≤—ã {pol['grass']} | —Å–æ—Ä–Ω—è–∫–∏ {pol['weed']})")
    P.append("‚Äî‚Äî‚Äî")

    # 5) –≥–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞
    kp_val, kp_state = get_kp()
    if kp_val is not None:
        P.append(f"{kp_emoji(kp_val)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ K‚Çö={kp_val:.1f} ‚Äì {kp_state}")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    # 6) –®—É–º–∞–Ω
    sch = get_schumann()
    if "freq" in sch:
        trend_s = get_schumann_trend() or "‚Üí"
        P.append(f"üéµ –®—É–º–∞–Ω: {sch['freq']:.2f} –ì—Ü {trend_s} "
                 f"(–∞–º–ø–ª. {sch['amp']:.1f})")
    else:
        P.append(f"üéµ –®—É–º–∞–Ω: {sch['msg']}")

    # 7) –º–æ—Ä–µ
    if (sst := get_sst()) is not None:
        P.append(f"üåä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è: {sst:.1f} ¬∞C")
    P.append("‚Äî‚Äî‚Äî")

    # 8) –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    astro = astro_events()
    if astro:
        P.append("üåå –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è ‚Äì " + " | ".join(astro))
        P.append("‚Äî‚Äî‚Äî")

    # 9) –≤—ã–≤–æ–¥ + —Å–æ–≤–µ—Ç—ã
    culprit = ("—Ç—É–º–∞–Ω" if fog else
               "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if kp_state=="–±—É—Ä—è" else
               "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ" if press < 1007 else
               "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä" if strong else
               "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç")
    summary, tips = gpt_blurb(culprit)
    P += [f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}", "‚Äî‚Äî‚Äî", "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>"]
    P += [f"‚Ä¢ {t}" for t in tips]
    P.append("‚Äî‚Äî‚Äî")

    # 10) —Ñ–∞–∫—Ç –¥–Ω—è
    P.append(f"üìö {get_fact(TOMORROW)}")

    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Telegram helper-—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_main_post(bot: Bot) -> None:
    html = build_msg()
    logging.info("Preview: %s", html.replace("\n", " | ")[:220])
    await bot.send_message(CHAT_ID, html, parse_mode="HTML",
                           disable_web_page_preview=True)

async def send_poll_if_friday(bot: Bot) -> None:
    if pendulum.now(TZ).weekday() == 4:
        await bot.send_poll(CHAT_ID, question=POLL_QUESTION,
                            options=POLL_OPTIONS,
                            is_anonymous=False)

async def fetch_unsplash_photo() -> Optional[str]:
    if not UNSPLASH_KEY:
        return None
    res = requests.get("https://api.unsplash.com/photos/random",
                       params={"query":"cyprus coast sunset",
                               "client_id":UNSPLASH_KEY},
                       timeout=15).json()
    return res.get("urls",{}).get("regular")

async def main() -> None:
    bot = Bot(token=TOKEN)
    await send_main_post(bot)
    await send_poll_if_friday(bot)
    if UNSPLASH_KEY and (TODAY.day % 3 == 0):
        if (url := await fetch_unsplash_photo()):
            await bot.send_photo(CHAT_ID, url, caption="–§–æ—Ç–æ –¥–Ω—è ‚Ä¢ Unsplash")
    logging.info("All tasks done ‚úì")

if __name__ == "__main__":
    asyncio.run(main())
