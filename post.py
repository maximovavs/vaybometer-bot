#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
post.py

1) build_msg() ‚Äì —Å–æ–±–∏—Ä–∞–µ—Ç HTML-–ø—Ä–æ–≥–Ω–æ–∑
2) main() ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç:
   ‚Ä¢ —Å–∞–º –ø—Ä–æ–≥–Ω–æ–∑
   ‚Ä¢ –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º ‚Äì –æ–ø—Ä–æ—Å
   ‚Ä¢ –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è ‚Äì —Ñ–æ—Ç–æ —Å Unsplash
"""

import os
import asyncio
import logging
import datetime as _dt
import pendulum
import requests

from telegram import Bot, error as tg_err

from utils import (
    compass, clouds_word, wind_phrase, safe,
    get_fact, WEATHER_ICONS, AIR_EMOJI
)
from weather import get_weather
from air import get_air, get_pollen, get_sst, get_kp
from schumann import get_schumann
from astro import astro_events
from gpt import gpt_blurb

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 0. CONST ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ           = pendulum.timezone("Asia/Nicosia")
TODAY        = pendulum.now(TZ).date()
TOMORROW     = TODAY + pendulum.duration(days=1)
TOKEN        = os.environ["TELEGRAM_TOKEN"]
CHAT         = os.environ["CHANNEL_ID"]
UNSPLASH_KEY = os.getenv("UNSPLASH_KEY")

# –æ–ø—Ä–æ—Å
POLL_QUESTION = "–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î"
POLL_OPTIONS  = ["üî• –≠–Ω–µ—Ä–≥–∏—è", "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üò¥ –í—è–ª—ã–π", "ü§í –ü–ª–æ—Ö–æ"]

# –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –≥–æ—Ä–æ–¥–æ–≤
CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}


def build_msg() -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç HTML-–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞."""
    # 1) –ü–æ–≥–æ–¥–∞ –¥–ª—è –õ–∏–º–∞—Å—Å–æ–ª–∞
    w = get_weather(*CITIES["Limassol"])
    if not w:
        raise RuntimeError("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    if "current" in w:
        cur       = w["current"]
        day_temp  = w["daily"][0]["temp"]
        wind_kmh  = cur["wind_speed"] * 3.6
        wind_deg  = cur["wind_deg"]
        press     = cur["pressure"]
        cloud     = clouds_word(cur.get("clouds", 0))
        day_max   = day_temp["max"]
        night_min = day_temp["min"]
    else:
        cw        = w["current_weather"]
        wind_kmh  = cw["windspeed"]
        wind_deg  = cw["winddirection"]
        press     = cw["pressure"]
        cloud     = clouds_word(w["hourly"]["cloud_cover"][0])
        blk       = w["daily"][0] if isinstance(w["daily"], list) else w["daily"]
        day_max   = blk["temperature_2m_max"][0]
        night_min = blk["temperature_2m_min"][0]

    strong = w.get("strong_wind", False)
    fog    = w.get("fog_alert",   False)

    # 2) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω—ë–º/–Ω–æ—á—å—é)
    temps = {}
    for city, (la, lo) in CITIES.items():
        w2 = get_weather(la, lo)
        if not w2:
            continue
        if "current" in w2:
            tmax = w2["daily"][0]["temp"]["max"]
            tmin = w2["daily"][0]["temp"]["min"]
        else:
            b2   = w2["daily"][0] if isinstance(w2["daily"], list) else w2["daily"]
            tmax = b2["temperature_2m_max"][0]
            tmin = b2["temperature_2m_min"][0]
        temps[city] = (tmax, tmin)

    warm = max(temps, key=lambda c: temps[c][0])
    cold = min(temps, key=lambda c: temps[c][1])

    # 3) –û—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏
    air    = get_air() or {}
    pollen = get_pollen()
    kp, kp_state = get_kp()
    sch    = get_schumann()
    sst    = get_sst()
    astro  = astro_events()

    # 4) –í–∏–Ω–æ–≤–Ω–∏–∫ + —Å–æ–≤–µ—Ç—ã
    if fog:
        culprit = "—Ç—É–º–∞–Ω"
    elif kp_state == "–±—É—Ä—è":
        culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"
    elif press < 1007:
        culprit = "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"
    elif strong:
        culprit = "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä"
    else:
        culprit = "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"
    summary, tips = gpt_blurb(culprit)

    icon = WEATHER_ICONS.get(cloud, "üå¶Ô∏è")

    # 5) –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    lines = [
        f"{icon} <b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ {TOMORROW.format('DD.MM.YYYY')}</b>",
        f"<b>–¢–µ–º–ø. (–¥–Ω/–Ω–æ—á—å):</b> {day_max:.1f}/{night_min:.1f} ¬∞C",
        f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {press:.0f} –≥–ü–∞",
        f"<b>–†–µ–π—Ç–∏–Ω–≥ (–¥–Ω/–Ω–æ—á—å):</b> {warm} {temps[warm][0]:.1f}/{temps[warm][1]:.1f} ¬∞C | "
        f"{cold} {temps[cold][0]:.1f}/{temps[cold][1]:.1f} ¬∞C",
        "‚Äî‚Äî‚Äî",
        f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {cloud}",
        f"<b>–í–µ—Ç–µ—Ä:</b> {wind_phrase(wind_kmh)} ({wind_kmh:.1f} –∫–º/—á, {compass(wind_deg)})",
        *(["‚ö†Ô∏è –í–µ—Ç–µ—Ä —É—Å–∏–ª–∏—Ç—Å—è"] if strong else []),
        *(["üåÅ –í–æ–∑–º–æ–∂–µ–Ω —Ç—É–º–∞–Ω"] if fog else []),
        "‚Äî‚Äî‚Äî",
        "üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>",
        f"{AIR_EMOJI.get(air.get('lvl'),'‚ö™')} AQI {air.get('aqi','‚Äî')} | "
        f"PM2.5: {safe(air.get('pm25'),' ¬µg/–º¬≥')} | PM10: {safe(air.get('pm10'),' ¬µg/–º¬≥')}",
    ]

    if pollen:
        idx = lambda v: ["–Ω–µ—Ç","–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω–Ω—ã–π","–≤—ã—Å–æ–∫–∏–π","–æ—á. –≤—ã—Å–æ–∫–∏–π","—ç–∫—Å—Ç—Ä–∏–º"][int(round(v))]
        lines += [
            "üåø <b>–ü—ã–ª—å—Ü–∞</b>",
            f"–î–µ—Ä–µ–≤—å—è ‚Äî {idx(pollen['treeIndex'])} | "
            f"–¢—Ä–∞–≤—ã ‚Äî {idx(pollen['grassIndex'])} | "
            f"–°–æ—Ä–Ω—è–∫–∏ ‚Äî {idx(pollen['weedIndex'])}",
        ]

    lines += [
        "‚Äî‚Äî‚Äî",
        "üß≤ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞</b>",
        f"Kp={kp:.1f} ({kp_state})" if kp is not None else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
    ]

    if sch.get("high"):
        lines += ["üéµ <b>–®—É–º–∞–Ω:</b> ‚ö°Ô∏è –≤–∏–±—Ä–∞—Ü–∏–∏ –ø–æ–≤—ã—à–µ–Ω—ã"]
    elif "freq" in sch:
        lines += [f"üéµ <b>–®—É–º–∞–Ω:</b> ‚âà{sch['freq']:.1f} –ì—Ü"]
    else:
        lines += [f"üéµ <b>–®—É–º–∞–Ω:</b> {sch.get('msg','‚Äî')}"]

    if sst is not None:
        lines += [f"üåä <b>–í–æ–¥–∞:</b> {sst:.1f} ¬∞C"]

    if astro:
        lines += ["üîÆ <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>", " | ".join(astro)]

    lines += [
        "‚Äî‚Äî‚Äî",
        f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}",
        "‚Äî‚Äî‚Äî",
        "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>",
        *[f"‚Ä¢ {t}" for t in tips],
        "‚Äî‚Äî‚Äî",
        f"üìö {get_fact(TOMORROW)}",
    ]

    return "\n".join(lines)


async def send_main(bot: Bot) -> None:
    msg = build_msg()
    logging.info("Preview: %s", msg.replace("\n"," | ")[:200])
    try:
        await bot.send_message(int(CHAT), msg,
                               parse_mode="HTML",
                               disable_web_page_preview=True)
    except tg_err.TelegramError as e:
        logging.error("Send error: %s", e)


async def send_friday_poll(bot: Bot) -> None:
    if pendulum.now(TZ).is_friday():
        try:
            await bot.send_poll(int(CHAT), POLL_QUESTION, POLL_OPTIONS,
                                is_anonymous=False,
                                allows_multiple_answers=False)
        except tg_err.TelegramError as e:
            logging.warning("Poll error: %s", e)


async def send_photo(bot: Bot) -> None:
    # —Ä–∞–∑ –≤ 3 –¥–Ω—è –ø–æ UTC
    if not UNSPLASH_KEY or _dt.datetime.utcnow().toordinal() % 3 != 0:
        return
    try:
        res = requests.get(
            "https://api.unsplash.com/photos/random",
            params={"query":"cyprus coast sunset","client_id":UNSPLASH_KEY},
            timeout=15
        ).json()
        url = res.get("urls",{}).get("regular")
        if url:
            await bot.send_photo(int(CHAT), photo=url,
                                 caption="–§–æ—Ç–æ –¥–Ω—è ‚Ä¢ Unsplash")
    except Exception as e:
        logging.warning("Photo error: %s", e)


async def main() -> None:
    bot = Bot(TOKEN)
    await send_main(bot)
    await send_friday_poll(bot)
    await send_photo(bot)
    logging.info("All done ‚úì")


if __name__ == "__main__":
    asyncio.run(main())
