#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post.py ‚Äî –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç VayboMeter-–±–æ—Ç–∞ –¥–ª—è –ö–∏–ø—Ä–∞.

‚Äì –ü—É–±–ª–∏–∫—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–µ—Ç–µ—Ä, –¥–∞–≤–ª–µ–Ω–∏–µ –∏ —Ç. –¥.)
‚Äì –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (—Ç–æ–ø-5 –ø–æ –¥–Ω–µ–≤–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ) —Å SST (—Ç–µ–º–ø. –º–æ—Ä—è) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
‚Äì –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ + –ø—ã–ª—å—Ü–∞
‚Äì –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ + –®—É–º–∞–Ω
‚Äì –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (VoC, —Ñ–∞–∑–∞ –õ—É–Ω—ã, —Å–æ–≤–µ—Ç—ã, next_event)
‚Äì –ö–æ—Ä–æ—Ç–∫–∏–π –≤—ã–≤–æ–¥ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π ¬´–í–∏–Ω–∏—Ç–µ ‚Ä¶¬ª)
‚Äì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (GPT-—Ñ–æ–ª–ª–±—ç–∫ –∏–ª–∏ health-coach) —Å —Ç–µ–º –∂–µ ¬´–≤–∏–Ω–æ–≤–Ω–∏–∫–æ–º¬ª
‚Äì –§–∞–∫—Ç –¥–Ω—è
"""

from __future__ import annotations
import os
import asyncio
import json
import logging
from pathlib import Path
from typing import Dict, Any, Tuple, List, Optional

import pendulum
from telegram import Bot, error as tg_err

from utils     import compass, clouds_word, get_fact, AIR_EMOJI, pm_color, kp_emoji
from weather   import get_weather, fetch_tomorrow_temps
from air       import get_air, get_sst, get_kp
from pollen    import get_pollen
from schumann  import get_schumann
from astro     import astro_events
from gpt       import gpt_blurb
from lunar     import get_day_lunar_info

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö–∏–ø—Ä–∞
TZ = pendulum.timezone("Asia/Nicosia")

# –°–µ–≥–æ–¥–Ω—è –∏ –ó–∞–≤—Ç—Ä–∞ (–≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ TZ)
TODAY    = pendulum.now(TZ).date()
TOMORROW = TODAY.add(days=1)

# Telegram-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
TOKEN   = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID = int(os.getenv("CHANNEL_ID", "0"))

if not TOKEN or CHAT_ID == 0:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏/–∏–ª–∏ CHANNEL_ID")
    exit(1)

# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ö–∏–ø—Ä–∞ –∏ –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–¥–æ–±–∞–≤–ª–µ–Ω–∞ Ayia Napa)
CITIES: Dict[str, Tuple[float, float]] = {
    "Nicosia":   (35.170, 33.360),
    "Larnaca":   (34.916, 33.624),
    "Limassol":  (34.707, 33.022),
    "Pafos":     (34.776, 32.424),
    "Troodos":   (34.916, 32.823),
    "Ayia Napa": (34.988, 34.012),
}

# –ü—Ä–∏–±—Ä–µ–∂–Ω—ã–µ –≥–æ—Ä–æ–¥–∞, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ–º —É—Å—Ä–µ–¥–Ω—è—Ç—å SST
COASTAL_CITIES = ["Larnaca", "Limassol", "Pafos", "Ayia Napa"]

# WMO-–∫–æ–¥—ã ‚Üí –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
WMO_DESC: Dict[int, str] = {
    0:  "‚òÄÔ∏è —è—Å–Ω–æ",
    1:  "‚õÖÔ∏è –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ",
    2:  "‚òÅÔ∏è –æ–±–ª–∞—á–Ω–æ",
    3:  "üå• –ø–∞—Å–º—É—Ä–Ω–æ",
    45: "üå´ —Ç—É–º–∞–Ω",
    48: "üå´ –∏–∑–º–æ—Ä–æ–∑—å",
    51: "üå¶ –º–æ—Ä–æ—Å—å",
    61: "üåß –¥–æ–∂–¥—å",
    71: "‚ùÑÔ∏è —Å–Ω–µ–≥",
    95: "‚õà –≥—Ä–æ–∑–∞",
}

def code_desc(code: int) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç WMO-–∫–æ–¥ –≤ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç.
    """
    return WMO_DESC.get(code, "‚Äî")

def pressure_arrow(hourly: Dict[str, Any]) -> str:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ —Å—É—Ç–æ–∫ (—Å–ø–∏—Å–æ–∫ hourly.surface_pressure).
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ¬´‚Üí¬ª.
    """
    pr = hourly.get("surface_pressure", [])
    if len(pr) < 2:
        return "‚Üí"
    delta = pr[-1] - pr[0]
    if delta > 1.0:
        return "‚Üë"
    if delta < -1.0:
        return "‚Üì"
    return "‚Üí"

def schumann_line(sch: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É ¬´–®—É–º–∞–Ω¬ª —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π —á–∞—Å—Ç–æ—Ç—ã –∏ —Ç—Ä–µ–Ω–¥–∞:
      ‚Äì üî¥ –µ—Å–ª–∏ freq < 7.6 –ì—Ü
      ‚Äì üü¢ –µ—Å–ª–∏ 7.6 ‚â§ freq ‚â§ 8.1
      ‚Äì üü£ –µ—Å–ª–∏ freq > 8.1
    –î–æ–±–∞–≤–ª—è–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É (amp) –∏ —Å—Ç—Ä–µ–ª–∫—É —Ç—Ä–µ–Ω–¥–∞ (trend).
    """
    if sch.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"
    f   = sch["freq"]
    amp = sch["amp"]
    if   f < 7.6:
        emoji = "üî¥"
    elif f > 8.1:
        emoji = "üü£"
    else:
        emoji = "üü¢"
    return f"{emoji} –®—É–º–∞–Ω: {f:.2f} –ì—Ü / {amp:.1f} pT {sch['trend']}"

def get_schumann_with_fallback() -> Dict[str, Any]:
    """
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ¬´–∂–∏–≤—ã–µ¬ª –¥–∞–Ω–Ω—ã–µ –∏–∑ get_schumann().
    –ï—Å–ª–∏ —Ç–∞–º freq == None, —á–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏–∑ schumann_hourly.json
    –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 24 —á–∞—Å–∞–º.
    """
    sch = get_schumann()
    if sch.get("freq") is not None:
        sch["cached"] = False
        return sch

    cache_path = Path(__file__).parent / "schumann_hourly.json"
    if cache_path.exists():
        try:
            arr = json.loads(cache_path.read_text(encoding="utf-8"))
            if arr:
                last = arr[-1]
                pts  = arr[-24:]
                freqs = [p["freq"] for p in pts if isinstance(p.get("freq"), (int, float))]
                if len(freqs) > 1:
                    avg   = sum(freqs[:-1]) / (len(freqs) - 1)
                    delta = freqs[-1] - avg
                    trend = "‚Üë" if delta >= 0.1 else "‚Üì" if delta <= -0.1 else "‚Üí"
                else:
                    trend = "‚Üí"
                return {
                    "freq":  round(last["freq"], 2),
                    "amp":   round(last["amp"], 1),
                    "trend": trend,
                    "cached": True,
                }
        except Exception as e:
            logging.warning("Schumann fallback parse error: %s", e)

    return sch

def build_msg() -> str:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø–æ—Å—Ç–∞¬ª –¥–ª—è Telegram:
      1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
      2) –£—Å—Ä–µ–¥–Ω—ë–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è (SST) –ø–æ –ø—Ä–∏–±—Ä–µ–∂–Ω—ã–º –≥–æ—Ä–æ–¥–∞–º
      3) –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è (SST) –≤ Limassol (–æ—Ç–¥–µ–ª—å–Ω–æ)
      4) –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è Limassol (avg temp, –æ–±–ª–∞–∫–∞, –≤–µ—Ç–µ—Ä, –¥–∞–≤–ª–µ–Ω–∏–µ)
      5) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (—Ç–æ–ø-5 –ø–æ –¥–Ω–µ–≤–Ω—ã–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º) —Å SST –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
      6) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ + –ü—ã–ª—å—Ü–∞
      7) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ + –®—É–º–∞–Ω
      8) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (VoC, —Ñ–∞–∑–∞ –õ—É–Ω—ã, —Å–æ–≤–µ—Ç—ã, next_event)
      9) –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π ¬´–í—ã–≤–æ–¥¬ª: ¬´–í–∏–Ω–∏—Ç–µ ...¬ª
     10) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (GPT-—Ñ–æ–ª–ª–±—ç–∫ –∏–ª–∏ health-coach) —Å —Ç–µ–º –∂–µ ¬´–≤–∏–Ω–æ–≤–Ω–∏–∫–æ–º¬ª
     11) –§–∞–∫—Ç –¥–Ω—è
    –ö–∞–∂–¥—ã–π –∫—Ä—É–ø–Ω—ã–π –±–ª–æ–∫ —Ä–∞–∑–¥–µ–ª—ë–Ω —Å—Ç—Ä–æ–∫–æ–π ¬´‚Äî‚Äî‚Äî¬ª –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.
    """
    P: List[str] = []

    # 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
    P.append(f"<b>üåÖ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({TOMORROW.format('DD.MM.YYYY')})</b>")

    # 2) –£—Å—Ä–µ–¥–Ω—ë–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è (SST) –ø–æ –ø—Ä–∏–±—Ä–µ–∂–Ω—ã–º –≥–æ—Ä–æ–¥–∞–º
    sst_values: List[float] = []
    for ct in COASTAL_CITIES:
        lat_ct, lon_ct = CITIES[ct]
        tmp = get_sst(lat_ct, lon_ct)
        if tmp is not None:
            sst_values.append(tmp)
    if sst_values:
        avg_sst = sum(sst_values) / len(sst_values)
        P.append(f"üåä –°—Ä. —Ç–µ–º–ø. –º–æ—Ä—è (Larnaca, Limassol, Pafos, Ayia Napa): {avg_sst:.1f} ¬∞C")
    else:
        P.append("üåä –°—Ä. —Ç–µ–º–ø. –º–æ—Ä—è (Larnaca, Limassol, Pafos, Ayia Napa): –Ω/–¥")

    # 3) –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è (SST) –≤ Limassol (–æ—Ç–¥–µ–ª—å–Ω–æ)
    lat_lims, lon_lims = CITIES["Limassol"]
    sst_lims = get_sst(lat_lims, lon_lims)
    if sst_lims is not None:
        P.append(f"üåä –¢–µ–º–ø. –º–æ—Ä—è (Limassol): {sst_lims:.1f} ¬∞C")
    else:
        P.append("üåä –¢–µ–º–ø. –º–æ—Ä—è (Limassol): –Ω/–¥")

    # 4) –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è Limassol
    day_max, night_min = fetch_tomorrow_temps(lat_lims, lon_lims, tz=TZ.name)
    w = get_weather(lat_lims, lon_lims) or {}
    cur = w.get("current", {}) or {}

    if day_max is not None and night_min is not None:
        avg_temp = (day_max + night_min) / 2
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç fetch_tomorrow_temps, fallback –Ω–∞ cur["temperature"]
        avg_temp = cur.get("temperature", 0.0)

    wind_kmh = cur.get("windspeed", 0.0)
    wind_deg = cur.get("winddirection", 0.0)
    press    = cur.get("pressure", 1013)
    clouds   = cur.get("clouds", 0)

    arrow = pressure_arrow(w.get("hourly", {}))

    P.append(
        f"üå°Ô∏è –°—Ä. —Ç–µ–º–ø: {avg_temp:.0f} ¬∞C ‚Ä¢ {clouds_word(clouds)} "
        f"‚Ä¢ üí® {wind_kmh:.1f} –∫–º/—á ({compass(wind_deg)}) "
        f"‚Ä¢ üíß {press:.0f} –≥–ü–∞ {arrow}"
    )
    P.append("‚Äî‚Äî‚Äî")

    # 5) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (—Ç–æ–ø-5 –ø–æ –¥–Ω–µ–≤–Ω—ã–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º) —Å SST –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
    temps: Dict[str, Tuple[float, float, int, Optional[float]]] = {}
    for city, (la, lo) in CITIES.items():
        d, n = fetch_tomorrow_temps(la, lo, tz=TZ.name)
        if d is None:
            continue

        wcod = get_weather(la, lo) or {}
        daily_codes = wcod.get("daily", {}).get("weathercode", [])
        code_tmr: int = daily_codes[1] if (isinstance(daily_codes, list) and len(daily_codes) > 1) else 0

        # –î–æ–±–∞–≤–ª—è–µ–º SST (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        sst_city: Optional[float] = get_sst(la, lo)
        temps[city] = (d, n if n is not None else d, code_tmr, sst_city)

    if temps:
        P.append("üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å ¬∞C, –ø–æ–≥–æ–¥–∞, üåä SST)</b>")
        medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
        sorted_cities = sorted(temps.items(), key=lambda kv: kv[1][0], reverse=True)[:5]
        for i, (city, (d, n, code, sst_city)) in enumerate(sorted_cities):
            desc = code_desc(code)
            if sst_city is not None:
                P.append(f"{medals[i]} {city}: {d:.1f}/{n:.1f} ¬∞C, {desc}, üåä {sst_city:.1f} ¬∞C")
            else:
                P.append(f"{medals[i]} {city}: {d:.1f}/{n:.1f} ¬∞C, {desc}")
        P.append("‚Äî‚Äî‚Äî")

    # 6) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ + –ü—ã–ª—å—Ü–∞
    air = get_air() or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append("üè≠ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(
        f"{AIR_EMOJI.get(lvl, '‚ö™')} {lvl} (AQI {air.get('aqi', '–Ω/–¥')}) | "
        f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}"
    )
    if (pollen := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(
            f"–î–µ—Ä–µ–≤—å—è: {pollen['tree']} | –¢—Ä–∞–≤—ã: {pollen['grass']} | "
            f"–°–æ—Ä–Ω—è–∫–∏: {pollen['weed']} ‚Äî —Ä–∏—Å–∫ {pollen['risk']}"
        )
    P.append("‚Äî‚Äî‚Äî")

    # 7) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ + –®—É–º–∞–Ω
    kp, kp_state = get_kp()
    if kp is not None:
        P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({kp_state})")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")

    P.append(schumann_line(get_schumann_with_fallback()))
    P.append("‚Äî‚Äî‚Äî")

    # 8) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>")
    astro_lines: List[str] = astro_events(offset_days=1, show_all_voc=True)
    if astro_lines:
        P.extend(astro_lines)
    else:
        P.append("‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî")
    P.append("‚Äî‚Äî‚Äî")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 9) –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π ¬´–í—ã–≤–æ–¥¬ª (¬´–í–∏–Ω–∏—Ç–µ ‚Ä¶¬ª)
    #
    #  –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ ¬´–≤–∏–Ω–æ–≤–Ω–∏–∫–∞¬ª:
    #   1) –ï—Å–ª–∏ Kp ‚â• 5 (¬´–±—É—Ä—è¬ª) ‚Üí ¬´–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏¬ª
    #   2) –ò–Ω–∞—á–µ, –µ—Å–ª–∏ t_max ‚â• 30 ‚Üí ¬´–∂–∞—Ä—É¬ª
    #   3) –ò–Ω–∞—á–µ, –µ—Å–ª–∏ t_min ‚â§ 5 ‚Üí ¬´—Ä–µ–∑–∫–æ–µ –ø–æ—Ö–æ–ª–æ–¥–∞–Ω–∏–µ¬ª
    #   4) –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ WMO-–∫–æ–¥ –≤ {95, 71, 48} ‚Üí ¬´–≥—Ä–æ–∑–∞¬ª / ¬´—Å–Ω–µ–≥¬ª / ¬´–∏–∑–º–æ—Ä–æ–∑—å¬ª
    #   5) –ò–Ω–∞—á–µ ‚Üí ¬´–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä¬ª
    #
    #   –ü—Ä–∏ –≤—ã–±–æ—Ä–µ ¬´–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞¬ª –±–µ—Ä—ë–º –∏–∑ astro_lines –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É,
    #   —Å–æ–¥–µ—Ä–∂–∞—â—É—é ¬´–Ω–æ–≤–æ–ª—É–Ω–∏–µ¬ª, ¬´–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ¬ª –∏–ª–∏ ¬´—á–µ—Ç–≤–µ—Ä—Ç—å¬ª. 
    #   –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–∏–¥—É ¬´—Ñ–∞–∑—É –ª—É–Ω—ã ‚Äî {PhaseName, Sign}¬ª.
    culprit_text: str

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–º–∞–≥–Ω–∏—Ç–∫—É
    if kp is not None and kp_state.lower() == "–±—É—Ä—è":
        culprit_text = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"
    else:
        # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –∂–∞—Ä—É
        if day_max is not None and day_max >= 30:
            culprit_text = "–∂–∞—Ä—É"
        # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–∫–æ–µ –ø–æ—Ö–æ–ª–æ–¥–∞–Ω–∏–µ
        elif night_min is not None and night_min <= 5:
            culprit_text = "—Ä–µ–∑–∫–æ–µ –ø–æ—Ö–æ–ª–æ–¥–∞–Ω–∏–µ"
        else:
            # 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∞—Å–Ω—ã–π WMO-–∫–æ–¥
            daily_codes_main = w.get("daily", {}).get("weathercode", [])
            tomorrow_code = (
                daily_codes_main[1] 
                if isinstance(daily_codes_main, list) and len(daily_codes_main) > 1 
                else None
            )
            if tomorrow_code == 95:
                culprit_text = "–≥—Ä–æ–∑–∞"
            elif tomorrow_code == 71:
                culprit_text = "—Å–Ω–µ–≥"
            elif tomorrow_code == 48:
                culprit_text = "–∏–∑–º–æ—Ä–æ–∑—å"
            else:
                # 5) –ë–ª–æ–∫ ¬´–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä¬ª
                culprit_text = None
                for line in astro_lines:
                    low = line.lower()
                    if "–Ω–æ–≤–æ–ª—É–Ω–∏–µ" in low or "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ" in low or "—á–µ—Ç–≤–µ—Ä—Ç—å" in low:
                        clean = line
                        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∂–∏ –õ—É–Ω—ã
                        for ch in ("üåë", "üåï", "üåì", "üåí", "üåô"):
                            clean = clean.replace(ch, "")
                        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç ¬´(...)¬ª
                        clean = clean.split("(")[0].strip()
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ
                        clean = clean.replace(" ,", ",").strip()
                        # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
                        clean = clean[0].upper() + clean[1:]
                        culprit_text = f"—Ñ–∞–∑—É –ª—É–Ω—ã ‚Äî {clean}"
                        break
                if not culprit_text:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ñ–∞–∑—É ‚Üí –æ–±—â–∏–π ¬´–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã¬ª
                    culprit_text = "–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"

    # 9) –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ ¬´–í—ã–≤–æ–¥¬ª
    P.append("üìú <b>–í—ã–≤–æ–¥</b>")
    P.append(f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit_text}! üòâ")
    P.append("‚Äî‚Äî‚Äî")

    # 10) –ë–ª–æ–∫ ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª (GPT-—Ñ–æ–ª–ª–±—ç–∫ –∏–ª–∏ health-coach)
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    summary, tips = gpt_blurb(culprit_text)
    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∏ —Å–æ–≤–µ—Ç–∞ (tips), –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã ¬´–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ‚Ä¶¬ª
    for advice in tips[:3]:
        P.append(f"‚Ä¢ {advice.strip()}")
    P.append("‚Äî‚Äî‚Äî")

    # 11) –§–∞–∫—Ç –¥–Ω—è
    P.append(f"üìö {get_fact(TOMORROW)}")

    return "\n".join(P)


async def send_main_post(bot: Bot) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
    """
    html = build_msg()
    logging.info("Preview: %s", html.replace("\n", " | ")[:200])
    try:
        await bot.send_message(
            chat_id=CHAT_ID,
            text=html,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise


async def send_poll_if_friday(bot: Bot) -> None:
    """
    –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å.
    """
    if pendulum.now(TZ).weekday() == 4:
        try:
            await bot.send_poll(
                chat_id=CHAT_ID,
                question="–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î",
                options=[
                    "üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏",
                    "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
                    "üò¥ –°–ª–µ–≥–∫–∞ –≤—è–ª—ã–π(–∞—è)",
                    "ü§í –í—Å—ë –ø–ª–æ—Ö–æ"
                ],
                is_anonymous=False,
                allows_multiple_answers=False
            )
        except tg_err.TelegramError as e:
            logging.warning("Poll send error: %s", e)


async def main() -> None:
    bot = Bot(token=TOKEN)
    await send_main_post(bot)
    await send_poll_if_friday(bot)


if __name__ == "__main__":
    asyncio.run(main())