#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import asyncio
import logging
import random
import pendulum

from telegram import Bot, error as tg_err

# —É—Ç–∏–ª–∏—Ç—ã
from utils import compass, clouds_word, wind_phrase, safe, get_fact
# –∏—Å—Ç–æ—á–Ω–∏–∫–∏
from weather import get_weather
from air import get_air, get_pollen, get_sst, get_kp
from schumann import get_schumann
from astro import astro_events
from gpt import gpt_blurb

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 0.  CONST ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ       = pendulum.timezone("Asia/Nicosia")
TODAY    = pendulum.now(TZ).date()
TOMORROW = TODAY.add(days=1)
TOKEN    = os.environ["TELEGRAM_TOKEN"]
CHAT     = os.environ["CHANNEL_ID"]

CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}

WEATHER_ICONS = {
    "—è—Å–Ω–æ":       "‚òÄÔ∏è",
    "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è": "üå§Ô∏è",
    "–ø–∞—Å–º—É—Ä–Ω–æ":   "‚òÅÔ∏è",
    "–¥–æ–∂–¥—å":      "üåßÔ∏è",
    "—Ç—É–º–∞–Ω":      "üåÅ",
}

AIR_EMOJI = {
    "—Ö–æ—Ä–æ—à–∏–π":                     "üü¢",
    "—É–º–µ—Ä–µ–Ω–Ω—ã–π":                   "üü°",
    "–≤—Ä–µ–¥–Ω—ã–π –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö":  "üü†",
    "–≤—Ä–µ–¥–Ω—ã–π":                     "üî¥",
    "–æ—á. –≤—Ä–µ–¥–Ω—ã–π":                 "üü£",
    "–æ–ø–∞—Å–Ω—ã–π":                     "‚ö´",
    "–Ω/–¥":                         "‚ö™",
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 6.  BUILD MESSAGE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    # 1Ô∏è‚É£ –ü–æ–≥–æ–¥–∞
    lat, lon = CITIES["Limassol"]
    w = get_weather(lat, lon)
    if not w:
        raise RuntimeError("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    if "current" in w:
        # OpenWeather
        cur       = w["current"]
        day_block = w["daily"][0]["temp"]
        wind_kmh  = cur["wind_speed"] * 3.6
        wind_deg  = cur["wind_deg"]
        wcode     = cur.get("weather",[{"id":0}])[0]["id"]
        press     = cur.get("pressure")
        cloud_w   = clouds_word(cur.get("clouds",0))
        day_max   = day_block["max"]
        night_min = day_block["min"]
        strong    = w.get("strong_wind", False)
        fog       = w.get("fog_alert", False)
    else:
        # Open-Meteo
        cw        = w["current_weather"]
        wind_kmh  = cw["windspeed"]
        wind_deg  = cw["winddirection"]
        press     = cw.get("pressure")
        cloud_w   = clouds_word(w["hourly"]["cloud_cover"][0])
        strong    = w.get("strong_wind", False)
        fog       = w.get("fog_alert", False)

        # –∑–∞–≤—Ç—Ä–∞—à–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/–∫–æ–¥ –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        daily = w["daily"]
        blk   = daily[0] if isinstance(daily,list) else daily
        tm, tn, codes = blk["temperature_2m_max"], blk["temperature_2m_min"], blk["weathercode"]
        day_max   = tm[1] if len(tm)>1 else tm[0]
        night_min = tn[1] if len(tn)>1 else tn[0]
        wcode     = codes[1] if len(codes)>1 else codes[0]

    # 2Ô∏è‚É£ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ª–∏–¥–µ—Ä—ã
    temps = {}
    for city,(la,lo) in CITIES.items():
        w2 = get_weather(la, lo)
        if not w2: continue
        if "current" in w2:
            temps[city] = w2["daily"][0]["temp"]["max"]
        else:
            db = w2["daily"]
            blk = db[0] if isinstance(db,list) else db
            arr = blk["temperature_2m_max"]
            temps[city] = arr[1] if len(arr)>1 else arr[0]
    warm = max(temps, key=temps.get)
    cold = min(temps, key=temps.get)

    # 3Ô∏è‚É£ –ü—Ä–æ—á–∏–µ –±–ª–æ–∫–∏
    air    = get_air() or {}
    kp_val, kp_state = get_kp()
    sst    = get_sst()
    pollen = get_pollen()
    sch    = get_schumann()
    astro  = astro_events()

    # 4Ô∏è‚É£ –í–∏–Ω–æ–≤–Ω–∏–∫
    if fog:
        culprit = "—Ç—É–º–∞–Ω"
    elif kp_state == "–±—É—Ä—è":
        culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"
    elif press is not None and press < 1007:
        culprit = "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"
    elif strong:
        culprit = "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä"
    else:
        culprit = "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"
    summary, tips = gpt_blurb(culprit)

    icon = WEATHER_ICONS.get(cloud_w, "üå¶Ô∏è")

    # 5Ô∏è‚É£ –°–±–æ—Ä–∫–∞ HTML
    P = [
        f"{icon} <b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ {TOMORROW.format('DD.MM.YYYY')}</b>",
        f"<b>–¢–µ–º–ø. –¥–Ω—ë–º:</b> –¥–æ {day_max:.1f} ¬∞C",
        f"<b>–¢–µ–º–ø. –Ω–æ—á—å—é:</b> –æ–∫–æ–ª–æ {night_min:.1f} ¬∞C",
        f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {cloud_w}",
        f"<b>–í–µ—Ç–µ—Ä:</b> {wind_phrase(wind_kmh)} ({wind_kmh:.1f} –∫–º/—á, {compass(wind_deg)})",
        *(["‚ö†Ô∏è –í–µ—Ç–µ—Ä –º–æ–∂–µ—Ç —É—Å–∏–ª–∏—Ç—å—Å—è"] if strong else []),
        *(["üåÅ –í–æ–∑–º–æ–∂–µ–Ω —Ç—É–º–∞–Ω, –≤–æ–¥–∏—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ"] if fog else []),
        f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {press:.0f} –≥–ü–∞" if press is not None else "<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> ‚Äî",
        f"<i>–°–∞–º—ã–π —Ç—ë–ø–ª—ã–π –≥–æ—Ä–æ–¥:</i> {warm} ({temps[warm]:.1f} ¬∞C)",
        f"<i>–°–∞–º—ã–π –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –≥–æ—Ä–æ–¥:</i> {cold} ({temps[cold]:.1f} ¬∞C)",
        "‚Äî‚Äî‚Äî",
        "üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>",
        f"{AIR_EMOJI.get(air.get('lvl','–Ω/–¥'))} "
        f"AQI {air.get('aqi','‚Äî')} | PM2.5: {safe(air.get('pm25'),' ¬µg/–º¬≥')} | PM10: {safe(air.get('pm10'),' ¬µg/–º¬≥')}",
    ]

    if pollen:
        idx = lambda v: ["–Ω–µ—Ç","–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω–Ω—ã–π","–≤—ã—Å–æ–∫–∏–π","–æ—á. –≤—ã—Å–æ–∫–∏–π","—ç–∫—Å—Ç—Ä–∏–º"][int(round(v))]
        P += [
            "üåø <b>–ü—ã–ª—å—Ü–∞</b>",
            f"–î–µ—Ä–µ–≤—å—è ‚Äî {idx(pollen['treeIndex'])} | "
            f"–¢—Ä–∞–≤—ã ‚Äî {idx(pollen['grassIndex'])} | "
            f"–°–æ—Ä–Ω—è–∫–∏ ‚Äî {idx(pollen['weedIndex'])}",
        ]

    P += [
        "üß≤ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>",
        f"K-index: {kp_val:.1f} ({kp_state})" if kp_val is not None else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
    ]

    if sch.get("high"):
        P += ["üéµ <b>–®—É–º–∞–Ω:</b> ‚ö°Ô∏è –≤–∏–±—Ä–∞—Ü–∏–∏ –ø–æ–≤—ã—à–µ–Ω—ã (>8 –ì—Ü)"]
    elif "freq" in sch:
        P += [f"üéµ <b>–®—É–º–∞–Ω:</b> ‚âà{sch['freq']:.1f} –ì—Ü, –∞–º–ø–ª–∏—Ç—É–¥–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞"]
    else:
        P += [f"üéµ <b>–®—É–º–∞–Ω:</b> {sch.get('msg','–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"]

    if sst is not None:
        P += [f"üåä <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã</b>\n–°–µ–π—á–∞—Å: {sst:.1f} ¬∞C"]

    if astro:
        P += ["üåå <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n" + " | ".join(astro)]

    P += [
        "‚Äî‚Äî‚Äî",
        f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}",
        "‚Äî‚Äî‚Äî",
        "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>",
        *[f"‚Ä¢ {t}" for t in tips],
        "‚Äî‚Äî‚Äî",
        f"üìö {get_fact(TOMORROW)}",
    ]

    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 7.  SEND ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    bot  = Bot(TOKEN)
    html = build_msg()
    logging.info("Preview: %s", html.replace("\n"," | ")[:200])
    try:
        await bot.send_message(int(CHAT), html,
                               parse_mode="HTML",
                               disable_web_page_preview=True)
        logging.info("Message sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise

if __name__ == "__main__":
    asyncio.run(main())
