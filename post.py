#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post.py ‚Äî –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç VayboMeter-–±–æ—Ç–∞.

‚Äì –ü–æ–≥–æ–¥–∞, —Ä–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤, –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞, –ø—ã–ª—å—Ü–∞, –≥–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞, –®—É–º–∞–Ω
‚Äì –ö–æ—Ä–æ—Ç–∫–∏–π –∞—Å—Ç—Ä–æ–±–ª–æ–∫: —Ñ–∞–∑–∞ –õ—É–Ω—ã, 3 —Å–æ–≤–µ—Ç–∞, VoC
‚Äì –í—ã–≤–æ–¥: ‚Äú–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ –ø–æ–≥–æ–¥—É!‚Äù
‚Äì –¢—Ä–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ GPT (–∏–ª–∏ —Ñ–æ–ª–±–µ–∫)
"""

from __future__ import annotations
import os
import asyncio
import json
import logging
from pathlib import Path
from typing import Dict, Any, Optional, Tuple

import requests
import pendulum
from requests.exceptions import RequestException
from telegram import Bot, error as tg_err

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –£—Ç–∏–ª–∏—Ç—ã –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ (–≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ —É–∂–µ –µ—Å—Ç—å —ç—Ç–∏ —Ñ–∞–π–ª—ã)
from utils     import compass, clouds_word, get_fact, AIR_EMOJI, pm_color, kp_emoji
from weather   import get_weather, fetch_tomorrow_temps       # fetch_tomorrow_temps ‚Äì –¥–ª—è Open-Meteo
from air       import get_air, get_sst, get_kp
from pollen    import get_pollen
from schumann  import get_schumann
from astro     import astro_events
from gpt       import gpt_blurb
from lunar     import get_day_lunar_info

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ       = pendulum.timezone("Asia/Nicosia")
TODAY    = pendulum.now(TZ).date()
TOMORROW = TODAY.add(days=1)

TOKEN   = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID = int(os.getenv("CHANNEL_ID", 0))

# 5 –≥–æ—Ä–æ–¥–æ–≤ (—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º ¬´Troodos¬ª)
CITIES = {
    "Nicosia":  (35.170, 33.360),
    "Larnaca":  (34.916, 33.624),
    "Limassol": (34.707, 33.022),
    "Pafos":    (34.776, 32.424),
    "Troodos":  (34.916, 32.823),
}

# WMO-–∫–æ–¥—ã ‚Üí —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã
WMO_DESC: Dict[int, str] = {
    0:  "—è—Å–Ω–æ",           1:  "–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ",   2:  "–æ–±–ª–∞—á–Ω–æ",      3:  "–ø–∞—Å–º—É—Ä–Ω–æ",
    45: "—Ç—É–º–∞–Ω",          48: "–∏–∑–º–æ—Ä–æ–∑—å",      51: "–º–æ—Ä–æ—Å—å",      61:  "–¥–æ–∂–¥—å",
    71: "—Å–Ω–µ–≥",           95: "–≥—Ä–æ–∑–∞",
    # ‚Ä¶–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã
}
def code_desc(code: int) -> str:
    return WMO_DESC.get(code, "‚Äî")

def pressure_arrow(hourly: Dict[str, Any]) -> str:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å—É—Ç–æ–∫ (Open-Meteo hourly).
    –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ‚Äú‚Üí‚Äù.
    """
    pr = hourly.get("surface_pressure", [])
    if len(pr) < 2:
        return "‚Üí"
    delta = pr[-1] - pr[0]
    if delta > 1.0:
        return "‚Üë"
    if delta < -1.0:
        return "‚Üì"
    return "‚Üí"


def schumann_line(sch: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –®—É–º–∞–Ω–∞:
      ‚Äì –Ω–∏–∑–∫–∏–µ (<7.6 –ì—Ü) ‚Üí üî¥
      ‚Äì –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ (7.6‚Äì8.1) ‚Üí üü¢
      ‚Äì –≤—ã—Å–æ–∫–∏–µ (>8.1) ‚Üí üü£
    –¢—Ä–µ–Ω–¥ –æ—Ç sch["trend"], ‚Äúcached‚Äù ‚Äì –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º.
    """
    if sch.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"
    f   = sch["freq"]
    amp = sch["amp"]
    if   f < 7.6:     emoji = "üî¥"
    elif f > 8.1:     emoji = "üü£"
    else:             emoji = "üü¢"
    return f"{emoji} –®—É–º–∞–Ω: {f:.2f} –ì—Ü / {amp:.1f} pT {sch['trend']}"


def get_schumann_with_fallback() -> Dict[str, Any]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ Schumann.
    –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –±–µ—Ä—ë–º –∏–∑ cache (schumann_hourly.json) –∏ —Å—á–∏—Ç–∞–µ–º —Ç—Ä–µ–Ω–¥.
    """
    sch = get_schumann()
    if sch.get("freq") is not None:
        sch["cached"] = False
        return sch

    cache_path = Path(__file__).parent / "schumann_hourly.json"
    if cache_path.exists():
        try:
            arr = json.loads(cache_path.read_text(encoding="utf-8"))
            if arr:
                last = arr[-1]
                pts  = arr[-24:]
                freqs = [p["freq"] for p in pts if "freq" in p]
                if len(freqs) > 1:
                    avg   = sum(freqs[:-1]) / (len(freqs) - 1)
                    delta = freqs[-1] - avg
                    trend = "‚Üë" if delta >= 0.1 else "‚Üì" if delta <= -0.1 else "‚Üí"
                else:
                    trend = "‚Üí"
                return {
                    "freq":  round(last["freq"], 2),
                    "amp":   round(last["amp"], 1),
                    "trend": trend,
                    "cached": True,
                }
        except Exception as e:
            logging.warning("Schumann fallback parse error: %s", e)

    return sch


def build_msg() -> str:
    """
    –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram:
    1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
    2) –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è
    3) –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è Limassol (—Å—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –æ–±–ª–∞—á–Ω–æ—Å—Ç—å, –≤–µ—Ç–µ—Ä, –¥–∞–≤–ª–µ–Ω–∏–µ)
    4) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (5 —Å–∞–º—ã—Ö —Ç–µ–ø–ª—ã—Ö –ø–æ –¥–Ω—é), —Å WMO
    5) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ + –ø—ã–ª—å—Ü–∞
    6) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ + –®—É–º–∞–Ω
    7) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è: VoC, —Ñ–∞–∑–∞ + —Å–æ–≤–µ—Ç—ã, next_event
    8) –í—ã–≤–æ–¥ ‚Äú–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ –ø–æ–≥–æ–¥—É!‚Äù
    9) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (3 —Å–æ–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT / —Ñ–æ–ª–±–µ–∫)
    10) –§–∞–∫—Ç –¥–Ω—è (get_fact)
    """
    P: list[str] = []

    # 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
    P.append(f"<b>üåÖ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({TOMORROW.format('DD.MM.YYYY')})</b>")

    # 2) –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è (SST)
    if (sst := get_sst()) is not None:
        P.append(f"üåä –¢–µ–º–ø. –º–æ—Ä—è: {sst:.1f} ¬∞C")

    # 3) –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è Limassol
    lat, lon = CITIES["Limassol"]
    day_max, night_min = fetch_tomorrow_temps(lat, lon, tz=TZ.name)
    w = get_weather(lat, lon) or {}
    cur = w.get("current", {}) or {}

    # –ï—Å–ª–∏ –Ω–µ—Ç day_max/night_min, –±–µ—Ä—ë–º ‚Äúcur[temperature]‚Äù (—Ö–æ—Ç—è –∏–Ω–æ–≥–¥–∞ cur —Ç–æ–∂–µ –ø—É—Å—Ç–æ)
    avg_temp = ((day_max + night_min) / 2) if (day_max is not None and night_min is not None) else cur.get("temperature", 0.0)
    wind_kmh  = cur.get("windspeed", 0.0)
    wind_deg  = cur.get("winddirection", 0.0)
    press     = cur.get("pressure", 1013)
    clouds    = cur.get("clouds", 0)

    arrow = pressure_arrow(w.get("hourly", {}))
    P.append(
        f"üå°Ô∏è –°—Ä. —Ç–µ–º–ø: {avg_temp:.0f} ¬∞C ‚Ä¢ {clouds_word(clouds)} "
        f"‚Ä¢ üí® {wind_kmh:.1f} –∫–º/—á ({compass(wind_deg)}) "
        f"‚Ä¢ üíß {press:.0f} –≥–ü–∞ {arrow}"
    )
    P.append("‚Äî‚Äî‚Äî")

    # 4) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–µ–Ω—å/–Ω–æ—á—å/–ø–æ–≥–æ–¥–∞ –ø–æ WMO)
    temps: Dict[str, Tuple[float, float, int]] = {}
    for city, (la, lo) in CITIES.items():
        d, n = fetch_tomorrow_temps(la, lo, tz=TZ.name)
        if d is None:
            # –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äì –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–æ—Ä–æ–¥
            continue

        wcod = get_weather(la, lo) or {}
        code_tmr = None
        if "daily" in wcod and isinstance(wcod["daily"].get("weathercode", []), list) and len(wcod["daily"]["weathercode"]) > 1:
            code_tmr = wcod["daily"]["weathercode"][1]
        code_tmr = code_tmr or 0

        temps[city] = (d, n if n is not None else d, code_tmr)

    if temps:
        P.append("üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å, –ø–æ–≥–æ–¥–∞)</b>")
        medals = ["ü•á","ü•à","ü•â","4Ô∏è‚É£","5Ô∏è‚É£"]
        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π –¥–Ω–µ–≤–Ω–æ–π (d), –±–µ—Ä—ë–º —Ç–æ–ø-5
        sorted_cities = sorted(temps.items(), key=lambda kv: kv[1][0], reverse=True)[:5]
        for i, (city, (d, n, code)) in enumerate(sorted_cities):
            desc = code_desc(code)
            P.append(f"{medals[i]} {city}: {d:.1f}/{n:.1f} ¬∞C, {desc}")
        P.append("‚Äî‚Äî‚Äî")

    # 5) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –∏ –ø—ã–ª—å—Ü–∞
    air = get_air() or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}")
    if (pollen := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(f"–î–µ—Ä–µ–≤—å—è: {pollen['tree']} | –¢—Ä–∞–≤—ã: {pollen['grass']} | –°–æ—Ä–Ω—è–∫–∏: {pollen['weed']} ‚Äî —Ä–∏—Å–∫ {pollen['risk']}")
    P.append("‚Äî‚Äî‚Äî")

    # 6) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ + –®—É–º–∞–Ω
    kp, kp_state = get_kp()
    if kp is not None:
        P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({kp_state})")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")

    P.append(schumann_line(get_schumann_with_fallback()))
    P.append("‚Äî‚Äî‚Äî")

    # 7) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>")
    astro = astro_events()  # —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –æ—Ç astro_events()

    if astro:
        for line in astro:
            P.append(line)

    # –ú–µ—Å—Ç–æ –¥–ª—è —è–≤–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ VoC (–µ—Å–ª–∏ –≤ astro_events –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥—É–±–ª—å)
    info_today = get_day_lunar_info(TODAY)
    if info_today:
        voc = info_today.get("void_of_course", {})
        if voc.get("start") and voc.get("end"):
            P.append(f"üïë VoC: {voc['start']} ‚Üí {voc['end']}")
    P.append("‚Äî‚Äî‚Äî")

    # 8) –í—ã–≤–æ–¥
    P.append("üìú <b>–í—ã–≤–æ–¥</b>")
    P.append("–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ –ø–æ–≥–æ–¥—É! üòâ")
    P.append("‚Äî‚Äî‚Äî")

    # 9) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (GPT –∏–ª–∏ —Ñ–æ–ª–±–µ–∫)
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    summary, tips = gpt_blurb("–ø–æ–≥–æ–¥–∞")
    for advice in tips[:3]:
        P.append(f"‚Ä¢ {advice.strip()}")
    P.append("‚Äî‚Äî‚Äî")

    # 10) –§–∞–∫—Ç –¥–Ω—è
    P.append(f"üìö {get_fact(TOMORROW)}")

    return "\n".join(P)


async def send_main_post(bot: Bot) -> None:
    html = build_msg()
    logging.info("Preview: %s", html.replace("\n"," | ")[:250])
    try:
        await bot.send_message(
            CHAT_ID,
            html,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info("Message sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise


async def send_poll_if_friday(bot: Bot) -> None:
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º."""
    if pendulum.now(TZ).weekday() == 4:
        try:
            await bot.send_poll(
                CHAT_ID,
                question="–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î",
                options=["üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏","üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ","üò¥ –°–ª–µ–≥–∫–∞ –≤—è–ª—ã–π(–∞—è)","ü§í –í—Å—ë –ø–ª–æ—Ö–æ"],
                is_anonymous=False,
                allows_multiple_answers=False
            )
        except tg_err.TelegramError as e:
            logging.warning("Poll send error: %s", e)


async def main() -> None:
    bot = Bot(token=TOKEN)
    await send_main_post(bot)
    await send_poll_if_friday(bot)


if __name__ == "__main__":
    asyncio.run(main())