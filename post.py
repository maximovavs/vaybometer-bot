#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
post.py ‚Äî –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç VayboMeter-–±–æ—Ç–∞ –¥–ª—è –ö–∏–ø—Ä–∞.

–í —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏:
‚Ä¢ –£–ª—É—á—à–µ–Ω—ã –±–ª–æ–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≥–æ—Ä–æ–¥–æ–≤, –®—É–º–∞–Ω–∞, VoC –≤ –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è—Ö.
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ç—Ä–µ–Ω–¥–∞ –¥–∞–≤–ª–µ–Ω–∏—è –ø–æ –¥–∞–Ω–Ω—ã–º Open-Meteo.
‚Ä¢ –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª–µ–Ω CTA –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Ç–∞—Ç–µ–ª–µ–π.
"""

from __future__ import annotations
import os
import asyncio
import json
import logging
from pathlib import Path
from typing import Dict, Any, Optional, Tuple, List

import requests
import pendulum
from requests.exceptions import RequestException
from telegram import Bot, error as tg_err

# ‚îÄ‚îÄ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from utils import (
    compass,
    clouds_word,
    get_fact,
    AIR_EMOJI,
    pm_color,
    kp_emoji,
)
from weather import get_weather, fetch_tomorrow_temps, code_desc, pressure_arrow
from air     import get_air, get_sst, get_kp
from pollen  import get_pollen
from schumann import get_schumann
from astro   import astro_events
from gpt     import gpt_blurb
from lunar   import get_day_lunar_info

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÇ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ       = pendulum.timezone("Asia/Nicosia")
TODAY    = pendulum.now(TZ).date()
TOMORROW = TODAY.add(days=1)

TOKEN   = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID = int(os.getenv("CHANNEL_ID", 0))

# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (Limassol –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞)
CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
    "Troodos" : (34.916, 32.823),  # –≥–æ—Ä–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
}

# ‚îÄ‚îÄ Schumann: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ü–≤–µ—Ç –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ø–æ—Ä–æ–≥–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def schumann_line(sch: Dict[str, Any]) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "üü¢ –®—É–º–∞–Ω: 7.83 –ì—Ü / 1.2 pT ‚Üë",
    –≥–¥–µ —Ü–≤–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∞—Å—Ç–æ—Ç—ã: [<7.6: üî¥, 7.6‚Äì8.1: üü¢, >8.1: üü£].
    """
    if sch.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"
    f   = sch["freq"]
    amp = sch["amp"]
    # –í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏ –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    if f < 7.6:
        emoji = "üî¥"
    elif f > 8.1:
        emoji = "üü£"
    else:
        emoji = "üü¢"
    trend = sch.get("trend", "")
    return f"{emoji} –®—É–º–∞–Ω: {f:.2f} –ì—Ü / {amp:.1f} pT {trend}"

def get_schumann_with_fallback() -> Dict[str, Any]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –®—É–º–∞–Ω–∞. –ï—Å–ª–∏ fetch –Ω–µ —É–¥–∞–ª—Å—è,
    –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –∏–∑ schumann_hourly.json.
    """
    sch = get_schumann()
    if sch.get("freq") is not None:
        sch["cached"] = False
        return sch

    cache_path = Path(__file__).parent / "schumann_hourly.json"
    if cache_path.exists():
        try:
            arr = json.loads(cache_path.read_text(encoding="utf-8"))
            if arr:
                last = arr[-1]
                pts  = arr[-24:]
                if len(pts) >= 2:
                    freqs = [p["freq"] for p in pts[:-1]]
                    avg   = sum(freqs) / len(freqs)
                    delta = last["freq"] - avg
                    trend = "‚Üë" if delta >= 0.1 else "‚Üì" if delta <= -0.1 else "‚Üí"
                else:
                    trend = "‚Üí"
                return {"freq": round(last["freq"], 2),
                        "amp":  round(last["amp"], 1),
                        "trend": trend,
                        "cached": True,
                        "high": False}
        except Exception as e:
            logging.warning("Schumann cache parse error: %s", e)
    return sch

# ‚îÄ‚îÄ Core builder ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ, –®—É–º–∞–Ω–µ, –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è—Ö –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö.
    """

    P: list[str] = []

    # 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
    P.append(f"<b>üåÖ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({TOMORROW.format('DD.MM.YYYY')})</b>")

    # 2) –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è (—Ä—è–¥–æ–º —Å Limassol) ‚Äî –¥–ª—è –ö–∏–ø—Ä–∞ —ç—Ç–æ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–µ –º–æ—Ä–µ
    if (sst := get_sst()) is not None:
        P.append(f"üåä –¢–µ–º–ø. –º–æ—Ä—è: {sst:.1f} ¬∞C")

    # 3) –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è Limassol: —Å—Ä–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è/–Ω–æ—á–Ω–∞—è, –æ–±–ª–∞–∫–∞, –≤–µ—Ç–µ—Ä, –¥–∞–≤–ª–µ–Ω–∏–µ
    lat, lon = CITIES["Limassol"]
    day_max, night_min = fetch_tomorrow_temps(lat, lon, tz=TZ.name)
    w = get_weather(lat, lon) or {}
    cur = w.get("current", {})  # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ Open-Meteo
    avg_temp = (day_max + night_min) / 2 if day_max is not None and night_min is not None else cur.get("temperature", 0)

    wind_kmh = cur.get("windspeed", 0)
    wind_deg = cur.get("winddirection", 0)
    press    = cur.get("pressure", 0)
    clouds   = cur.get("clouds", 0)
    # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ hourly –¥–ª—è —Ç—Ä–µ–Ω–¥–∞ –¥–∞–≤–ª–µ–Ω–∏—è
    hourly = w.get("hourly", {})

    P.append(
        f"üå°Ô∏è –°—Ä. —Ç–µ–º–ø: {avg_temp:.0f} ¬∞C ‚Ä¢ {clouds_word(clouds)}  "
        f"‚Ä¢ üí® {wind_kmh:.1f} –∫–º/—á ({compass(wind_deg)})  "
        f"‚Ä¢ üíß {press:.0f} –≥–ü–∞ {pressure_arrow(hourly)}"
    )
    P.append("‚Äî‚Äî‚Äî")

    # 4) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤: —Ç–æ–ø-5 –ø–æ –¥–Ω–µ–≤–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ + WMO –∫–æ–¥
    temps: Dict[str, Tuple[float, float, int]] = {}
    for city, (la, lo) in CITIES.items():
        d, n = fetch_tomorrow_temps(la, lo, tz=TZ.name)
        if d is None:
            continue
        wcodes = get_weather(la, lo) or {}
        # WMO-–∫–æ–¥ –±–µ—Ä—ë–º –∏–∑ daily.weathercode: –∏–Ω–¥–µ–∫—Å 1 ‚Äî –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        daily_codes = wcodes.get("daily", {}).get("weathercode", [])
        code_tmr = daily_codes[1] if len(daily_codes) >= 2 else daily_codes[0] if daily_codes else 0
        temps[city] = (d, n or d, code_tmr)

    if temps:
        P.append("üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å, –ø–æ–≥–æ–¥–∞)</b>")
        medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω–µ–≤–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ (–º–∞–∫—Å ‚Üí –º–∏–Ω) –∏ –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 5
        sorted_cities = sorted(temps.items(), key=lambda kv: kv[1][0], reverse=True)[:5]
        for i, (city, (d, n, code)) in enumerate(sorted_cities):
            desc = code_desc(code)
            P.append(f"{medals[i]} {city}: {d:.1f}/{n:.1f} ¬∞C, {desc}")
        P.append("‚Äî‚Äî‚Äî")

    # 5) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –∏ –ø—ã–ª—å—Ü–∞
    air = get_air() or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(
        f"{AIR_EMOJI.get(lvl, '‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | "
        f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}"
    )
    if (pollen := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(
            f"–î–µ—Ä–µ–≤—å—è: {pollen['tree']} | –¢—Ä–∞–≤—ã: {pollen['grass']} | "
            f"–°–æ—Ä–Ω—è–∫–∏: {pollen['weed']} ‚Äî —Ä–∏—Å–∫ {pollen['risk']}"
        )
    P.append("‚Äî‚Äî‚Äî")

    # 6) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ –∏ –®—É–º–∞–Ω
    kp, kp_state = get_kp()
    if kp is not None:
        P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({kp_state})")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")

    sch = get_schumann_with_fallback()
    P.append(schumann_line(sch))
    P.append("‚Äî‚Äî‚Äî")

    # 7) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>")
    astro_lines = astro_events()
    if astro_lines:
        P.extend(astro_lines)
    else:
        P.append("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
    P.append("‚Äî‚Äî‚Äî")

    # 8) GPT-–≤—ã–≤–æ–¥ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    # –õ–æ–≥–∏–∫–∞ ¬´–≤–∏–Ω–∏—Ç–µ–ª—è¬ª –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ gpt_blurb
    summary, tips = gpt_blurb("–ø–æ–≥–æ–¥–∞")
    P.append(f"üìú <b>–í—ã–≤–æ–¥</b>  \n{summary}")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    for t in tips:
        P.append(f"‚Ä¢ {t}")
    P.append("‚Äî‚Äî‚Äî")

    # 9) –§–∞–∫—Ç –¥–Ω—è
    P.append(f"üìö {get_fact(TOMORROW)}")
    # 10) –ü—Ä–∏–∑—ã–≤ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é
    P.append("")
    P.append("<i>–ê –≤—ã —É–∂–µ —Ä–µ—à–∏–ª–∏, –∫–∞–∫ –ø—Ä–æ–≤–µ–¥—ë—Ç–µ –≤–µ—á–µ—Ä? üåÜ</i>")

    return "\n".join(P)


# ‚îÄ‚îÄ Telegram I/O ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_main_post(bot: Bot) -> None:
    html = build_msg()
    logging.info("Preview (first 200 chars): %s", html.replace("\n", " | ")[:200])
    try:
        await bot.send_message(
            CHAT_ID,
            html,
            parse_mode="HTML",
            disable_web_page_preview=True,
        )
        logging.info("Message sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise

async def send_poll_if_friday(bot: Bot) -> None:
    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å
    if pendulum.now(TZ).weekday() == 4:
        try:
            await bot.send_poll(
                CHAT_ID,
                question="–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î",
                options=["üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏", "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
                         "üò¥ –°–ª–µ–≥–∫–∞ –≤—è–ª—ã–π(–∞—è)", "ü§í –í—Å—ë –ø–ª–æ—Ö–æ"],
                is_anonymous=False,
                allows_multiple_answers=False
            )
        except tg_err.TelegramError as e:
            logging.warning("Poll send error: %s", e)

async def main() -> None:
    bot = Bot(token=TOKEN)
    await send_main_post(bot)
    await send_poll_if_friday(bot)

if __name__ == "__main__":
    asyncio.run(main())