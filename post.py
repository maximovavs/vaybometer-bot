#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post.py ‚Äî –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç VayboMeter-–±–æ—Ç–∞.

–ò–∑–º–µ–Ω–µ–Ω–∏—è 2025-06-XX:
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ ‚Üí 5 –ø—É–Ω–∫—Ç–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω Troodos) + –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ WMO-–ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ —ç–º–æ–¥–∑–∏
‚Ä¢ –°—Ç—Ä–µ–ª–∫–∞ –¥–∞–≤–ª–µ–Ω–∏—è ‚Üë/‚Üì/‚Üí ‚Äî –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É —Å—É—Ç–æ—á–Ω–æ–º—É —Ç—Ä–µ–Ω–¥—É (Open-Meteo hourly)
‚Ä¢ –ë–ª–æ–∫ –®—É–º–∞–Ω–∞: –≤–º–µ—Å—Ç–æ ¬´(–∫—ç—à)¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ü–≤–µ—Ç-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä üü¢/üî¥/üü£
‚Ä¢ –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è: –ø–æ–∫–∞–∑ VoC, –º–∞—Ä–∫–µ—Ä—ã ¬´–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å¬ª, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  ‚Ä¢ –£–±—Ä–∞–Ω–æ ¬´(11% –æ—Å–≤–µ—â.) ‚Äì¬ª –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ–≤–µ—Ç–∞–º–∏
  ‚Ä¢ –ù—É–º–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ —Å–æ–≤–µ—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–∞ (–∫–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç —Å —ç–º–æ–¥–∑–∏)
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ ¬´–≤–∏–Ω–∏—Ç–µ –ø–æ–≥–æ–¥—É¬ª –≤ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏
"""

from __future__ import annotations
import os
import asyncio
import logging
import json
from pathlib import Path
from typing import Dict, Any, Optional, Tuple, List

import requests
import pendulum
from requests.exceptions import RequestException
from telegram import Bot, error as tg_err

from utils import (
    compass, clouds_word, get_fact,
    AIR_EMOJI, pm_color, kp_emoji
)
from weather import get_weather, fetch_tomorrow_temps  # fetch_tomorrow_temps —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç tz
from air import get_air, get_sst  # get_sst –¥–ª—è –º–æ—Ä—è (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
from pollen import get_pollen
from schumann import get_schumann
from astro import astro_events
from gpt import gpt_blurb
from lunar import get_day_lunar_info

# ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ       = pendulum.timezone("Asia/Nicosia")
TODAY    = pendulum.now(TZ).date()
TOMORROW = TODAY.add(days=1)

TOKEN   = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID = int(os.getenv("CHANNEL_ID", 0))

# –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ¬´–ë–∞–ª—Ç–∏–π—Å–∫–æ–µ –º–æ—Ä–µ¬ª, –∑–∞–º–µ–Ω–∏—Ç–µ get_sst –Ω–∞ get_baltic_sst
# –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –æ—Å—Ç–∞–≤–∏–º get_sst(), –º–µ–Ω—è—è –ø–æ–¥–ø–∏—Å—å
SEA_LABEL = "–ë–∞–ª—Ç–∏–π—Å–∫–æ–µ –º–æ—Ä–µ"

# –ë–æ–ª—å—à–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
    "Troodos" : (34.916, 32.823),
}

# WMO ‚Üí —ç–º–æ–¥–∑–∏
WMO_ICON: Dict[int, str] = {
    0:  "‚òÄÔ∏è",  # —è—Å–Ω–æ
    1:  "‚õÖ",  # —á–∞—Å—Ç. –æ–±–ª–∞—á.
    2:  "‚õÖ",  # –æ–±–ª–∞—á–Ω–æ
    3:  "‚òÅÔ∏è",  # –ø–∞—Å–º—É—Ä–Ω–æ
    45: "üå´Ô∏è",  # —Ç—É–º–∞–Ω
    48: "üå´Ô∏è",  # –∏–∑–º–æ—Ä–æ–∑—å
    51: "üå¶Ô∏è",  # —Å–ª–∞–±. –º–æ—Ä–æ—Å—å
    61: "üåßÔ∏è",  # –¥–æ–∂–¥—å
    71: "‚ùÑÔ∏è",  # —Å–Ω–µ–≥
    95: "‚õàÔ∏è",  # –≥—Ä–æ–∑–∞
    # ‚Ä¶ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–¥—ã
}

def wmo_description(code: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–≥–æ–¥—ã –ø–æ WMO."""
    desc = {
        0: "—è—Å–Ω–æ", 1: "—á–∞—Å—Ç. –æ–±–ª–∞—á.", 2: "–æ–±–ª–∞—á–Ω–æ", 3: "–ø–∞—Å–º—É—Ä–Ω–æ",
        45: "—Ç—É–º–∞–Ω", 48: "–∏–∑–º–æ—Ä–æ–∑—å", 51: "—Å–ª–∞–±. –º–æ—Ä–æ—Å—å",
        61: "–¥–æ–∂–¥—å", 71: "—Å–Ω–µ–≥", 95: "–≥—Ä–æ–∑–∞",
    }
    return desc.get(code, "‚Äî")

def wmo_line(code: int) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ '‚òÄÔ∏è —è—Å–Ω–æ'."""
    icon = WMO_ICON.get(code, "‚Äî")
    text = wmo_description(code)
    return f"{icon} {text}"

def pressure_arrow(hourly: Dict[str, Any]) -> str:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å—É—Ç–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É."""
    pr = hourly.get("surface_pressure", [])
    if len(pr) < 2:
        return "‚Üí"
    delta = pr[-1] - pr[0]
    if delta > 1.0:
        return "‚Üë"
    if delta < -1.0:
        return "‚Üì"
    return "‚Üí"

def schumann_line(sch: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞ –®—É–º–∞–Ω–∞ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º."""
    if sch.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"
    f   = sch["freq"]
    amp = sch["amp"]
    # —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: üå¥
    if f < 7.6:
        emoji = "üî¥"  # –Ω–∏–∂–µ –Ω–æ—Ä–º—ã
    elif f > 8.1:
        emoji = "üü£"  # –≤—ã—à–µ –Ω–æ—Ä–º—ã
    else:
        emoji = "üü¢"  # –≤ –Ω–æ—Ä–º–µ
    return f"{emoji} –®—É–º–∞–Ω: {f:.2f} –ì—Ü / {amp:.1f} pT {sch['trend']}"

def get_schumann_with_fallback() -> Dict[str, Any]:
    """–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏–Ω–∞—á–µ ‚Äî –∏–∑ –∫—ç—à–∞."""
    sch = get_schumann()
    if sch.get("freq") is not None:
        sch["cached"] = False
        return sch

    cache_path = Path(__file__).parent / "schumann_hourly.json"
    if cache_path.exists():
        try:
            arr = json.loads(cache_path.read_text(encoding="utf-8"))
            if arr:
                last = arr[-1]
                pts  = arr[-24:]
                if len(pts) >= 2:
                    freqs = [p["freq"] for p in pts[:-1]]
                    avg   = sum(freqs) / len(freqs)
                    delta = last["freq"] - avg
                    trend = "‚Üë" if delta >= 0.1 else "‚Üì" if delta <= -0.1 else "‚Üí"
                else:
                    trend = "‚Üí"
                return {
                    "freq":  round(last["freq"], 2),
                    "amp":   round(last["amp"], 1),
                    "trend": trend,
                    "cached": True,
                    "high":  last["freq"] > 8.0 or last["amp"] > 100.0,
                }
        except Exception as e:
            logging.warning("Schumann fallback parse error: %s", e)
    return sch

# ‚îÄ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–æ–π —Å–±–æ—Ä—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    P: List[str] = []

    # 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
    P.append(f"<b>üåÖ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({TOMORROW.format('DD.MM.YYYY')})</b>")

    # 2) –ë–∞–ª—Ç–∏–π—Å–∫–æ–µ –º–æ—Ä–µ (–∑–∞–º–µ–Ω–∞ get_sst)
    if (sst := get_sst()) is not None:
        P.append(f"üåä –¢–µ–º–ø. {SEA_LABEL}: {sst:.1f} ¬∞C")

    # 3) –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è Limassol (–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ)
    lat, lon = CITIES["Limassol"]
    # fetch_tomorrow_temps —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç tz name
    day_max, night_min = fetch_tomorrow_temps(lat, lon, tz=TZ.name)
    w = get_weather(lat, lon) or {}
    cur = w.get("current") or {}

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
    if day_max is not None and night_min is not None:
        avg_temp = (day_max + night_min) / 2
    else:
        avg_temp = cur.get("temperature", 0)

    wind_kmh = cur.get("windspeed", cur.get("wind_speed", 0.0))
    wind_deg = cur.get("winddirection", cur.get("wind_deg", 0.0))
    press    = cur.get("pressure", w.get("hourly", {}).get("surface_pressure", [1013])[0])
    clouds   = cur.get("clouds", w.get("hourly", {}).get("cloud_cover", [0])[0])

    P.append(
        f"üå°Ô∏è –°—Ä. —Ç–µ–º–ø: {avg_temp:.0f} ¬∞C ‚Ä¢ {clouds_word(clouds)} "
        f"‚Ä¢ üí® {wind_kmh:.1f} –∫–º/—á ({compass(wind_deg)}) "
        f"‚Ä¢ üíß {press:.0f} –≥–ü–∞ {pressure_arrow(w.get('hourly', {}))}"
    )
    P.append("‚Äî‚Äî‚Äî")

    # 4) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–µ–Ω—å/–Ω–æ—á—å/–ø–æ–≥–æ–¥–∞)
    temps: Dict[str, Tuple[float, float, int]] = {}
    for city, (la, lo) in CITIES.items():
        d, n = fetch_tomorrow_temps(la, lo, tz=TZ.name)
        if d is None:
            continue
        wcodes = get_weather(la, lo) or {}
        # –±–µ—Ä–µ–º –∫–æ–¥ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è (daily.weathercode)[1], –µ—Å–ª–∏ –µ—Å—Ç—å
        daily_codes = wcodes.get("daily", {}).get("weathercode", [])
        code_tmr = daily_codes[1] if len(daily_codes) > 1 else daily_codes[0] if daily_codes else 0
        temps[city] = (d, n or d, code_tmr)

    if temps:
        P.append("üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å, –ø–æ–≥–æ–¥–∞)</b>")
        medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω–µ–≤–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ, —É–±—ã–≤–∞—é—â–µ; –±–µ—Ä–µ–º —Ç–æ–ø-5
        sorted_cities = sorted(temps.items(), key=lambda kv: kv[1][0], reverse=True)[:5]
        for i, (city, (d_temp, n_temp, code)) in enumerate(sorted_cities):
            P.append(f"{medals[i]} {city}: {d_temp:.1f}/{n_temp:.1f} ¬∞C, {wmo_line(code)}")
        P.append("‚Äî‚Äî‚Äî")

    # 5) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ + –ø—ã–ª—å—Ü–∞
    air = get_air() or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(
        f"{AIR_EMOJI.get(lvl, '‚ö™')} {lvl} (AQI {air.get('aqi', '–Ω/–¥')}) | "
        f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}"
    )
    if (pollen := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(
            f"–î–µ—Ä–µ–≤—å—è: {pollen['tree']} | –¢—Ä–∞–≤—ã: {pollen['grass']} | "
            f"–°–æ—Ä–Ω—è–∫–∏: {pollen['weed']} ‚Äî —Ä–∏—Å–∫ {pollen['risk']}"
        )
    P.append("‚Äî‚Äî‚Äî")

    # 6) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ + –®—É–º–∞–Ω
    kp, kp_state = get_kp()
    if kp is not None:
        P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({kp_state})")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")
    P.append(schumann_line(get_schumann_with_fallback()))
    P.append("‚Äî‚Äî‚Äî")

    # 7) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>")
    # astro_events() —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å VoC, –º–∞—Ä–∫–µ—Ä–∞–º–∏, —Ñ–∞–∑–æ–π –∏ —Å–æ–≤–µ—Ç–∞–º–∏
    for line in astro_events():
        P.append(line)
    P.append("‚Äî‚Äî‚Äî")

    # 8) GPT-–≤—ã–≤–æ–¥ (–í—ã–≤–æ–¥ ¬´–≤–∏–Ω–∏—Ç–µ –ø–æ–≥–æ–¥—É¬ª –∏–ª–∏ –¥—Ä—É–≥–æ–π ¬´–≤–∏–Ω—éÃÅ—â–∏–π¬ª –ø–æ –ª–æ–≥–∏–∫–µ gpt_blurb)
    summary, tips = gpt_blurb("–ø–æ–≥–æ–¥–∞")
    P.append(f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}")
    P.append("‚Äî‚Äî‚Äî")

    # 9) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ç—Ä–∏ –ø—É–Ω–∫—Ç–∞)
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    if tips:
        # –µ—Å–ª–∏ GPT –≤–µ—Ä–Ω—É–ª –º–µ–Ω–µ–µ 3 —Å–æ–≤–µ—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–µ–º –±—ç–∫–∞–ø–æ–º
        for t in tips:
            P.append(f"‚Ä¢ {t}")
        # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑ get_day_lunar_info
        # –Ω–æ –æ–±—ã—á–Ω–æ gpt_blurb –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º—É–º 3
    else:
        # –µ—Å–ª–∏ GPT –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –∏–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –ª—É–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        info_today = get_day_lunar_info(TODAY)
        if info_today:
            advs = info_today.get("advice", [])
            for adv in advs[:3]:
                P.append(f"‚Ä¢ {adv}")
    P.append("‚Äî‚Äî‚Äî")

    # 10) –§–∞–∫—Ç –¥–Ω—è
    fact = get_fact(TOMORROW)
    if fact:
        P.append(f"üìö {fact}")

    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ Telegram I/O ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_main_post(bot: Bot) -> None:
    html = build_msg()
    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ª–æ–≥
    logging.info("Preview: %s", html.replace("\n", " | ")[:200])
    try:
        await bot.send_message(
            CHAT_ID, html,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info("Message sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise

async def send_poll_if_friday(bot: Bot) -> None:
    if pendulum.now(TZ).weekday() == 4:
        try:
            await bot.send_poll(
                CHAT_ID,
                question="–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î",
                options=["üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏", "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
                         "üò¥ –°–ª–µ–≥–∫–∞ –≤—è–ª—ã–π(–∞—è)", "ü§í –í—Å—ë –ø–ª–æ—Ö–æ"],
                is_anonymous=False,
                allows_multiple_answers=False
            )
        except tg_err.TelegramError as e:
            logging.warning("Poll send error: %s", e)

async def main() -> None:
    bot = Bot(token=TOKEN)
    await send_main_post(bot)
    await send_poll_if_friday(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
    asyncio.run(main())