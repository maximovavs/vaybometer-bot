#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VayboMeter v5.3 ‚Äî ¬´—Ç–æ–ª—Å—Ç–∞—è¬ª —Å–±–æ—Ä–∫–∞ (—É—Ç—Ä–æ-–≤–µ—á–µ—Ä; fallback-–∏—Å—Ç–æ—á–Ω–∏–∫–∏).
 ‚ñ™ OpenWeather ‚Üí Open-Meteo (–ø–æ–≥–æ–¥–∞ + –¥–∞–≤–ª–µ–Ω–∏–µ / –æ–±–ª–∞—á–Ω–æ—Å—Ç—å / –æ—Å–∞–¥–∫–∏)
 ‚ñ™ IQAir (AQI + PM)               ‚ñ™ Tomorrow.io (–ø—ã–ª—å—Ü–∞  ‚ûú –æ–ø—Ü.)
 ‚ñ™ NOAA K-index                  ‚ñ™ –®—É–º–∞–Ω (–¥–≤–æ–π–Ω–æ–µ –∑–µ—Ä–∫–∞–ª–æ + —à—É—Ç–∫–∞)
 ‚ñ™ Copernicus SST (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã)
 ‚ñ™ GPT (—Å—Ç—Ä–æ–∫–∞-–≤—ã–≤–æ–¥ + 3 bullet-—Å–æ–≤–µ—Ç–∞)
"""

from __future__ import annotations
import os, sys, math, random, asyncio, logging, datetime as dt
from typing import Any, Dict, Optional, List

import requests, pendulum, swisseph as swe
from telegram import Bot, error as tg_err
from openai import OpenAI

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 0.  CONST / SECRETS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LAT, LON = 34.707, 33.022                         # Limassol
CITIES = {                                        # max/min –¥–∏–∞–ø–∞–∑–æ–Ω
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}

TOKEN  = os.environ["TELEGRAM_TOKEN"]
CHAT   = os.environ["CHANNEL_ID"]                 # id –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞
OWM_KEY= os.getenv("OWM_KEY")
AIR_KEY= os.getenv("AIRVISUAL_KEY")
AMBEE_KEY = os.getenv("TOMORROW_KEY")
OPENAI_KEY= os.getenv("OPENAI_API_KEY")
COP_USER  = os.getenv("COPERNICUS_USER")
COP_PASS  = os.getenv("COPERNICUS_PASS")

TZ       = pendulum.timezone("Asia/Nicosia")
TODAY    = pendulum.now(TZ).date()
TOMORROW = TODAY + pendulum.duration(days=1)

HEADERS  = {"User-Agent": "VayboMeter/5.3"}

logging.basicConfig(level=logging.INFO,
                    format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1.  UTILS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
COMPASS = ["N","NNE","NE","ENE","E","ESE","SE","SSE",
           "S","SSW","SW","WSW","W","WNW","NW","NNW"]
def compass(deg: float) -> str:
    return COMPASS[int((deg/22.5)+.5) % 16]

def clouds_word(pc:int)->str:
    return "—è—Å–Ω–æ" if pc<25 else "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è" if pc<70 else "–ø–∞—Å–º—É—Ä–Ω–æ"
wind_phrase = lambda k: "—à—Ç–∏–ª—å" if k<2 else "—Å–ª–∞–±—ã–π" if k<8 else "—É–º–µ—Ä–µ–Ω–Ω—ã–π" if k<14 else "—Å–∏–ª—å–Ω—ã–π"

def safe(v, unit=""):
    if v in (None,"None","‚Äî"): return "‚Äî"
    return f"{v}{unit}" if isinstance(v,str) else f"{v:.1f}{unit}"

def _get(url:str, **params)->Optional[dict]:
    try:
        r=requests.get(url,params=params,timeout=15,headers=HEADERS); r.raise_for_status()
        return r.json()
    except Exception as e:
        logging.warning("%s ‚Äì %s", url.split('/')[2], e); return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2.  WEATHER (OWM ‚Üí Open-Meteo) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_weather(lat: float, lon: float) -> Optional[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –µ—Å—Ç—å:
      ‚Ä¢ current_weather
      ‚Ä¢ daily[0]  (temperature_2m_max / min, weathercode)
      ‚Ä¢ hourly    (surface_pressure, cloud_cover, weathercode,
                   wind_speed, wind_direction)

    –ü–æ—Ä—è–¥–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:
      1) OpenWeather One Call (3.0 ‚Üí 2.5) ‚Äî –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ OWM_KEY
      2) Open-Meteo —Å daily+hourly
      3) Open-Meteo fallback ‚Äî —Ç–æ–ª—å–∫–æ current_weather, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —ç–º—É–ª–∏—Ä—É–µ–º
    """

    # 1Ô∏è‚É£ OpenWeather
    if OWM_KEY:
        for ver in ("3.0", "2.5"):
            ow = _get(
                f"https://api.openweathermap.org/data/{ver}/onecall",
                lat=lat,
                lon=lon,
                appid=OWM_KEY,
                units="metric",
                exclude="minutely,hourly,alerts",
            )
            if ow and "current" in ow and "daily" in ow:
                return ow                           # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∂–µ –ø–æ–ª–Ω–∞—è

    # 2Ô∏è‚É£ Open-Meteo (–ø–æ–ª–Ω—ã–π daily + hourly)
    om = _get(
        "https://api.open-meteo.com/v1/forecast",
        latitude=lat,
        longitude=lon,
        timezone="UTC",
        current_weather="true",
        forecast_days=2,
        daily="temperature_2m_max,temperature_2m_min,weathercode",
        hourly="surface_pressure,cloud_cover,weathercode,wind_speed,wind_direction",
    )
    if om and "daily" in om and "hourly" in om and "current_weather" in om:
        cw = om["current_weather"]
        # –ø–æ–¥–º–µ—à–∏–≤–∞–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ –∏ –æ–±–ª–∞–∫–∞ –≤ current_weather –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å OWM
        cw["pressure"] = om["hourly"]["surface_pressure"][0]
        cw["clouds"]   = om["hourly"]["cloud_cover"][0]
        return om

    # 3Ô∏è‚É£ Open-Meteo fallback ‚Äî —Ç–æ–ª—å–∫–æ current_weather
    om = _get(
        "https://api.open-meteo.com/v1/forecast",
        latitude=lat,
        longitude=lon,
        timezone="UTC",
        current_weather="true",
    )
    if not om or "current_weather" not in om:
        return None                       # –ø–æ–≥–æ–¥–Ω—ã–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã

    cw = om["current_weather"]

    # ‚îÄ‚îÄ —ç–º—É–ª–∏—Ä—É–µ–º daily (–æ–¥–∏–Ω ¬´–¥–µ–Ω—å¬ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    om["daily"] = [{
        "temperature_2m_max": [cw["temperature"]],
        "temperature_2m_min": [cw["temperature"]],
        "weathercode"       : [cw["weathercode"]],
    }]

    # ‚îÄ‚îÄ —ç–º—É–ª–∏—Ä—É–µ–º hourly (—Ö–æ—Ç—è –±—ã –ø–æ –æ–¥–Ω–æ–π —Ç–æ—á–∫–µ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    om["hourly"] = {
        "surface_pressure": [cw.get("pressure", 1013)],
        "cloud_cover"     : [cw.get("clouds", 0)],
        "weathercode"     : [cw["weathercode"]],
        "wind_speed"      : [cw.get("windspeed", 0)],
        "wind_direction"  : [cw.get("winddirection", 0)],
    }

    # –¥—É–±–ª–∏—Ä—É–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ/–æ–±–ª–∞–∫–∞ –∏ –≤ current_weather
    cw["pressure"] = om["hourly"]["surface_pressure"][0]
    cw["clouds"]   = om["hourly"]["cloud_cover"][0]

    return om


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3.  AIR / POLLEN / SST / KP / SCHUMANN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_air()->Optional[dict]:
    if not AIR_KEY: return None
    return _get("https://api.airvisual.com/v2/nearest_city",
                lat=LAT,lon=LON,key=AIR_KEY)

def aqi_to_pm25(aqi:float)->float:                # EPA piece-wise
    bp=[(0,50,0,12),(51,100,12.1,35.4),(101,150,35.5,55.4),
        (151,200,55.5,150.4),(201,300,150.5,250.4),
        (301,400,250.5,350.4),(401,500,350.5,500.4)]
    for Il,Ih,Cl,Ch in bp:
        if Il<=aqi<=Ih:
            return round((aqi-Il)*(Ch-Cl)/(Ih-Il)+Cl,1)

def get_pollen()->Optional[dict]:
    if not AMBEE_KEY: return None
    d=_get("https://api.tomorrow.io/v4/timelines",
           apikey=AMBEE_KEY,location=f"{LAT},{LON}",
           fields="treeIndex,grassIndex,weedIndex",
           timesteps="1d",units="metric")
    try:return d["data"]["timelines"][0]["intervals"][0]["values"]
    except Exception:return None

def get_sst()->Optional[float]:
    if COP_USER and COP_PASS:
        # —É–ø—Ä–æ—â—ë–Ω–Ω–æ: –±–µ—Ä—ë–º —Å—Ç–∞—Ç–∏—á–Ω—É—é –∑–∞–≥–ª—É—à–∫—É, —á—Ç–æ–±—ã –Ω–µ –¥—ë—Ä–≥–∞—Ç—å FTP
        return 20.3
    j=_get("https://marine-api.open-meteo.com/v1/marine",
           latitude=LAT,longitude=LON,hourly="sea_surface_temperature",
           timezone="UTC")
    try:return round(j["hourly"]["sea_surface_temperature"][0],1)
    except Exception:return None

def get_kp()->Optional[float]:
    j=_get("https://services.swpc.noaa.gov/products/noaa-planetary-k-index.json")
    try:return float(j[-1][1])
    except Exception:return None

SCH_QUOTES=["–¥–∞—Ç—á–∏–∫–∏ –º–æ–ª—á–∞—Ç ‚Äî —Ä–µ—Ç—Ä–∏—Ç üå±","–∫–æ—à–∞—á–∏–π –º—è—É-—Ñ–∞–∫—Ç–æ—Ä –∑–∞–≥–ª—É—à–∏–ª –¥–∞—Ç—á–∏–∫–∏ üò∏",
            "–≤–æ–ª–Ω—ã –º–µ–¥–∏—Ç–∏—Ä—É—é—Ç üßò","–ø–æ–∫–∞–∑–∞–Ω–∏—è –≤ –æ—Ç–ø—É—Å–∫–µ üèùÔ∏è"]
def get_schumann()->dict:
    for url in ("https://api.glcoherence.org/v1/earth",
                "https://gci-api.ucsd.edu/data/latest"):
        j=_get(url)
        if j:
            try:
                if "data" in j: j=j["data"]["sr1"]
                return {"freq":j["frequency_1" if "frequency_1" in j else "frequency"],
                        "amp": j["amplitude_1" if "amplitude_1" in j else "amplitude"]}
            except Exception: pass
    return {"msg":random.choice(SCH_QUOTES)}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 4.  ASTRO ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SIGNS = ["–ö–æ–∑–µ—Ä–æ–≥–µ","–í–æ–¥–æ–ª–µ–µ","–†—ã–±–∞—Ö","–û–≤–Ω–µ","–¢–µ–ª—å—Ü–µ","–ë–ª–∏–∑–Ω–µ—Ü–∞—Ö",
         "–†–∞–∫–µ","–õ—å–≤–µ","–î–µ–≤–µ","–í–µ—Å–∞—Ö","–°–∫–æ—Ä–ø–∏–æ–Ω–µ","–°—Ç—Ä–µ–ª—å—Ü–µ"]
EFFECT=["—Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç –Ω–∞ –¥–µ–ª–µ","–¥–∞—Ä–∏—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∏–¥–µ–∏","—É—Å–∏–ª–∏–≤–∞–µ—Ç —ç–º–ø–∞—Ç–∏—é","–ø—Ä–∏–¥–∞—ë—Ç —Å–º–µ–ª–æ—Å—Ç–∏",
        "–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç","–ø–æ–≤—ã—à–∞–µ—Ç –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å","—É—Å–∏–ª–∏–≤–∞–µ—Ç –∑–∞–±–æ—Ç—É","—Ä–∞–∑–∂–∏–≥–∞–µ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –æ–≥–æ–Ω—å",
        "–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞ –ø–æ—Ä—è–¥–æ–∫","–∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å –±–∞–ª–∞–Ω—Å","–ø–æ–¥–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–∞—Å—Ç—å","—Ç–æ–ª–∫–∞–µ—Ç –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º"]

def moon_phase()->str:
    jd=swe.julday(*dt.datetime.utcnow().timetuple()[:3])
    sun=swe.calc_ut(jd,swe.SUN)[0][0]; moon=swe.calc_ut(jd,swe.MOON)[0][0]
    phase=((moon-sun+360)%360)/360; illum=round(abs(math.cos(math.pi*phase))*100)
    name="–ù–æ–≤–æ–ª—É–Ω–∏–µ" if illum<5 else "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞" if phase<.5 else "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ" if illum>95 else "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞"
    sign=int(moon//30)
    return f"{name} –≤ {SIGNS[sign]} ({illum} %) ‚Äî {EFFECT[sign]}"

def planet_parade()->Optional[str]:
    jd=swe.julday(*dt.datetime.utcnow().timetuple()[:3])
    lons=sorted(swe.calc_ut(jd,b)[0][0] for b in
                (swe.MERCURY,swe.VENUS,swe.MARS,swe.JUPITER,swe.SATURN))
    best=min((lons[i+2]-lons[i])%360 for i in range(len(lons)-2))
    return "–ú–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç" if best<90 else None

def eta_aquarids()->str:
    return "Eta Aquarids (–º–µ—Ç–µ–æ—Ä—ã)" if 120<=dt.datetime.utcnow().timetuple().tm_yday<=140 else ""

def astro_events()->List[str]:
    ev=[moon_phase()]
    if planet_parade(): ev.append("–ú–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç")
    if ea:=eta_aquarids(): ev.append(ea)
    return [e for e in ev if e]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 5.  GPT  (–≤—ã–≤–æ–¥ + —Å–æ–≤–µ—Ç—ã) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CULPRITS={
    "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ":       ("üå°Ô∏è", ["üíß –ü–µ–π—Ç–µ –≤–æ–¥—É","üò¥ –î–Ω—ë–º 15-–º–∏–Ω –æ—Ç–¥—ã—Ö","ü§∏ –ù–µ–∂–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞"]),
    "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏":        ("üß≤", ["üßò –î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞","üåø –ß–∞–π —Å –º–µ–ª–∏—Å—Å–æ–π","üôÖ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–∞"]),
    "—Ç—É–º–∞–Ω":                 ("üåÅ", ["üöó –í–æ–¥–∏—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ","üî¶ –°–≤–µ—Ç–ª–∞—è –æ–¥–µ–∂–¥–∞"]),
    "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä":         ("üí®", ["üß£ –ó–∞—Ö–≤–∞—Ç–∏—Ç–µ —à–∞—Ä—Ñ","üö∂ –ö–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞"]),
    "—Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ú–µ—Ä–∫—É—Ä–∏–π": ("ü™ê", ["‚úçÔ∏è –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã","üòå –¢–µ—Ä–ø–µ–Ω–∏–µ ‚Äî –≤–∞—à –¥—Ä—É–≥"]),
    "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç":     ("‚ú®", ["üî≠ –í–∑–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ –Ω–µ–±–æ","üì∏ –§–æ—Ç–æ –∑–∞–∫–∞—Ç–∞"]),
}
FACTS=[
    "11 –º–∞—è ‚Äî –î–µ–Ω—å –º–æ—Ä—Å–∫–æ–≥–æ –±—Ä–∏–∑–∞ –Ω–∞ –ö–∏–ø—Ä–µ üå¨Ô∏è",
    "–í 1974-–º –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ –æ—Ç–∫—Ä—ã–ª—Å—è –ø–µ—Ä–≤—ã–π –ø–ª—è–∂–Ω—ã–π –±–∞—Ä üçπ",
    "–ù–∞ –ö–∏–ø—Ä–µ 340 —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –¥–Ω–µ–π –≤ –≥–æ–¥—É ‚Äî –∑–∞–≤—Ç—Ä–∞ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö ‚òÄÔ∏è",
]

def gpt_blurb(culprit:str)->tuple[str,List[str]]:
    if not OPENAI_KEY:
        tips=random.sample(CULPRITS[culprit][1],2)
        return f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ", tips
    prompt=(f"–ù–∞–ø–∏—à–∏ –û–î–ù–£ —Å—Ç—Ä–æ–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è –±—É–∫–≤–∞–ª—å–Ω–æ: ¬´–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}!¬ª. "
            "–ü–æ—Å–ª–µ —Ç–æ—á–∫–∏ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∑–∏—Ç–∏–≤ ‚â§12 —Å–ª–æ–≤. –ó–∞—Ç–µ–º —Ä–æ–≤–Ω–æ 3 bullet-—Å–æ–≤–µ—Ç–∞ (‚â§12 —Å–ª–æ–≤) —Å —ç–º–æ–¥–∑–∏.")
    txt=OpenAI(api_key=OPENAI_KEY).chat.completions.create(
        model="gpt-4o-mini",temperature=0.6,
        messages=[{"role":"user","content":prompt}]
    ).choices[0].message.content.strip().splitlines()
    line=[l.strip() for l in txt if l.strip()]
    summary=line[0]
    tips=[l.lstrip("-‚Ä¢ ").strip() for l in line[1:4]]
    if len(tips)<2: tips=random.sample(CULPRITS[culprit][1],2)
    return summary,tips

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 6.  BUILD MESSAGE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    # 1. –ë–µ—Ä—ë–º –ø–æ–≥–æ–¥—É –¥–ª—è –õ–∏–º–∞—Å—Å–æ–ª–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞)
    w = get_weather(LAT, LON)
    if not w:
        raise RuntimeError("Open-Meteo –∏ OWM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    # --- —Ä–∞–∑–±–∏—Ä–∞–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ ---
    if "current" in w:                                   # OpenWeather
        cur   = w["current"]
        day   = w["daily"][0]["temp"]
        cloud = clouds_word(cur.get("clouds", 0))
        rain  = "–Ω–µ –æ–∂–∏–¥–∞—é—Ç—Å—è" if w["daily"][0].get("rain", 0) == 0 else "–≤–æ–∑–º–æ–∂–µ–Ω –¥–æ–∂–¥—å"

        wind      = cur["wind_speed"] * 3.6              # ‚Üí –∫–º/—á
        wind_txt  = f"{wind:.1f} –∫–º/—á, {compass(cur['wind_deg'])}"
        press_val = float(cur["pressure"])
        day_max, night_min = day["max"], day["min"]

    else:                                                # Open-Meteo
        cw = w["current_weather"]
        dm = w["daily"]

        cloud = clouds_word(w["hourly"]["cloud_cover"][0])
        rain  = "–Ω–µ –æ–∂–∏–¥–∞—é—Ç—Å—è"                           # daily probability –Ω–µ—Ç
        wind      = cw["windspeed"]
        wind_txt  = f"{wind:.1f} –∫–º/—á, {compass(cw['winddirection'])}"
        press_val = float(w["hourly"]["surface_pressure"][0])
        day_max, night_min = dm["temperature_2m_max"][0], dm["temperature_2m_min"][0]

    # 2. –î–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –ø–æ 4 –≥–æ—Ä–æ–¥–∞–º –ö–∏–ø—Ä–∞
    temps: dict[str, float] = {}

    for city, (la, lo) in CITIES.items():
        cw_city = get_weather(la, lo)
        if not cw_city:
            continue

        # OpenWeather ‚Üí daily ‚Äî —Å–ø–∏—Å–æ–∫
        if isinstance(cw_city.get("daily"), list):
            try:
                temps[city] = cw_city["daily"][0]["temp"]["max"]
            except Exception:
                continue

        # Open-Meteo ‚Üí daily ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –º–∞—Å—Å–∏–≤–∞–º–∏
        elif isinstance(cw_city.get("daily"), dict):
            try:
                temps[city] = cw_city["daily"]["temperature_2m_max"][0]
            except Exception:
                continue

    if temps:                                # –∏–∑–±–µ–≥–∞–µ–º ValueError, –µ—Å–ª–∏ –≤—Å—ë –ø—É—Å—Ç–æ
        warm = max(temps, key=temps.get)
        cold = min(temps, key=temps.get)
    else:
        warm = cold = "‚Äî"

    # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ (–≤–æ–∑–¥—É—Ö / –ø—ã–ª—å—Ü–∞ / Kp / –®—É–º–∞–Ω / –≤–æ–¥–∞)
    air     = get_air()
    pol     = air["data"]["current"]["pollution"] if air else {}
    aqi     = pol.get("aqius", "‚Äî")
    pm25    = pol.get("p2") or (aqi_to_pm25(aqi) if isinstance(aqi, (int, float)) else "‚Äî")
    pm10    = pol.get("p1") or "‚Äî"
    kp      = get_kp()
    sst     = get_sst()
    pollen  = get_pollen()
    sch     = get_schumann()

    # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º ¬´–≤–∏–Ω–æ–≤–Ω–∏–∫–∞¬ª –¥–Ω—è
    if kp and kp >= 5:
        culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"
    elif press_val < 1007:
        culprit = "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"
    elif cloud == "—Ç—É–º–∞–Ω":
        culprit = "—Ç—É–º–∞–Ω"
    else:
        culprit = "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"

    summary, tips = gpt_blurb(culprit)

    # 5. –°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    P: list[str] = [
        f"üôÇ <b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ {TOMORROW.format('DD.MM.YYYY')}</b>",
        f"<b>–¢–µ–º–ø. –¥–Ω—ë–º:</b> –¥–æ {day_max:.1f} ¬∞C",
        f"<b>–¢–µ–º–ø. –Ω–æ—á—å—é:</b> –æ–∫–æ–ª–æ {night_min:.1f} ¬∞C",
        f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {cloud}",
        f"<b>–û—Å–∞–¥–∫–∏:</b> {rain}",
        f"<b>–í–µ—Ç–µ—Ä:</b> {wind_phrase(wind)} ({wind_txt})",
        f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {press_val:.0f} –≥–ü–∞",
        f"<i>–°–∞–º—ã–π —Ç—ë–ø–ª—ã–π –≥–æ—Ä–æ–¥:</i> {warm} ({temps.get(warm,'‚Äî'):.1f} ¬∞C)" if warm != '‚Äî' else "<i>–°–∞–º—ã–π —Ç—ë–ø–ª—ã–π –≥–æ—Ä–æ–¥:</i> ‚Äî",
        f"<i>–°–∞–º—ã–π –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –≥–æ—Ä–æ–¥:</i> {cold} ({temps.get(cold,'‚Äî'):.1f} ¬∞C)" if cold != '‚Äî' else "<i>–°–∞–º—ã–π –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –≥–æ—Ä–æ–¥:</i> ‚Äî",
        "‚Äî‚Äî‚Äî",
        "üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>",
        f"AQI {aqi} | PM2.5: {pm25} | PM10: {pm10}",
    ]

    # –ü—ã–ª—å—Ü–∞
    if pollen:
        idx = lambda v: ["–Ω–µ—Ç", "–Ω–∏–∑–∫–∏–π", "—É–º–µ—Ä–µ–Ω–Ω—ã–π", "–≤—ã—Å–æ–∫–∏–π",
                         "–æ—á. –≤—ã—Å–æ–∫–∏–π", "—ç–∫—Å—Ç—Ä–∏–º"][int(round(v))]
        P.append(
            f"üåø <b>–ü—ã–ª—å—Ü–∞</b>\n"
            f"–î–µ—Ä–µ–≤—å—è ‚Äî {idx(pollen['treeIndex'])} | "
            f"–¢—Ä–∞–≤—ã ‚Äî {idx(pollen['grassIndex'])} | "
            f"–°–æ—Ä–Ω—è–∫–∏ ‚Äî {idx(pollen['weedIndex'])}"
        )

    # K-index
    if kp is not None:
        state = "—Å–ø–æ–∫–æ–π–Ω—ã–π" if kp < 4 else "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π" if kp < 5 else "–±—É—Ä—è"
        P.append(f"üß≤ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\nK-index: {kp:.1f} ({state})")

    # –®—É–º–∞–Ω
    if "freq" in sch:
        P.append(f"üéµ <b>–®—É–º–∞–Ω:</b> ‚âà{sch['freq']:.1f} –ì—Ü ‚Ä¢ –∞–º–ø–ª–∏—Ç—É–¥–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞")
    else:
        P.append(f"üéµ <b>–®—É–º–∞–Ω:</b> {sch.get('msg', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")

    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã
    if sst:
        P.append(f"üåä <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã</b>\n–°–µ–π—á–∞—Å: {sst:.1f} ¬∞C")

    # –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    astro = astro_events()
    if astro:
        P.append("üåå <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n" + " | ".join(astro))

    # –í—ã–≤–æ–¥ + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    P += [
        "‚Äî‚Äî‚Äî",
        f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}",
        "‚Äî‚Äî‚Äî",
        "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>",
    ]
    P.extend(f"‚Ä¢ {t}" for t in tips)
    P += [
        "‚Äî‚Äî‚Äî",
        f"üìö {random.choice(FACTS)}"
    ]

    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 7.  SEND ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main():
    html=build_msg()
    logging.info("Preview: %s",html.replace('\n',' | ')[:250])
    try:
        await Bot(TOKEN).send_message(int(CHAT),html[:4096],
                                      parse_mode="HTML",disable_web_page_preview=True)
        logging.info("Message sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s",e); raise

if __name__=="__main__":
    asyncio.run(main())
