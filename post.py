#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VayboMeter 5.1  ‚Äî  ¬´–≤–µ—á–µ—Ä–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è¬ª –¥–ª—è Limassol (CY).
¬© 2025, MIT.  –ß–∏—Å—Ç—ã–π Python 3.11, –±–µ–∑ –∞—Å–∏–Ω—Ö-I/O —Ç–µ–ª–µ–≥—Ä–∞–º-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤.
–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
  ‚Ä¢ fetch_* ‚Ä¶ –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ API, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–∞–π–º–∞—É—Ç—ã + graceful-fallback
  ‚Ä¢ utils    ‚Ä¶ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É–≥–ª–∞ –≤–µ—Ç—Ä–∞, —Ü–≤–µ—Ç–æ–≤—ã—Ö —à–∫–∞–ª, —Ñ–æ—Ä–º–∞—Ç–µ—Ä–æ–≤
  ‚Ä¢ build_msg() ‚Üí HTML-—Å—Ç—Ä–æ–∫–∞ (<4096)
  ‚Ä¢ main()   ‚Ä¶ cron-—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
"""

from __future__ import annotations
import os, sys, json, math, random, textwrap, logging, datetime, requests, pendulum
from typing import Dict, Any, Tuple, List
from telegram import Bot

logging.basicConfig(
    level=logging.INFO, format="%(levelname)s: %(message)s", stream=sys.stdout
)
TZ = "Asia/Nicosia"
TODAY = pendulum.now(TZ).date()
TOMORROW = TODAY.add(days=1)
# -------------------------------------------------------  STATIC MAPS
CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca": (34.916, 33.624),
    "Nicosia": (35.170, 33.360),
    "Pafos": (34.776, 32.424),
}
WC = {0: "—è—Å–Ω–æ", 1: "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ", 2: "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", 3: "–ø–∞—Å–º—É—Ä–Ω–æ",
      45: "—Ç—É–º–∞–Ω", 48: "–∏–∑–º–æ—Ä–æ–∑—å / —Ç—É–º–∞–Ω", 51: "–º–æ—Ä–æ—Å—å", 61: "–¥–æ–∂–¥—å",
      71: "—Å–Ω–µ–≥", 95: "–≥—Ä–æ–∑–∞"}
COMPASS = ["N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW",
           "WSW","W","WNW","NW","NNW"]
FACTS = [
    "üìú 10 –º–∞—è 1570 –≥. –æ—Å–º–∞–Ω—Å–∫–∏–π —Ñ–ª–æ—Ç –Ω–∞—á–∞–ª –æ—Å–∞–¥—É –ö–∏–ø—Ä–∞ ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º!",
    "üìú –í —ç—Ç–æ—Ç –¥–µ–Ω—å 1838 –≥. –Ω–∞ –ö–∏–ø—Ä–µ –∑–∞—Ü–≤–µ–ª–∏ –ø–µ—Ä–≤—ã–µ —Ü–∏—Ç—Ä—É—Å–æ–≤—ã–µ –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏.",
]
SCHUMANN_JOKES = [
    "–¥–∞—Ç—á–∏–∫–∏ –º–æ–ª—á–∞—Ç ‚Äî —Ä–µ—Ç—Ä–∏—Ç üå±",
    "–∫–æ–ª–µ–±–∞–Ω–∏—è –Ω–µ–∑–∞–º–µ—Ç–Ω—ã ‚Äî –ó–µ–º–ª—è –º–µ–¥–∏—Ç–∏—Ä—É–µ—Ç üßò‚Äç‚ôÇÔ∏è",
    "SR-–≥—Ä–∞—Ñ–∏–∫ —Ä–æ–≤–Ω—ã–π, –∫–∞–∫ —É—Ç—Ä–µ–Ω–Ω–∏–π flat white ‚òï",
]

# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  UTILS
def deg2compass(deg: float) -> str:
    if deg is None:
        return "‚Äî"
    idx = int((deg / 22.5) + .5) % 16
    return COMPASS[idx]

def aqi_color(val: int) -> str:
    return ("üü¢", "üü°", "üü†", "üî¥", "üü£")[
        0 if val <=50 else 1 if val<=100 else 2 if val<=150 else 3 if val<=200 else 4]

def pick_culprit(p: float, kp: float, wind: float, moon_age: float)->Tuple[str,str]:
    """–≤–µ—Ä–Ω—ë—Ç (–≤–∏–Ω–æ–≤–Ω–∏–∫, —ç–º–æ–¥–∑–∏)"""
    pool = []
    if p and p<1005: pool.append(("–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ", "üìâ"))
    if kp and kp>=4: pool.append(("–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è", "üß≤"))
    if wind and wind>=25: pool.append(("—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä", "üí®"))
    if 23<=moon_age<=26: pool.append(("—Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ú–µ—Ä–∫—É—Ä–∏–π", "ü™ê"))
    return random.choice(pool or [("–ø–æ–≥–æ–¥—É", "üå¶")])

def safe(val, dash="‚Äî"):
    return dash if (val is None or val == "" or (isinstance(val,float) and math.isnan(val))) else val

# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  FETCHERS
HEADERS = {"User-Agent":"vaybometer/5.1"}
def fetch_openmeteo(lat,lon) -> Dict[str,Any]:
    url="https://api.open-meteo.com/v1/forecast"
    params=dict(
        latitude=lat, longitude=lon, timezone="auto", forecast_days=2,
        current_weather="true",
        daily="temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,weathercode,pressure_msl,precipitation_probability_max",
    )
    r=requests.get(url, params=params, timeout=10, headers=HEADERS)
    r.raise_for_status()
    return r.json()

def fetch_airvisual() -> Dict[str,Any]:
    key=os.getenv("AIRVISUAL_KEY")
    if not key: return {}
    url=f"https://api.airvisual.com/v2/nearest_city?key={key}"
    return requests.get(url,timeout=10).json().get("data",{})

def fetch_kp() -> float|None:
    try:
        url="https://services.swpc.noaa.gov/products/noaa-planetary-k-index.json"
        arr=requests.get(url,timeout=10).json()
        return float(arr[-1][1])  # –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞
    except Exception as e:
        logging.warning("kp fetch: %s",e); return None

def fetch_schumann() -> Tuple[float|None,float|None]|str:
    urls=[
        "https://schumann-resonances.s3.amazonaws.com/latest.csv",
        "https://gci.mixonic.com/SR_latest.csv",
    ]
    for u in urls:
        try:
            txt=requests.get(u,timeout=10).text.strip().splitlines()
            head,*rows=txt
            f,a=map(float, rows[-1].split(",")[1:3]); return f,a
        except Exception:
            continue
    return random.choice(SCHUMANN_JOKES)

def fetch_pollen() -> Dict[str,str]:
    key=os.getenv("TOMORROW_KEY")
    if not key: return {}
    url="https://api.tomorrow.io/v4/weather/forecast"
    params=dict(location="34.707,33.022", apikey=key, timesteps="1d",
                fields="pollenTreeIndex,pollenGrassIndex,pollenWeedIndex")
    try:
        js=requests.get(url,params=params,timeout=10).json()
        d=js["timelines"]["daily"][0]["values"]
        scale=["üü¢ –Ω–∏–∑–∫–∏–π","üü° —É–º–µ—Ä–µ–Ω–Ω—ã–π","üü† –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π","üî¥ –≤—ã—Å–æ–∫–∏–π","üü£ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π"]
        lvl=lambda v: scale[min(int(v),4)]
        return {
            "–î–µ—Ä–µ–≤—å—è": lvl(d["pollenTreeIndex"]),
            "–¢—Ä–∞–≤—ã": lvl(d["pollenGrassIndex"]),
            "–°–æ—Ä–Ω—è–∫–∏": lvl(d["pollenWeedIndex"]),
        }
    except Exception as e:
        logging.warning("pollen: %s",e); return {}

# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ASTRO
def moon_phase() -> Tuple[int,str,float]:
    now=pendulum.now(TZ)
    age=((now-naive(now)).in_days())%29.53
    pct=int(age/29.53*100)
    sign= ["‚ôà","‚ôâ","‚ôä","‚ôã","‚ôå","‚ôç","‚ôé","‚ôè","‚ôê","‚ôë","‚ôí","‚ôì"
          ][int(((now.datetime.timestamp())//(2.46e6))%12)]
    return pct,sign,age

def naive(dt:pendulum.DateTime)->pendulum.DateTime:
    return pendulum.datetime(dt.year,dt.month,dt.day)

def astro_events()->List[str]:
    pct,symbol,age=moon_phase()
    res=[f"–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞ {symbol} ({pct} %)"]
    # –ø—Ä–æ—Å—Ç—ã–µ —Ö–∞—Ä–¥–∫–æ–¥-—Å–æ–±—ã—Ç–∏—è
    res.append("–ú–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç")
    res.append("Eta Aquarids (–º–µ—Ç–µ–æ—Ä—ã)")
    return res

# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë BUILD MESSAGE
def build_msg() -> str:
    om=fetch_openmeteo(*CITIES["Limassol"])
    daily=om["daily"]; cur=om["current_weather"]
    wcode=daily["weathercode"][1] if len(daily["weathercode"])>1 else cur["weathercode"]
    desc=WC.get(int(wcode),"–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è")

    press=daily.get("pressure_msl",["‚Äî","‚Äî"])[1]
    precip=daily.get("precipitation_probability_max",["‚Äî","‚Äî"])[1]
    rain_txt="–æ—Å–∞–¥–∫–∏ ‚â§{} %".format(precip) if isinstance(precip,(int,float)) else "–Ω–µ –æ–∂–∏–¥–∞—é—Ç—Å—è"

    windspd=cur.get("windspeed"); winddir=deg2compass(cur.get("winddirection"))
    temps={}
    for city,(lat,lon) in CITIES.items():
        try:
            js=fetch_openmeteo(lat,lon); temps[city]=js["daily"]["temperature_2m_max"][1]
        except Exception: temps[city]=None
    warm=max((k for k,v in temps.items() if v), key=lambda k:temps[k])
    cold=min((k for k,v in temps.items() if v), key=lambda k:temps[k])

    aqi=fetch_airvisual(); aqi_val=int(aqi.get("current",{}).get("pollution",{}).get("aqius",64))
    aqi_line=f"AQI {aqi_color(aqi_val)} {aqi_val}"
    pm2=aqi.get("current",{}).get("pollution",{}).get("p2")
    pm10=aqi.get("current",{}).get("pollution",{}).get("p1")

    pollen=fetch_pollen()
    kp=fetch_kp()
    sch=fetch_schumann()
    pct,sign,age=moon_phase()
    culprit,emo=pick_culprit(press if isinstance(press,(int,float)) else None,kp,windspd,age)

    # ---- —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ -----------------------------------
    lines=[
        f"üåû <b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ {TOMORROW.format('DD.MM.YYYY')}</b>",
        f"<b>–¢–µ–º–ø. –¥–Ω—ë–º:</b> –¥–æ {safe(daily['temperature_2m_max'][1])} ¬∞C",
        f"<b>–¢–µ–º–ø. –Ω–æ—á—å—é:</b> –æ–∫–æ–ª–æ {safe(daily['temperature_2m_min'][1])} ¬∞C",
        f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {desc}",
        f"<b>–û—Å–∞–¥–∫–∏:</b> {rain_txt}",
        f"<b>–í–µ—Ç–µ—Ä:</b> {safe(windspd)} –∫–º/—á, {winddir}",
        f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {safe(round(press,1) if isinstance(press,float) else press)} –≥–ü–∞",
        f"<i>–°–∞–º—ã–π —Ç—ë–ø–ª—ã–π –≥–æ—Ä–æ–¥:</i> {warm} ({temps[warm]:.1f} ¬∞C)",
        f"<i>–°–∞–º—ã–π –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –≥–æ—Ä–æ–¥:</i> {cold} ({temps[cold]:.1f} ¬∞C)",
        "‚Äî‚Äî‚Äî",
        f"üè≠ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>",
        f"{aqi_line} | PM2.5: {safe(pm2)} | PM10: {safe(pm10)}",
        "üåø <b>–ü—ã–ª—å—Ü–∞</b>",
        (" | ".join(f"{k}: {v}" for k,v in pollen.items()) if pollen else "–∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"),
        "üß≤ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>",
        f"Kp {safe(kp)} {'' if kp is None else '(—Å–ø–æ–∫–æ–π–Ω–æ)' if kp<4 else '(–±—É—Ä—è)'}",
        "üé∂ <b>–†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞</b>",
        f"{sch if isinstance(sch,str) else f'{sch[0]:.1f} –ì—Ü ¬∑ A={sch[1]:.1f}'}",
        "üåä <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã</b>",
        f"–°–µ–π—á–∞—Å: {safe(cur.get('temperature'))} ¬∞C",
        "üîÆ <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è</b>",
        " | ".join(astro_events()),
        "‚Äî‚Äî‚Äî",
        "üìù <b>–í—ã–≤–æ–¥</b>",
        f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫ ‚Äî –≤–∏–Ω–æ–≤–Ω–∏–∫: <i>{culprit}</i>! {emo}",
        "‚Äî‚Äî‚Äî",
        "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>",
        "‚Ä¢ üíß –ü–µ–π—Ç–µ –≤–æ–¥—É ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –¥–∞–≤–ª–µ–Ω–∏–∏" if culprit=="–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ" else "",
        "‚Ä¢ üõå –í—ã—Å—ã–ø–∞–π—Ç–µ—Å—å ‚Äî –º–∞–≥–Ω–∏—Ç–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Å–Ω–∏–∂–∞—é—Ç —Ç–æ–Ω—É—Å" if culprit=="–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è" else "",
        "‚Ä¢ üí® –ó–∞—Ö–≤–∞—Ç–∏—Ç–µ —à–∞—Ä—Ñ ‚Äî –≤–µ—Ç–µ—Ä –º–æ–∂–µ—Ç —É—Å–∏–ª–∏–≤–∞—Ç—å—Å—è" if culp           lit=="—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä" else "",
        "‚Ä¢ ‚ú® –ù–æ—á—å—é –≤–∑–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ –Ω–µ–±–æ ‚Äî –º–µ—Ç–µ–æ—Ä—ã Eta Aquarids!" ,
        "‚Ä¢ üåÖ –†–∞—Å—Å–≤–µ—Ç –∑–∞–≤—Ç—Ä–∞ –≤ {:02d}:{:02d}".format(*map(int,cur["time"].split("T")[1].split(":")[:2])),
        random.choice(FACTS),
    ]
    # —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    html="\n".join(l for l in lines if l)
    logging.info("Preview: %s", html.replace('\n',' | ')[:230])
    return html

# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  MAIN
async def main():
    TOKEN=os.getenv("TELEGRAM_TOKEN"); CHAT=os.getenv("CHANNEL_ID")
    if not TOKEN or not CHAT:
        logging.error("Missing TELEGRAM_TOKEN / CHANNEL_ID"); return
    html=build_msg()
    await Bot(TOKEN).send_message(
        int(CHAT), html[:4096], parse_mode="HTML", disable_web_page_preview=True)

if __name__ == "__main__":
    import asyncio, warnings
    warnings.filterwarnings("ignore", category=FutureWarning)
    asyncio.run(main())
