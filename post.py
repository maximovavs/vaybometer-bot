#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import asyncio
import logging
import requests
from typing import Optional, Tuple, Dict, Any

import pendulum
from telegram import Bot, error as tg_err

from utils import (
    compass, clouds_word, wind_phrase, safe, get_fact,
    WEATHER_ICONS, AIR_EMOJI, pressure_trend, kp_emoji, pm_color
)
from weather import get_weather
from air import get_air, get_sst, get_kp
from pollen import get_pollen
from schumann import get_schumann
from astro import astro_events
from gpt import gpt_blurb

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Constants ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ           = pendulum.timezone("Asia/Nicosia")
TODAY        = pendulum.now(TZ).date()
TOMORROW     = TODAY.add(days=1)
TOKEN        = os.environ["TELEGRAM_TOKEN"]
CHAT_ID      = int(os.environ["CHANNEL_ID"])
UNSPLASH_KEY = os.getenv("UNSPLASH_KEY")

POLL_QUESTION = "–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î"
POLL_OPTIONS  = ["üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏", "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
                 "üò¥ –°–ª–µ–≥–∫–∞ –≤—è–ª—ã–π(–∞—è)", "ü§í –í—Å—ë –ø–ª–æ—Ö–æ"]

CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}


def fetch_tomorrow_temps(lat: float, lon: float) -> Tuple[Optional[float], Optional[float]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (max_temp, min_temp) –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–º –∫ Open-Meteo.
    """
    date = TOMORROW.to_date_string()
    url = "https://api.open-meteo.com/v1/forecast"
    params = {
        "latitude":   lat,
        "longitude":  lon,
        "timezone":   TZ.name,
        "daily":      "temperature_2m_max,temperature_2m_min",
        "start_date": date,
        "end_date":   date,
    }
    r = requests.get(url, params=params, timeout=15)
    r.raise_for_status()
    j = r.json().get("daily", {})
    tmax = j.get("temperature_2m_max", [])
    tmin = j.get("temperature_2m_min", [])
    return (tmax[0] if tmax else None,
            tmin[0] if tmin else None)


def build_msg() -> str:
    P: list[str] = []

    # 1) –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–µ –º–∞–∫—Å/–º–∏–Ω –¥–ª—è –õ–∏–º–∞—Å—Å–æ–ª–∞
    lat, lon = CITIES["Limassol"]
    day_max, night_min = fetch_tomorrow_temps(lat, lon)
    if day_max is None or night_min is None:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞")

    # 2) –¢–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è
    w = get_weather(lat, lon) or {}
    strong = w.get("strong_wind", False)
    fog    = w.get("fog_alert",   False)

    cur = w.get("current") or w.get("current_weather", {})
    wind_kmh = cur.get("windspeed") or cur.get("wind_speed", 0.0)
    wind_deg = cur.get("winddirection") or cur.get("wind_deg", 0.0)

    press = cur.get("pressure") \
        or w.get("hourly", {}).get("surface_pressure", [1013])[0]

    clouds_pct = cur.get("clouds")
    if clouds_pct is None:
        clouds_pct = w.get("hourly", {}).get("cloud_cover", [0])[0]
    cloud_w = clouds_word(clouds_pct)

    avg_line   = f"üå° –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø.: {((day_max + night_min)/2):.0f} ¬∞C"
    press_line = f"üîΩ –î–∞–≤–ª–µ–Ω–∏–µ: {press:.0f} –≥–ü–∞ {pressure_trend(w)}"

    icon = WEATHER_ICONS.get(cloud_w, "üå¶Ô∏è")
    P += [
        f"{icon} <b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ {TOMORROW.format('DD.MM.YYYY')}</b>",
        avg_line,
        f"üìà –¢–µ–º–ø. –¥–Ω—ë–º/–Ω–æ—á—å—é: {day_max:.1f}/{night_min:.1f} ¬∞C",
        f"üå§ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {cloud_w}",
        f"üí® –í–µ—Ç–µ—Ä: {wind_phrase(wind_kmh)} ({wind_kmh:.1f} –∫–º/—á, {compass(wind_deg)})",
        press_line,
    ]
    if strong: P.append("‚ö†Ô∏è –í–µ—Ç–µ—Ä –º–æ–∂–µ—Ç —É—Å–∏–ª–∏—Ç—å—Å—è")
    if fog:    P.append("üåÅ –í–æ–∑–º–æ–∂–µ–Ω —Ç—É–º–∞–Ω, –≤–æ–¥–∏—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ")
    P.append("‚Äî‚Äî‚Äî")

    # 3) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å)
    temps: Dict[str, Tuple[float, float]] = {}
    for city, (la, lo) in CITIES.items():
        d, n = fetch_tomorrow_temps(la, lo)
        if d is not None:
            temps[city] = (d, n or d)

    P.append("üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å)</b>")
    medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£"]
    for i, (city, (d, n)) in enumerate(
            sorted(temps.items(), key=lambda kv: kv[1][0], reverse=True)[:4]):
        P.append(f"{medals[i]} {city}: {d:.1f}/{n:.1f} ¬∞C")
    P.append("‚Äî‚Äî‚Äî")

    # 4) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ + –ø—ã–ª—å—Ü–∞
    air = get_air() or {}
    P.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    lvl = air.get("lvl", "–Ω/–¥")
    P.append(
        f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | "
        f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}"
    )

    pollen = get_pollen() or {}
    if pollen:
        P += [
            "üåø <b>–ü—ã–ª—å—Ü–∞</b>",
            f"–î–µ—Ä–µ–≤—å—è: {pollen['tree']} | –¢—Ä–∞–≤—ã: {pollen['grass']} | "
            f"–°–æ—Ä–Ω—è–∫–∏: {pollen['weed']} ‚Äî —Ä–∏—Å–∫ {pollen['risk']}"
        ]
    P.append("‚Äî‚Äî‚Äî")

    # 5) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞, –®—É–º–∞–Ω, –≤–æ–¥–∞, –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    kp, kp_state = get_kp()
    sch          = get_schumann()
    sst          = get_sst()
    astro        = astro_events()

    if kp is not None:
        P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({kp_state})")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")

    if "freq" in sch:
        trend = "‚Üë" if sch.get("high") else "‚Üí"
        P.append(f"üéµ –®—É–º–∞–Ω: {sch['freq']:.1f} –ì—Ü {trend}")
    else:
        P.append(f"üéµ –®—É–º–∞–Ω: {sch.get('msg','–Ω/–¥')}")

    if sst is not None:
        P.append(f"üåä –¢–µ–º–ø. –≤–æ–¥—ã (Medit.): {sst:.1f} ¬∞C (Open-Meteo)")

    if astro:
        P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b> ‚Äì " + " | ".join(astro))
    P.append("‚Äî‚Äî‚Äî")

    # 6) –í—ã–≤–æ–¥ + —Å–æ–≤–µ—Ç—ã
    if   fog:        culprit = "—Ç—É–º–∞–Ω"
    elif kp_state=="–±—É—Ä—è": culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"
    elif press <1007: culprit = "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"
    elif strong:     culprit = "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä"
    else:            culprit = "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"

    summary, tips = gpt_blurb(culprit)
    P.append(f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    for t in tips:
        P.append(f"‚Ä¢ {t}")
    P.append("‚Äî‚Äî‚Äî")
    P.append(f"üìö {get_fact(TOMORROW)}")

    return "\n".join(P)


async def send_main_post(bot: Bot) -> None:
    html = build_msg()
    logging.info("Preview: %s", html.replace("\n"," | ")[:200])
    try:
        await bot.send_message(
            CHAT_ID,
            html,
            parse_mode="HTML",
            disable_web_page_preview=True,
        )
        logging.info("Message sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise


async def send_poll_if_friday(bot: Bot) -> None:
    if pendulum.now(TZ).weekday() == 4:
        try:
            await bot.send_poll(
                CHAT_ID,
                question=POLL_QUESTION,
                options=POLL_OPTIONS,
                is_anonymous=False,
                allows_multiple_answers=False,
            )
        except tg_err.TelegramError as e:
            logging.warning("Poll send error: %s", e)


async def fetch_unsplash_photo() -> Optional[str]:
    if not UNSPLASH_KEY:
        return None
    url = "https://api.unsplash.com/photos/random"
    resp = requests.get(
        url,
        params={"query":"cyprus coast sunset","client_id":UNSPLASH_KEY},
        timeout=15
    )
    return resp.json().get("urls",{}).get("regular")


async def send_photo(bot: Bot, photo_url: str) -> None:
    try:
        await bot.send_photo(CHAT_ID, photo=photo_url, caption="–§–æ—Ç–æ –¥–Ω—è ‚Ä¢ Unsplash")
    except tg_err.TelegramError as e:
        logging.warning("Photo send error: %s", e)


async def main() -> None:
    bot = Bot(token=TOKEN)
    await send_main_post(bot)
    await send_poll_if_friday(bot)
    if UNSPLASH_KEY and (TODAY.day % 3 == 0):
        if photo := await fetch_unsplash_photo():
            await send_photo(bot, photo)
    logging.info("All tasks done ‚úì")


if __name__ == "__main__":
    asyncio.run(main())
