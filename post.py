#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
post.py ‚Äî –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç VayboMeter-–±–æ—Ç–∞.

–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—á–µ—Ä–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑:
1) –ü–æ–≥–æ–¥–∞, –º–æ—Ä–µ, –≤–æ–∑–¥—É—Ö, –ø—ã–ª—å—Ü–∞, –®—É–º–∞–Ω, –≥–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞
2) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å, –ø–æ–≥–æ–¥–∞)
3) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—Ñ–∞–∑–∞ –õ—É–Ω—ã + 3 —Å–æ–≤–µ—Ç–∞ + VoC)
4) GPT-–≤—ã–≤–æ–¥ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ gpt_blurb
5) –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –º–µ—Å—Ç–µ / –¥–∞—Ç–µ
"""

from __future__ import annotations
import os
import asyncio
import logging
import json
from pathlib import Path
from typing import Dict, Any, Optional, Tuple

import pendulum
import requests
from requests.exceptions import RequestException
from telegram import Bot, error as tg_err

from utils import (
    compass, clouds_word, get_fact,
    AIR_EMOJI, pm_color, kp_emoji, pressure_trend
)
from weather import get_weather, fetch_tomorrow_temps
from air     import get_air, get_sst, get_kp
from pollen  import get_pollen
from schumann import get_schumann
from astro    import astro_events
from gpt      import gpt_blurb
from lunar    import get_day_lunar_info

# ‚îÄ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ       = pendulum.timezone("Asia/Nicosia")
TODAY    = pendulum.now(TZ).date()
TOMORROW = TODAY.add(days=1)

TOKEN   = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID = int(os.getenv("CHANNEL_ID", 0))

# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ (–¥–Ω./–Ω–æ—á—å)
CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
    "Troodos" : (34.916, 32.823),
}

# –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º WMO-–∫–æ–¥—ã –≤ —ç–º–æ–¥–∂–∏/—Å—Ç—Ä–æ–∫—É
WMO_DESC = {
    0:   "‚òÄÔ∏è —è—Å–Ω–æ",
    1:   "üå§ –º–∞–ª. –æ–±–ª–∞–∫–æ–≤",
    2:   "‚õÖÔ∏è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    3:   "‚òÅÔ∏è –ø–∞—Å–º—É—Ä–Ω–æ",
    45:  "üå´ —Ç—É–º–∞–Ω",
    48:  "üå´ –∏–∑–º–æ—Ä–æ–∑—å",
    51:  "üåß –º–æ—Ä–æ—Å—å",
    61:  "üåß –¥–æ–∂–¥—å",
    71:  "‚ùÑÔ∏è —Å–Ω–µ–≥",
    95:  "‚õà –≥—Ä–æ–∑–∞",
}
def code_desc(code: int) -> str:
    return WMO_DESC.get(code, "‚Äî")


# ‚îÄ‚îÄ‚îÄ Schumann helper ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_schumann_with_fallback() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ Schumann-–¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –Ω–µ—Ç ¬´—Å–≤–µ–∂–∏—Ö¬ª ‚Äî —á–∏—Ç–∞–µ–º –∏–∑ cached —Ñ–∞–π–ª–∞ schumann_hourly.json,
    —Å—á–∏—Ç–∞–µ–º —Ç—Ä–µ–Ω–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ ¬´–∫—ç—à¬ª.
    """
    sch = get_schumann()
    if sch.get("freq") is not None:
        # —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –ø–æ–º–µ—á–∞–µ–º cached=False
        sch["cached"] = False
        return sch

    # fallback: –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 –ø—É–Ω–∫—Ç–∞ –∏–∑ schumann_hourly.json
    cache_path = Path(__file__).parent / "schumann_hourly.json"
    if cache_path.exists():
        try:
            arr = json.loads(cache_path.read_text(encoding="utf-8"))
            if arr:
                last = arr[-1]
                pts = arr[-24:]
                freqs = [p["freq"] for p in pts if p.get("freq") is not None]
                if len(freqs) >= 2:
                    avg   = sum(freqs[:-1]) / (len(freqs) - 1)
                    delta = freqs[-1] - avg
                    trend = "‚Üë" if delta >= 0.1 else "‚Üì" if delta <= -0.1 else "‚Üí"
                else:
                    trend = "‚Üí"
                return {
                    "freq":   round(last["freq"], 2),
                    "amp":    round(last["amp"], 1),
                    "trend":  trend,
                    "cached": True,
                }
        except Exception as e:
            logging.warning("Schumann fallback parse error: %s", e)

    return sch

def schumann_line(sch: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É ¬´–®—É–º–∞–Ω¬ª: —Ü–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    üî¥ –µ—Å–ª–∏ freq < 7.6, üü£ –µ—Å–ª–∏ > 8.1, üü¢ –≤ –Ω–æ—Ä–º–µ (7.6‚Äì8.1).
    –ü–ª—é—Å –∞–º–ø–ª–∏—Ç—É–¥–∞ –∏ —Ç—Ä–µ–Ω–¥.
    """
    if sch.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"
    f = sch["freq"]
    amp = sch["amp"]
    if f < 7.6:
        emoji = "üî¥"
    elif f > 8.1:
        emoji = "üü£"
    else:
        emoji = "üü¢"
    return f"{emoji} –®—É–º–∞–Ω: {f:.2f} –ì—Ü / {amp:.1f} pT {sch['trend']}"


# ‚îÄ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–æ–π –±–∏–ª–¥–µ—Ä —Ç–µ–∫—Å—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    """
    –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å –±–ª–æ–∫ ¬´–≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø–æ—Å—Ç–∞¬ª:
    1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
    2) –¢–µ–º–ø –º–æ—Ä—è (–¥–ª—è Limassol –ø–æ –¥–µ—Ñ–æ–ª—Ç—É)
    3) –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (Limassol)
    4) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (Limassol, Larnaca, Nicosia, Pafos, Troodos)
    5) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ + –ø—ã–ª—å—Ü–∞
    6) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ (Kp) + –®—É–º–∞–Ω
    7) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    8) GPT-–≤—ã–≤–æ–¥ (¬´–í—ã–≤–æ–¥¬ª + ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª)
    9) –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
    """
    P: list[str] = []

    # 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
    P.append(f"<b>üåÖ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({TOMORROW.format('DD.MM.YYYY')})</b>")

    # 2) –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è ‚Äî –¥–ª—è –Ω–∞—à–µ–π –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ Limassol
    if (sst := get_sst()) is not None:
        P.append(f"üåä –¢–µ–º–ø. –º–æ—Ä—è: {sst:.1f} ¬∞C")

    # 3) –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è Limassol –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    lat, lon = CITIES["Limassol"]
    day_max, night_min = fetch_tomorrow_temps(lat, lon, tz=TZ.name)
    w = get_weather(lat, lon) or {}
    cur = w.get("current_weather", {}) or w.get("current", {}) or {}

    avg_temp = (day_max + night_min)/2 if (day_max is not None and night_min is not None) else cur.get("temperature", 0.0)
    wind_kmh = cur.get("windspeed") or cur.get("wind_speed", 0.0)
    wind_deg = cur.get("winddirection") or cur.get("wind_deg", 0.0)
    clouds   = cur.get("clouds") or cur.get("weathercode", 0)  # –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è WMO-–∫–æ–¥
    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–Ω–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å:
    try:
        clouds_pct = cur.get("clouds", 0)
    except:
        clouds_pct = 0

    # –î–∞–≤–ª–µ–Ω–∏–µ –∏ —Ç—Ä–µ–Ω–¥ –ø–æ Open-Meteo hourly
    press     = cur.get("pressure") or w.get("hourly", {}).get("surface_pressure", [1013])[0]
    press_arr = w.get("hourly", {})
    arrow = pressure_trend(press_arr)

    P.append(
        f"üå°Ô∏è –°—Ä. —Ç–µ–º–ø: {avg_temp:.0f} ¬∞C ‚Ä¢ {clouds_word(clouds_pct)} "
        f"‚Ä¢ üí® {wind_kmh:.1f} –∫–º/—á ({compass(wind_deg)}) "
        f"‚Ä¢ üíß {press:.0f} –≥–ü–∞ {arrow}"
    )
    P.append("‚Äî‚Äî‚Äî")

    # 4) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å, –ø–æ–≥–æ–¥–∞) ‚Äî —Ç–æ–ø-5 –ø–æ –¥–Ω—é
    temps: Dict[str, Tuple[float,float,int]] = {}
    for city, (la, lo) in CITIES.items():
        d, n = fetch_tomorrow_temps(la, lo, tz=TZ.name)
        if d is None:
            continue
        wcodes = get_weather(la, lo) or {}
        # WMO-–∫–æ–¥ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞:
        code_arr = wcodes.get("daily", {}).get("weathercode", [])
        code_tmr = code_arr[1] if len(code_arr) > 1 else (code_arr[0] if code_arr else 0)
        temps[city] = (d, n or d, code_tmr)

    if temps:
        P.append("üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å, –ø–æ–≥–æ–¥–∞)</b>")
        medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 5
        sorted_cities = sorted(temps.items(), key=lambda kv: kv[1][0], reverse=True)[:5]
        for i, (city, (d, n, code)) in enumerate(sorted_cities):
            P.append(f"{medals[i]} {city}: {d:.1f}/{n:.1f} ¬∞C, {code_desc(code)}")
        P.append("‚Äî‚Äî‚Äî")

    # 5) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ + –ø—ã–ª—å—Ü–∞
    air = get_air() or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(
        f"{AIR_EMOJI.get(lvl, '‚ö™')} {lvl} (AQI {air.get('aqi', '–Ω/–¥')}) | "
        f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}"
    )
    if (pollen := get_pollen()):
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(
            f"–î–µ—Ä–µ–≤—å—è: {pollen['tree']} | –¢—Ä–∞–≤—ã: {pollen['grass']} | "
            f"–°–æ—Ä–Ω—è–∫–∏: {pollen['weed']} ‚Äî —Ä–∏—Å–∫ {pollen['risk']}"
        )
    P.append("‚Äî‚Äî‚Äî")

    # 6) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ + –®—É–º–∞–Ω
    kp, kp_state = get_kp()
    if kp is not None:
        P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({kp_state})")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")

    P.append(schumann_line(get_schumann_with_fallback()))
    P.append("‚Äî‚Äî‚Äî")

    # 7) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (–Ω–∞ –∑–∞–≤—Ç—Ä–∞)</b>")
    astro_lines = astro_events(offset_days=1)  # <-- —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º offset_days=1
    for line in astro_lines:
        P.append(line)
    P.append("‚Äî‚Äî‚Äî")

    # 8) GPT-–≤—ã–≤–æ–¥: ¬´–í—ã–≤–æ–¥¬ª + ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª
    summary, tips = gpt_blurb("–ø–æ–≥–æ–¥–∞")
    P.append(f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    for t in tips:
        P.append(f"‚Ä¢ {t}")
    P.append("‚Äî‚Äî‚Äî")

    # 9) –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
    P.append(f"üìö {get_fact(TOMORROW)}")

    return "\n".join(P)


# ‚îÄ‚îÄ‚îÄ Telegram I/O ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_main_post(bot: Bot) -> None:
    html = build_msg()
    logging.info("Preview: %s", html.replace("\n", " | ")[:200])
    try:
        await bot.send_message(
            CHAT_ID,
            html,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info("Message sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise


async def main() -> None:
    bot = Bot(token=TOKEN)
    await send_main_post(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
    asyncio.run(main())