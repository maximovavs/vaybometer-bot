#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import asyncio
import logging

import pendulum
from telegram import Bot, error as tg_err

from utils import (
    _get,
    compass, clouds_word, wind_phrase, safe, get_fact,
    WEATHER_ICONS, AIR_EMOJI
)
from weather import get_weather
from air import get_air, get_pollen, get_sst, get_kp
from schumann import get_schumann
from astro import astro_events
from gpt import gpt_blurb

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Constants ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ           = pendulum.timezone("Asia/Nicosia")
TODAY        = pendulum.now(TZ).date()
TOMORROW     = TODAY.add(days=1)
TOKEN        = os.environ["TELEGRAM_TOKEN"]
CHAT_ID      = int(os.environ["CHANNEL_ID"])
UNSPLASH_KEY = os.getenv("UNSPLASH_KEY")

POLL_QUESTION = "–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î"
POLL_OPTIONS  = ["üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏", "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üò¥ –°–ª–µ–≥–∫–∞ –≤—è–ª—ã–π(–∞—è)", "ü§í –í—Å—ë –ø–ª–æ—Ö–æ"]

CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ build_msg ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    P: list[str] = []

    # 1) –ü–æ–≥–æ–¥–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ
    w = get_weather(*CITIES["Limassol"])
    if not w:
        raise RuntimeError("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    # ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∏–º–µ–Ω–Ω–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (index=1 –≤ daily –∏ hourly)
    if "current" in w:
        cur       = w["current"]
        wind_kmh  = cur["wind_speed"] * 3.6
        wind_deg  = cur["wind_deg"]
        press     = cur["pressure"]
        cloud_w   = clouds_word(cur.get("clouds", 0))
        tomorrow  = w["daily"][1]      # üî• –≤–æ—Ç —Ç—É—Ç ‚Äî –∏–º–µ–Ω–Ω–æ –∑–∞–≤—Ç—Ä–∞
        day_max   = tomorrow["temp"]["max"]
        night_min = tomorrow["temp"]["min"]
        strong    = w["strong_wind"]
        fog       = w["fog_alert"]
    else:
        cw        = w["current_weather"]
        wind_kmh  = cw["windspeed"]
        wind_deg  = cw["winddirection"]
        # –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –µ—Å–ª–∏ hourly –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ
        hp        = w["hourly"]["surface_pressure"]
        press     = hp[1] if len(hp) > 1 else hp[0]
        # –æ–±–ª–∞—á–Ω–æ—Å—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        hc        = w["hourly"]["cloud_cover"]
        cloud_w   = clouds_word(hc[1] if len(hc) > 1 else hc[0])
        strong    = w["strong_wind"]
        fog       = w["fog_alert"]
        # –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –±–ª–æ–∫ daily
        d = w["daily"]
        if isinstance(d, dict):
            # Open-Meteo –¥–∞—ë—Ç dict –∏–∑ —Å–ø–∏—Å–∫–æ–≤
            tm = d["temperature_2m_max"]
            tn = d["temperature_2m_min"]
            day_max   = tm[1] if len(tm) > 1 else tm[0]
            night_min = tn[1] if len(tn) > 1 else tn[0]
        else:
            # list –∏–∑ –±–ª–æ–∫–æ–≤
            blk = d[1] if len(d) > 1 else d[0]
            tm  = blk["temperature_2m_max"]
            tn  = blk["temperature_2m_min"]
            day_max   = tm[1] if len(tm) > 1 else tm[0]
            night_min = tn[1] if len(tn) > 1 else tn[0]

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    icon = WEATHER_ICONS.get(cloud_w, "üå¶Ô∏è")
    P.append(f"{icon} <b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ {TOMORROW.format('DD.MM.YYYY')}</b>")
    P.append(f"<b>–¢–µ–º–ø. –¥–Ω—ë–º/–Ω–æ—á—å—é:</b> {day_max:.1f}/{night_min:.1f} ¬∞C")
    P.append(f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {cloud_w}")
    P.append(f"<b>–í–µ—Ç–µ—Ä:</b> {wind_phrase(wind_kmh)} ({wind_kmh:.1f} –∫–º/—á, {compass(wind_deg)})")
    if strong:
        P.append("‚ö†Ô∏è –í–µ—Ç–µ—Ä –º–æ–∂–µ—Ç —É—Å–∏–ª–∏—Ç—å—Å—è")
    if fog:
        P.append("üåÅ –í–æ–∑–º–æ–∂–µ–Ω —Ç—É–º–∞–Ω, –≤–æ–¥–∏—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ")
    P.append(f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {press:.0f} –≥–ü–∞")
    P.append("‚Äî‚Äî‚Äî")

    # 2) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –¥–Ω./–Ω–æ—á–Ω. —Ç–µ–º–ø.
    temps: dict[str, tuple[float, float]] = {}
    for city, coords in CITIES.items():
        w2 = get_weather(*coords)
        if not w2:
            continue
        if "current" in w2:
            tblk = w2["daily"][1]  # –≤–Ω–∏–º–∞–Ω–∏–µ: —Ç–æ–∂–µ index=1
            temps[city] = (tblk["temp"]["max"], tblk["temp"]["min"])
        else:
            d2 = w2["daily"]
            if isinstance(d2, dict):
                tm2 = d2["temperature_2m_max"]
                tn2 = d2["temperature_2m_min"]
                d_val = tm2[1] if len(tm2) > 1 else tm2[0]
                n_val = tn2[1] if len(tn2) > 1 else tn2[0]
            else:
                blk2 = d2[1] if len(d2) > 1 else d2[0]
                m_arr = blk2["temperature_2m_max"]
                n_arr = blk2["temperature_2m_min"]
                d_val = m_arr[1] if len(m_arr) > 1 else m_arr[0]
                n_val = n_arr[1] if len(n_arr) > 1 else n_arr[0]
            temps[city] = (d_val, n_val)

    P.append("üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å)</b>")
    sorted_c = sorted(temps.items(), key=lambda kv: kv[1][0], reverse=True)
    medals   = ["ü•á","ü•à","ü•â","4Ô∏è‚É£"]
    for i, (city, (d_v, n_v)) in enumerate(sorted_c[:4]):
        P.append(f"{medals[i]} {city}: {d_v:.1f}/{n_v:.1f} ¬∞C")
    P.append("‚Äî‚Äî‚Äî")

    # 3) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –∏ –ø—ã–ª—å—Ü–∞
    air    = get_air() or {}
    pollen = get_pollen() or {}

    P.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    if air:
        status = f"{air['lvl']} (AQI {air['aqi']})"
        P.append(f"{status} | PM2.5: {safe(air['pm25'],' ¬µg/–º¬≥')} | PM10: {safe(air['pm10'],' ¬µg/–º¬≥')}")
    else:
        P.append("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
    if pollen:
        idx = lambda v: ["–Ω–µ—Ç","–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω–Ω—ã–π","–≤—ã—Å–æ–∫–∏–π","–æ—á. –≤—ã—Å–æ–∫–∏–π","—ç–∫—Å—Ç—Ä–∏–º"][int(round(v))]
        P.append(
            f"–î–µ—Ä–µ–≤—å—è ‚Äî {idx(pollen['treeIndex'])} | "
            f"–¢—Ä–∞–≤—ã ‚Äî {idx(pollen['grassIndex'])} | "
            f"–°–æ—Ä–Ω—è–∫–∏ ‚Äî {idx(pollen['weedIndex'])}"
        )
    else:
        P.append("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    P.append("‚Äî‚Äî‚Äî")

    # 4) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞, –®—É–º–∞–Ω, –≤–æ–¥–∞, –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    kp, kp_state = get_kp()
    sch          = get_schumann()
    sst          = get_sst()
    astro        = astro_events()

    if kp is not None:
        P.append(f"üß≤ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞</b> K-index: {kp:.1f} ({kp_state})")
    else:
        P.append("üß≤ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞</b> –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    if sch.get("high"):
        P.append("üéµ <b>–®—É–º–∞–Ω:</b> ‚ö°Ô∏è –≤–∏–±—Ä–∞—Ü–∏–∏ –ø–æ–≤—ã—à–µ–Ω—ã")
    elif "freq" in sch:
        P.append(f"üéµ <b>–®—É–º–∞–Ω:</b> ‚âà{sch['freq']:.1f} –ì—Ü")
    else:
        P.append(f"üéµ <b>–®—É–º–∞–Ω:</b> {sch.get('msg','–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")

    if sst is not None:
        P.append(f"üåä <b>–¢–µ–º–ø. –≤–æ–¥—ã:</b> {sst:.1f} ¬∞C")

    if astro:
        core = astro[0:2]
        P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>\n" + " | ".join(core))

    # 5) –í—ã–≤–æ–¥ –∏ —Å–æ–≤–µ—Ç—ã
    if fog:
        culprit = "—Ç—É–º–∞–Ω"
    elif kp_state == "–±—É—Ä—è":
        culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"
    elif press < 1007:
        culprit = "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"
    elif strong:
        culprit = "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä"
    else:
        culprit = "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"

    summary, tips = gpt_blurb(culprit)

    P += [
        "‚Äî‚Äî‚Äî",
        f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}",
        "‚Äî‚Äî‚Äî",
        "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>",
        *[f"‚Ä¢ {t}" for t in tips],
        "‚Äî‚Äî‚Äî",
        f"üìö {get_fact(TOMORROW)}",
    ]

    return "\n".join(P)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ SEND ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_main_post(bot: Bot) -> None:
    html = build_msg()
    logging.info("Preview: %s", html.replace("\n"," | ")[:200])
    try:
        await bot.send_message(
            CHAT_ID,
            html,
            parse_mode="HTML",
            disable_web_page_preview=True,
        )
        logging.info("Message sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise


async def send_poll_if_friday(bot: Bot) -> None:
    if pendulum.now(TZ).weekday() == 4:
        try:
            await bot.send_poll(
                CHAT_ID,
                question=POLL_QUESTION,
                options=POLL_OPTIONS,
                is_anonymous=False,
                allows_multiple_answers=False,
            )
        except tg_err.TelegramError as e:
            logging.warning("Poll send error: %s", e)


async def fetch_unsplash_photo() -> str | None:
    if not UNSPLASH_KEY:
        return None
    j = _get(
        "https://api.unsplash.com/photos/random",
        query="cyprus coast sunset",
        client_id=UNSPLASH_KEY,
    )
    return j.get("urls", {}).get("regular")


async def send_photo(bot: Bot, photo_url: str) -> None:
    try:
        await bot.send_photo(
            CHAT_ID,
            photo=photo_url,
            caption="–§–æ—Ç–æ –¥–Ω—è ‚Ä¢ Unsplash"
        )
    except tg_err.TelegramError as e:
        logging.warning("Photo send error: %s", e)


async def main() -> None:
    bot = Bot(token=TOKEN)
    await send_main_post(bot)
    await send_poll_if_friday(bot)
    if UNSPLASH_KEY and (pendulum.now(TZ).day % 3 == 0):
        if photo := await fetch_unsplash_photo():
            await send_photo(bot, photo)
    logging.info("All tasks done ‚úì")


if __name__ == "__main__":
    asyncio.run(main())
