# post.py ‚îÄ Vaybo–ú–µ—Ç—Ä 4.0
import os, asyncio, datetime as dt, json, random
from zoneinfo import ZoneInfo
import requests, pendulum
from python_dateutil import tz        # NB: dateutil —É–∂–µ –≤ requirements
from telegram import Bot
from openai import OpenAI

TZ = ZoneInfo("Asia/Nicosia")
TODAY = pendulum.now(TZ).date()
TOMORROW = TODAY + pendulum.duration(days=1)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
PLACES = {
    "–õ–∏–º–∞—Å—Å–æ–ª": (34.707, 33.022),
    "–õ–∞—Ä–Ω–∞–∫–∞":  (34.916, 33.624),
    "–ù–∏–∫–æ—Å–∏—è":  (35.170, 33.360),
    "–ü–∞—Ñ–æ—Å":    (34.776, 32.424),
}

WEATHER_URL = "https://api.open-meteo.com/v1/forecast"

AIR_URL = "https://api.airvisual.com/v2/nearest_city"  # IQAir
POLLEN_URL = "https://api.ambeedata.com/latest/pollen/by-place"  # NEEDS lat/lon

SCHUMANN_CSV = "https://schumann-res.s3.eu-central-1.amazonaws.com/recent.csv"

# weathercode ‚Üí —Ç–µ–∫—Å—Ç
WC = {
    # 0..9
    0: "—è—Å–Ω–æ", 1: "–ø—Ä–µ–∏–º. —è—Å–Ω–æ", 2: "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", 3: "–ø–∞—Å–º—É—Ä–Ω–æ",
    # 45/48 —Ç—É–º–∞–Ω
    45: "—Ç—É–º–∞–Ω", 48: "—Ç—É–º–∞–Ω —Å –∏–∑–º–æ—Ä–æ–∑—å—é",
    # –¥–æ–∂–¥—å/–≥—Ä–æ–∑–∞/—Å–Ω–µ–≥ (—Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)
    51: "–º–æ—Ä–æ—Å—å", 61: "–¥–æ–∂–¥—å", 80: "–ª–∏–≤–Ω–∏", 95: "–≥—Ä–æ–∑–∞"
}

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É—Ç–∏–ª–∏—Ç—ã
def requ(url, params=None, headers=None, timeout=15):
    try:
        r = requests.get(url, params=params, headers=headers, timeout=timeout)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        print("[warn]", url.split("://")[1].split("?")[0], "->", e)
        return None

def get_weather(lat, lon):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å daily (Tmax/Tmin/wcode) + current (pressure, cloud, wind)."""
    base = {
        "latitude": lat, "longitude": lon, "timezone": "auto", "forecast_days": 2,
        "daily": "temperature_2m_max,temperature_2m_min,weathercode",
        "current": "true",
    }
    j = requ(WEATHER_URL, base)
    if not j:
        return {}
    # daily[0] - —Å–µ–≥–æ–¥–Ω—è, daily[1] - –∑–∞–≤—Ç—Ä–∞
    try:
        idx = 1  # –∑–∞–≤—Ç—Ä–∞
        daily = {k: j["daily"][k][idx] for k in j["daily"].keys()}
    except Exception:
        daily = {}
    cur = j.get("current", {})
    return {"daily": daily, "current": cur}

def get_air(lat, lon):
    key = os.getenv("AIRVISUAL_KEY")
    if not key:
        return {}
    j = requ(AIR_URL, {"lat": lat, "lon": lon, "key": key})
    if not j or j.get("status") != "success":
        return {}
    data = j["data"]["current"]
    pol = data.get("pollution", {})
    return {
        "aqi": pol.get("aqius"),
        "p2": data.get("pollution", {}).get("aqius_pm2_5") or data.get("weather", {}).get("pm2_5"),
        "p1": data.get("pollution", {}).get("aqius_pm10") or data.get("weather", {}).get("pm10")
    }

def get_pollen(lat, lon):
    api = os.getenv("AMBEE_KEY")
    if not api:
        return None
    hdr = {"x-api-key": api}
    j = requ(POLLEN_URL, {"lat": lat, "lng": lon}, headers=hdr)
    if not j or j.get("message") != "success":
        return None
    p = j["data"]
    return {
        "tree": p["Risk"]["tree_pollen"]["type"],
        "grass": p["Risk"]["grass_pollen"]["type"],
        "weed": p["Risk"]["weed_pollen"]["type"],
    }

def get_kp():
    # –ó–∞–≥–ª—É—à–∫–∞: –±–µ—Ä—ë–º –∏–∑ NOAA json (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    j = requ("https://services.swpc.noaa.gov/products/noaa-estimated-planetary-k-index.json")
    if j:
        kp = j[-1][1]
        return float(kp)
    return None

def get_schumann():
    csv = requ(SCHUMANN_CSV, timeout=10)
    if not csv:
        return None
    try:
        # csv –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ ‚Üí –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü = –∞–º–ø–ª–∏—Ç—É–¥–∞
        rows = csv.strip().splitlines()
        last = rows[-1].split(",")
        freq = float(last[1]); amp = float(last[2])
        return freq, amp
    except Exception:
        return None

def moon_phase():
    # –æ—á–µ–Ω—å —É–ø—Ä–æ—â—ë–Ω–Ω–æ: 0-1 —à–∫–∞–ª–∞, % –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏ –∏ –∑–Ω–∞–∫
    lun_age = (pendulum.now(TZ).naive - pendulum.datetime(2000,1,6)).days % 29.53
    pct = abs(round((1 - abs(15 - lun_age)/15),2))*100
    sign = random.choice(["‚ôâ", "‚ôä", "‚ôã", "‚ôå","‚ôç","‚ôé","‚ôè","‚ôê","‚ôë","‚ôí","‚ôì","‚ôà"])
    return pct, sign

def astro_events():
    pct, sign = moon_phase()
    events = [f"–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞ –≤ {sign} ‚Äî {random.choice(['–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å', '—É—Å–∏–ª–∏–≤–∞–µ—Ç –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å'])} ({int(pct)} %)",
              "–ú–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"]
    # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–µ—Ç–µ–æ—Ä–Ω—ã–π –ø–æ—Ç–æ–∫ Eta Aquarids (–∞–ø—Ä-–º–∞–π)
    if TODAY.month == 5 and 3 <= TODAY.day <= 10:
        events.append("Eta Aquarids –∞–∫—Ç–∏–≤–µ–Ω (–ø–∏–∫ ‚Äî 6 –º–∞—è)")
    return events

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–æ–æ–±—â–µ–Ω–∏–µ
def build_msg():
    limassol = get_weather(*PLACES["–õ–∏–º–∞—Å—Å–æ–ª"])
    lw = limassol["daily"]
    current = limassol["current"]

    # fallback —Å—Ç—Ä–æ–∫–∏
    t_max = lw.get("temperature_2m_max") or current.get("temperature")
    t_min = lw.get("temperature_2m_min") or current.get("temperature")
    wcode = lw.get("weathercode") or current.get("weathercode")
    desc = WC.get(wcode, "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è")
    pressure = current.get("pressure_msl") or "‚Äî"
    wind = f"{current.get('windspeed', '‚Äî')} –∫–º/—á"

    # –≥–æ—Ä–æ–¥–∞-—ç–∫—Å—Ç—Ä–µ–º—ã
    temps = {}
    for name, (lat, lon) in PLACES.items():
        wt = get_weather(lat, lon)
        t = wt.get("daily", {}).get("temperature_2m_max")
        temps[name] = t
    warm = max((k for k,v in temps.items() if v), key=lambda x: temps[x])
    cold = min((k for k,v in temps.items() if v), key=lambda x: temps[x])

    # –≤–æ–∑–¥—É—Ö
    air = get_air(*PLACES["–õ–∏–º–∞—Å—Å–æ–ª"])
    p2 = air.get("p2")
    p1 = air.get("p1")
    aqi = air.get("aqi") or "‚Äî"

    # –ø—ã–ª—å—Ü–∞
    pollen = get_pollen(*PLACES["–õ–∏–º–∞—Å—Å–æ–ª"])

    # kp
    kp = get_kp() or "‚Äî"

    # Schumann
    sch = get_schumann()
    if sch:
        sch_line = f"{sch[0]:.1f} –ì—Ü, –∞–º–ø–ª. {sch[1]:.1f}"
    else:
        sch_line = "–¥–∞—Ç—á–∏–∫–∏ –º–æ–ª—á–∞—Ç ‚Äî —É—à–ª–∏ –≤ —Ä–µ—Ç—Ä–∏—Ç ü§´"

    # t—É–º–∞–Ω
    fog_line = ""
    if wcode in (45,48):
        fog_line = "‚ö†Ô∏è –í–æ–∑–º–æ–∂–µ–Ω —Ç—É–º–∞–Ω > 40 % –≤–µ—á–µ—Ä–æ–º."
    
    # –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è
    astro = astro_events()
    # –≤—ã–≤–æ–¥ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenAI
    culprit = "–Ω–∏–∑–∫–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è" if pressure != "‚Äî" and float(pressure) < 1005 else "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥–∞ –ø–ª–∞–Ω–µ—Ç"
    prompt = f"""
–°–æ—Å—Ç–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–π –≤–µ—Å—ë–ª—ã–π –≤—ã–≤–æ–¥ (–æ–¥–∏–Ω –∞–±–∑–∞—Ü) –∏ 3-4 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º —Ç–æ–Ω–µ.
–£–ø–æ–º—è–Ω–∏, —á—Ç–æ –µ—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–æ–≤–∞—Ç(–∞) {culprit}.
–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–ª—å–∫–æ JSON —Å –ø–æ–ª—è–º–∏ "outro" –∏ "tips" (tips ‚Äî —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫).
"""
    ai = client.chat.completions.create(model="gpt-4o-mini",
        messages=[{"role":"user","content":prompt}], temperature=0.7)
    j = json.loads(ai.choices[0].message.content)

    # ‚îÄ html
    parts = [
        f"‚òÄÔ∏è <b>–ü–æ–≥–æ–¥–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ</b>",
        f"<b>–¢–µ–º–ø. –¥–Ω—ë–º:</b> –¥–æ {t_max} ¬∞C",
        f"<b>–¢–µ–º–ø. –Ω–æ—á—å—é:</b> –æ–∫–æ–ª–æ {t_min} ¬∞C",
        f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {desc}",
        f"<b>–í–µ—Ç–µ—Ä:</b> {wind}",
        f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {pressure} –≥–ü–∞",
        fog_line,
        f"<i>–°–∞–º–æ–µ —Ç—ë–ø–ª–æ–µ:</i> {warm} ({temps[warm]} ¬∞C)",
        f"<i>–°–∞–º–æ–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–µ:</i> {cold} ({temps[cold]} ¬∞C)",
        "‚Äî" * 3,

        f"üå¨Ô∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>",
        f"AQI: {aqi}" + (f" |  PM2.5: {p2} ¬µg/m¬≥" if p2 else "") + (f" |  PM10: {p1} ¬µg/m¬≥" if p1 else ""),
    ]

    if pollen:
        parts += [
            "üåø <b>–ü—ã–ª—å—Ü–∞</b>",
            f"–î–µ—Ä–µ–≤—å—è: {pollen['tree']} | –¢—Ä–∞–≤—ã: {pollen['grass']} | –°–æ—Ä–Ω—è–∫–∏: {pollen['weed']}"
        ]

    parts += [
        "üõ∞Ô∏è <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>",
        f"–£—Ä–æ–≤–µ–Ω—å: —Å–ø–æ–∫–æ–π–Ω—ã–π (Kp {kp})",
        "üìà <b>–†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞</b>",
        sch_line,
        "üåä <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã –≤ –º–æ—Ä–µ</b>",
        f"–°–µ–π—á–∞—Å: 20.3 ¬∞C",
        "üîÆ <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è</b>",
        " | ".join(astro),
        "‚Äî" * 3,
        "üìù <b>–í—ã–≤–æ–¥</b>",
        j["outro"],
        "‚Äî" * 3,
        "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>",
        "\n".join(f"- {tip}" for tip in j["tips"])
    ]
    return "\n".join(filter(bool, parts))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main
async def main():
    html = build_msg()
    print("Preview:", html.replace("\n", " | ")[:200])
    token = os.getenv("TELEGRAM_TOKEN"); chat = os.getenv("CHANNEL_ID")
    await Bot(token).send_message(chat, html[:4096], parse_mode="HTML",
                                  disable_web_page_preview=True)

if __name__ == "__main__":
    asyncio.run(main())
