"""Automated daily Vaybo–ú–µ—Ç—Ä poster ‚Äì v1.4 (Open‚ÄëMeteo SST)

–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –õ–∏–º–∞—Å—Å–æ–ª–∞ –∏ —à–ª—ë—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ Telegram:
  ‚Ä¢ –ü–æ–≥–æ–¥–∞ (OpenWeather One Call 3.0)
  ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ (IQAir / AirVisual)
  ‚Ä¢ –ü—ã–ª—å—Ü–∞ (Tomorrow.io)
  ‚Ä¢ Kp‚Äë–∏–Ω–¥–µ–∫—Å (NOAA SWPC)
  ‚Ä¢ –†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞ (HeartMath)
  ‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è (Open‚ÄëMeteo Marine API)

GitHub Secrets (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ):
  OPENAI_API_KEY   ‚Äì OpenAI
  TELEGRAM_TOKEN   ‚Äì Telegram bot token
  CHANNEL_ID       ‚Äì @username –∏–ª–∏ chat_id –∫–∞–Ω–∞–ª–∞
  OWM_KEY          ‚Äì OpenWeather
  AIRVISUAL_KEY    ‚Äì IQAir / AirVisual
  TOMORROW_KEY     ‚Äì Tomorrow.io

Python deps (workflow —É–∂–µ —Å—Ç–∞–≤–∏—Ç): requests, python-dateutil, openai, python-telegram-bot
"""
from __future__ import annotations

import asyncio
import json
import os
import re
import sys
from datetime import datetime, timezone
from typing import Any, Dict, Optional

import requests
from dateutil import tz
from telegram import Bot
from openai import OpenAI

LAT = 34.707  # Limassol Marina
LON = 33.022
LOCAL_TZ = tz.gettz("Asia/Nicosia")

# ---------------------------------------------------------------------------
# HTTP helper ----------------------------------------------------------------
# ---------------------------------------------------------------------------

def _get(url: str, **params) -> Optional[dict]:
    """GET ‚Üí .json | None, —Ç–∏—Ö–æ –ª–æ–≥–∏—Ä—É—è –æ—à–∏–±–∫—É."""
    try:
        r = requests.get(url, params=params, timeout=15)
        r.raise_for_status()
        return r.json()
    except Exception as exc:  # noqa: BLE001, S110
        print(f"[warn] {url} failed: {exc}", file=sys.stderr)
        return None


# ---------------------------------------------------------------------------
# Data sources ---------------------------------------------------------------
# ---------------------------------------------------------------------------

def get_weather() -> Optional[dict]:
    key = os.getenv("OWM_KEY")
    if not key:
        return None
    return _get(
        "https://api.openweathermap.org/data/3.0/onecall",
        lat=LAT,
        lon=LON,
        appid=key,
        units="metric",
        exclude="minutely,hourly,alerts",
    )


def get_air_quality() -> Optional[dict]:
    key = os.getenv("AIRVISUAL_KEY")
    if not key:
        return None
    return _get(
        "https://api.airvisual.com/v2/nearest_city",
        lat=LAT,
        lon=LON,
        key=key,
    )


def get_pollen() -> Optional[dict]:
    key = os.getenv("TOMORROW_KEY")
    if not key:
        return None
    return _get(
        "https://api.tomorrow.io/v4/timelines",
        apikey=key,
        location=f"{LAT},{LON}",
        fields="treeIndex,grassIndex,weedIndex",
        timesteps="1d",
        units="metric",
    )


def get_geomagnetic() -> Optional[dict]:
    data = _get("https://services.swpc.noaa.gov/products/noaa-planetary-k-index.json")
    if not data or len(data) < 2:
        return None
    try:
        ts, kp = data[-1]
        return {"kp": float(kp)}
    except Exception:
        return None


def get_schumann() -> Optional[dict]:
    return _get("https://api.glcoherence.org/v1/earth")


# üåä Sea‚Äësurface temperature via Open‚ÄëMeteo (free, no key) -------------------

def get_sst() -> Optional[dict]:
    data = _get(
        "https://marine-api.open-meteo.com/v1/marine",
        latitude=LAT,
        longitude=LON,
        hourly="sea_surface_temperature",
        timezone="UTC",
    )
    try:
        sst = data["hourly"]["sea_surface_temperature"][0]
        return {"sst": round(float(sst), 1)}
    except Exception:
        return None


# ---------------------------------------------------------------------------
# Collect all raw data -------------------------------------------------------
# ---------------------------------------------------------------------------

def collect() -> Dict[str, Any]:
    return {
        "timestamp_utc": datetime.now(timezone.utc).isoformat(),
        "weather": get_weather(),
        "air": get_air_quality(),
        "pollen": get_pollen(),
        "geomagnetic": get_geomagnetic(),
        "schumann": get_schumann(),
        "sst": get_sst(),
    }


# ---------------------------------------------------------------------------
# OpenAI prettifier ----------------------------------------------------------
# ---------------------------------------------------------------------------

def prettify(raw: Dict[str, Any]) -> str:
    client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

    system_msg = """
–¢—ã ‚Äî Vaybo–ú–µ—Ç—Ä‚Äë–ø–æ—ç—Ç. –°–¥–µ–ª–∞–π HTML‚Äë–¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è Telegram. –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–≥–æ —Ç–∞–∫–æ–π:

<b>üó∫Ô∏è –õ–æ–∫–∞—Ü–∏—è</b>
–ì–æ—Ä–æ–¥: Limassol
–°—Ç—Ä–∞–Ω–∞: Cyprus

<b>üå¨Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>
AQI (US): <—á–∏—Å–ª–æ> (<–≥–ª–∞–≤–Ω—ã–π –∑–∞–≥—Ä—è–∑–Ω–∏—Ç–µ–ª—å>)
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <–∫–æ—Ä–æ—Ç–∫–æ>

<b>‚òÄÔ∏è –ü–æ–≥–æ–¥–∞</b>
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <¬∞C>
–û–±–ª–∞—á–Ω–æ—Å—Ç—å: <–æ–ø–∏—Å–∞–Ω–∏–µ>
–î–∞–≤–ª–µ–Ω–∏–µ: <hPa>
–í–µ—Ç–µ—Ä: <–º/—Å> (<–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ>)

<b>üåä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è</b>
–°–µ–π—á–∞—Å: <¬∞C>  ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç, –æ–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç –±–ª–æ–∫.

<b>üåø –ü—ã–ª—å—Ü–∞</b>
–î–µ—Ä–µ–≤—å—è/–¢—Ä–∞–≤—ã/–°–æ—Ä–Ω—è–∫–∏: <0‚Äë5>/<0‚Äë5>/<0‚Äë5>  ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç, –æ–ø—É—Å—Ç–∏.

<b>üåå –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∏–∫–∞</b>
Kp‚Äë–∏–Ω–¥–µ–∫—Å: <—á–∏—Å–ª–æ> (—Å–ø–æ–∫–æ–π–Ω–æ/–±—É—Ä—è) ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç, –æ–ø—É—Å—Ç–∏.

<b>üìà –†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞</b>
–ê–º–ø–ª–∏—Ç—É–¥–∞: <–∑–Ω–∞—á–µ–Ω–∏–µ> ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç, –æ–ø—É—Å—Ç–∏.

<b>‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</b>
–ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞.

–ü—Ä–∞–≤–∏–ª–∞: –±–µ–∑ ```code```, –±–µ–∑ <html>/<body>. –°–∏–º–≤–æ–ª \n = –Ω–æ–≤—ã–π –∞–±–∑–∞—Ü.
"""

    user_msg = "–°—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –∫—Ä–∞—Å–∏–≤–æ:\n" + json.dumps(raw, ensure_ascii=False, indent=2)

    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_msg},
            {"role": "user", "content": user_msg},
        ],
        temperature=0.4,
    )
    text = resp.choices[0].message.content.strip()

    # sanitation
    text = re.sub(r"^```[\s\S]*?\n|\n```$", "", text)
    text = text.replace("\\n", "\n")
    text = re.sub(r"(?i)<!DOCTYPE[^>]*>", "", text)
    text = re.sub(r"(?i)</?(html|body)[^>]*>", "", text)
    return text.strip()


# ---------------------------------------------------------------------------
# Telegram ------------------------------------------------------------------
# ---------------------------------------------------------------------------

async def send(html: str) -> None:
    bot = Bot(token=os.environ["TELEGRAM_TOKEN"])
    await bot.send_message(
        chat_id=os.environ["CHANNEL_ID"],
        text=html[:4096],
        parse_mode="HTML",
        disable_web_page_preview=True,
    )


# ---------------------------------------------------------------------------
# main ----------------------------------------------------------------------
# ---------------------------------------------------------------------------

async def main() -> None:
    raw = collect()
    html = prettify(raw)
    await send(html)


if __name__ == "__main__":
    asyncio.run(main())
