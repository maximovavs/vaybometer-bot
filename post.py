#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
post.py
~~~~~~~
–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ-—Å–≤–æ–¥–∫—É –∏ —à–ª—ë—Ç –µ–≥–æ –≤ Telegram-–∫–∞–Ω–∞–ª.

‚Ä¢ —Å—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ 4 –≥–æ—Ä–æ–¥–∞–º + –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥;
‚Ä¢ —Å—Ç—Ä–µ–ª–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –¥–∞–≤–ª–µ–Ω–∏—è (utils.pressure_trend);
‚Ä¢ –ø–æ–ª–Ω—ã–π –±–ª–æ–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ —Å –∑–∞–ø–∞—Å–Ω—ã–º API –∏ —Ü–≤–µ—Ç–Ω—ã–º–∏ PM (utils.pm_color);
‚Ä¢ –ø—ã–ª—å—Ü–∞ –∏–∑ Open-Meteo Pollen;
‚Ä¢ ¬´—Å–≤–µ—Ç–æ—Ñ–æ—Ä¬ª –≥–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∏ (utils.kp_emoji);
‚Ä¢ —Ä–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞ —Å —Ç—Ä–µ–Ω–¥–æ–º —á–∞—Å—Ç–æ—Ç—ã;
‚Ä¢ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π ¬´—Ñ–∞–∫—Ç –¥–Ω—è¬ª.
"""

from __future__ import annotations
import os, asyncio, logging, requests
from typing import Dict, Tuple, Optional, List

import pendulum
from telegram import Bot, error as tg_err

from utils import (
    compass, clouds_word, wind_phrase, safe, get_fact,
    WEATHER_ICONS, AIR_EMOJI,
    pressure_trend, kp_emoji, pm_color,
)
from weather   import get_weather
from air       import get_air, get_sst, get_kp
from pollen    import get_pollen
from schumann  import get_schumann, get_schumann_trend
from astro     import astro_events
from gpt       import gpt_blurb

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ         = pendulum.timezone("Asia/Nicosia")
TODAY      = pendulum.now(TZ).date()
TOMORROW   = TODAY.add(days=1)
TOKEN      = os.environ["TELEGRAM_TOKEN"]
CHAT_ID    = int(os.environ["CHANNEL_ID"])
UNSPLASH   = os.getenv("UNSPLASH_KEY")

CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}

# ‚îÄ‚îÄ‚îÄ‚îÄ —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö max/min —á–µ—Ä–µ–∑ Open-Meteo ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def fetch_tomorrow_temps(lat: float, lon: float) -> Tuple[Optional[float], Optional[float]]:
    date = TOMORROW.to_date_string()
    j = requests.get(
        "https://api.open-meteo.com/v1/forecast",
        params=dict(
            latitude=lat, longitude=lon,
            timezone="UTC",
            daily="temperature_2m_max,temperature_2m_min",
            start_date=date, end_date=date,
        ),
        timeout=15,
    ).json()
    d = j.get("daily", {})
    tmax = d.get("temperature_2m_max", [None])[0]
    tmin = d.get("temperature_2m_min", [None])[0]
    return tmax, tmin

# ‚îÄ‚îÄ‚îÄ‚îÄ —Å–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    P: List[str] = []

    # 1) —Å—Ä–µ–¥–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    t_vals: List[Tuple[float,float]] = []
    for la, lo in CITIES.values():
        d, n = fetch_tomorrow_temps(la, lo)
        if d is not None and n is not None:
            t_vals.append((d, n))
    avg_day   = sum(d for d,_ in t_vals) / len(t_vals)
    avg_night = sum(n for _,n in t_vals) / len(t_vals)

    # 2) –±–∞–∑–æ–≤—ã–π –≥–æ—Ä–æ–¥ (–õ–∏–º–∞—Å—Å–æ–ª) –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    lat0, lon0 = CITIES["Limassol"]
    w0 = get_weather(lat0, lon0)
    if not w0:
        raise RuntimeError("weather sources down")

    cur = w0.get("current") or w0["current_weather"]
    wind_kmh = cur["windspeed"]
    wind_deg = cur["winddirection"]
    press    = cur["pressure"]
    clouds   = clouds_word(cur.get("clouds",0))
    strong   = w0.get("strong_wind", False)
    fog      = w0.get("fog_alert",   False)

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫
    icon = WEATHER_ICONS.get(clouds,"üå¶Ô∏è")
    P += [
        f"{icon} <b>–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –ö–∏–ø—Ä–µ ({TOMORROW.format('DD.MM.YYYY')})</b>",
        f"üå° –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø.: {avg_day:.0f} ¬∞C",
        f"üìà –¢–µ–º–ø. –¥–Ω—ë–º/–Ω–æ—á—å—é: {avg_day:.1f} / {avg_night:.1f} ¬∞C",
        f"üå§ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds}",
        f"üí® –í–µ—Ç–µ—Ä: {wind_phrase(wind_kmh)} ({wind_kmh:.1f} –∫–º/—á, {compass(wind_deg)})",
        f"üîΩ –î–∞–≤–ª–µ–Ω–∏–µ: {press:.0f} –≥–ü–∞ {pressure_trend(w0)}",
    ]
    if strong: P.append("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞ –¥–æ 30 –∫–º/—á+")
    if fog:    P.append("üåÅ –ù–æ—á—å—é –≤–æ–∑–º–æ–∂–µ–Ω —Ç—É–º–∞–Ω ‚Äî –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö")
    P.append("‚Äî‚Äî‚Äî")

    # 3) —Ä–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤
    city_r: List[Tuple[str,float,float]] = []
    for c,(la,lo) in CITIES.items():
        d,n = fetch_tomorrow_temps(la,lo)
        if d is not None and n is not None:
            city_r.append((c,d,n))
    city_r.sort(key=lambda x: x[1], reverse=True)
    medals = ["ü•á","ü•à","ü•â","4Ô∏è‚É£"]
    P.append("üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å)</b>")
    for i,(c,d,n) in enumerate(city_r[:4]):
        P.append(f"{medals[i]} {c}: {d:.1f}/{n:.1f} ¬∞C")
    P.append("‚Äî‚Äî‚Äî")

    # 4) –≤–æ–∑–¥—É—Ö + –ø—ã–ª—å—Ü–∞
    air = get_air()
    P.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(
        f"{AIR_EMOJI[air['lvl']]} {air['lvl'].capitalize()} "
        f"(AQI {air['aqi']}) | "
        f"PM‚ÇÇ.‚ÇÖ: {pm_color(air['pm25'])} | "
        f"PM‚ÇÅ‚ÇÄ: {pm_color(air['pm10'])}"
    )

    pol = get_pollen()
    if pol:
        risk = pol['risk']
        P += [
            "üåø <b>–ü—ã–ª—å—Ü–∞</b>",
            f"–î–µ—Ä–µ–≤—å—è ‚Äì {pol['tree']} | –¢—Ä–∞–≤—ã ‚Äì {pol['grass']} | "
            f"–°–æ—Ä–Ω—è–∫–∏ ‚Äì {pol['weed']} ‚Üí —Ä–∏—Å–∫: {risk}",
        ]
    P.append("‚Äî‚Äî‚Äî")

    # 5) –≥–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞, —à—É–º–∞–Ω, –º–æ—Ä–µ
    kp, _ = get_kp()
    kp_txt = f"{kp:.1f}" if kp is not None else "–Ω/–¥"
    P.append(f"{kp_emoji(kp or 0)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ Kp={kp_txt}")

    sch = get_schumann()
    if "freq" in sch:
        trend = get_schumann_trend(24)
        arrow = "‚Üë" if trend==1 else "‚Üì" if trend==-1 else "‚Üí"
        P.append(f"üéµ –®—É–º–∞–Ω: {sch['freq']:.2f} –ì—Ü {arrow} ‚Äì —Ñ–æ–Ω {'‚ö°Ô∏è –≤—ã—Å–æ–∫–∏–π' if sch.get('high') else '–≤ –Ω–æ—Ä–º–µ'}")
    else:
        P.append("üéµ –®—É–º–∞–Ω: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    if (sst := get_sst()) is not None:
        P.append(f"üåä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: {sst:.1f} ¬∞C")
    P.append("‚Äî‚Äî‚Äî")

    # 6) –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    astro = astro_events()
    if astro:
        P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b> ‚Äî " + " | ".join(astro))
        P.append("‚Äî‚Äî‚Äî")

    # 7) –≤—ã–≤–æ–¥ –∏ —Å–æ–≤–µ—Ç—ã
    culprit = "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä" if strong else "—Ç—É–º–∞–Ω" if fog else "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ" if press<1007 else "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"
    summary, tips = gpt_blurb(culprit)
    P += [f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}", "‚Äî‚Äî‚Äî", "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>"]
    for t in tips:
        P.append(f"‚Ä¢ {t}")
    P += ["‚Äî‚Äî‚Äî", f"üìö {get_fact(TOMORROW)}"]

    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_main(bot: Bot) -> None:
    html = build_msg()
    logging.info("Preview: %s", html.replace("\n"," | ")[:240])
    await bot.send_message(chat_id=CHAT_ID, text=html,
                           parse_mode="HTML",
                           disable_web_page_preview=True)

async def main() -> None:
    bot = Bot(TOKEN)
    await send_main(bot)

if __name__ == "__main__":
    asyncio.run(main())
