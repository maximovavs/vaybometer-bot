#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post.py ‚Äî –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç VayboMeter (–ö–∏–ø—Ä), —Ä–µ–Ω–¥–µ—Ä ¬´–∫–∞–∫ –≤ KLD¬ª.
–°–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è, –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç post_common.py.
"""

from __future__ import annotations
import os, sys, asyncio, logging, json, math, re
from pathlib import Path
from typing import Dict, Any, Tuple, List, Optional

import pendulum
from telegram import Bot, error as tg_err

from utils import (
    compass, get_fact, AIR_EMOJI, pm_color, kp_emoji,
    kmh_to_ms, smoke_index, _get
)
from weather import get_weather, fetch_tomorrow_temps, day_night_stats
from air import get_air, get_sst, get_kp, get_solar_wind
from pollen import get_pollen
from schumann import get_schumann
import radiation  # ‚ò¢Ô∏è

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–µ–≥–∏–æ–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ = pendulum.timezone("Asia/Nicosia")
TODAY = pendulum.today(TZ)
TOMORROW = TODAY.add(days=1).date()

LIM_LAT, LIM_LON = 34.707, 33.022  # Limassol ‚Äî —è–∫–æ—Ä–Ω–∞—è —Ç–æ—á–∫–∞

CITIES: Dict[str, Tuple[float, float]] = {
    "Limassol":  (34.707, 33.022),
    "Nicosia":   (35.170, 33.360),
    "Pafos":     (34.776, 32.424),
    "Ayia Napa": (34.988, 34.012),
    "Troodos":   (34.916, 32.823),
    "Larnaca":   (34.916, 33.624),
}
COASTAL = {"Limassol", "Larnaca", "Pafos", "Ayia Napa"}

WMO_DESC = {
    0: "‚òÄÔ∏è —è—Å–Ω–æ", 1: "‚õÖ —á.–æ–±–ª", 2: "‚òÅÔ∏è –æ–±–ª", 3: "üå• –ø–∞—Å–º",
    45: "üå´ —Ç—É–º–∞–Ω", 48: "üå´ –∏–∑–º–æ—Ä–æ–∑—å", 51: "üå¶ –º–æ—Ä–æ—Å—å",
    61: "üåß –¥–æ–∂–¥—å", 71: "‚ùÑÔ∏è —Å–Ω–µ–≥", 95: "‚õà –≥—Ä–æ–∑–∞",
}
def code_desc(c: object) -> Optional[str]:
    try: return WMO_DESC.get(int(c))
    except Exception: return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers –ø–æ —á–∞—Å–æ–≤–∫–∞–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _hourly_times(wm: Dict[str, Any]) -> List[pendulum.DateTime]:
    h = wm.get("hourly") or {}
    times = h.get("time") or h.get("time_local") or h.get("timestamp") or []
    out: List[pendulum.DateTime] = []
    for t in times:
        try: out.append(pendulum.parse(str(t)))
        except Exception: ...
    return out

def _nearest_index(times: List[pendulum.DateTime], date_obj: pendulum.Date, prefer_hour: int) -> Optional[int]:
    if not times: return None
    target = pendulum.datetime(date_obj.year, date_obj.month, date_obj.day, prefer_hour, 0, tz=TZ)
    best_i, best_diff = None, None
    for i, dt in enumerate(times):
        try: dl = dt.in_tz(TZ)
        except Exception: dl = dt
        if dl.date() != date_obj: continue
        diff = abs((dl - target).total_seconds())
        if best_diff is None or diff < best_diff:
            best_i, best_diff = i, diff
    return best_i

def _tomorrow_indices(wm: Dict[str, Any]) -> List[int]:
    times = _hourly_times(wm)
    idxs: List[int] = []
    for i, dt in enumerate(times):
        try:
            if dt.in_tz(TZ).date() == TOMORROW:
                idxs.append(i)
        except Exception:
            pass
    return idxs

def _circular_mean_deg(deg_list: List[float]) -> Optional[float]:
    if not deg_list: return None
    x = sum(math.cos(math.radians(d)) for d in deg_list)
    y = sum(math.sin(math.radians(d)) for d in deg_list)
    if x == 0 and y == 0: return None
    ang = math.degrees(math.atan2(y, x))
    return (ang + 360.0) % 360.0

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤–µ—Ç–µ—Ä/–¥–∞–≤–ª–µ–Ω–∏–µ –≤ —à–∞–ø–∫—É (–∫–∞–∫ KLD) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def pick_tomorrow_header_metrics(wm: Dict[str, Any]) -> Tuple[Optional[float], Optional[int], Optional[int], str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: wind_ms, wind_dir_deg, pressure_hpa, trend('‚Üë'/'‚Üì'/'‚Üí').
    ‚Ä¢ –ë–µ—Ä—ë–º –±–ª–∏–∂–∞–π—à–µ–µ –∫ 12:00 –∑–∞–≤—Ç—Ä–∞ (–¥–ª—è —Ç—Ä–µ–Ω–¥–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å ~06:00).
    ‚Ä¢ –ù–∞ —Ñ–æ–ª–ª–±—ç–∫–µ ‚Äî —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –≤—Å–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–º —á–∞—Å–∞–º.
    """
    hourly = wm.get("hourly") or {}
    times = _hourly_times(wm)
    idx_noon = _nearest_index(times, TOMORROW, 12)
    idx_morn = _nearest_index(times, TOMORROW, 6)

    spd = hourly.get("wind_speed_10m") or hourly.get("windspeed_10m") or hourly.get("windspeed") or hourly.get("wind_speed") or []
    dr  = hourly.get("wind_direction_10m") or hourly.get("winddirection_10m") or hourly.get("winddirection") or hourly.get("wind_direction") or []
    pr  = hourly.get("surface_pressure") or hourly.get("pressure") or []
    wind_ms = wind_dir = press_val = None
    trend = "‚Üí"

    if idx_noon is not None:
        try: wind_ms = kmh_to_ms(float(spd[idx_noon])) if idx_noon < len(spd) else None
        except Exception: pass
        try: wind_dir = int(round(float(dr[idx_noon]))) if idx_noon < len(dr) else None
        except Exception: pass
        try: p_noon = float(pr[idx_noon]) if idx_noon < len(pr) else None
        except Exception: p_noon = None
        try: p_morn = float(pr[idx_morn]) if (idx_morn is not None and idx_morn < len(pr)) else None
        except Exception: p_morn = None
        if p_noon is not None: press_val = int(round(p_noon))
        if (p_noon is not None) and (p_morn is not None):
            diff = p_noon - p_morn
            trend = "‚Üë" if diff >= 0.3 else "‚Üì" if diff <= -0.3 else "‚Üí"

    if wind_ms is None or wind_dir is None or press_val is None:
        idxs = _tomorrow_indices(wm)
        if idxs:
            try: spds = [float(spd[i]) for i in idxs if i < len(spd)]
            except Exception: spds = []
            try: dirs = [float(dr[i]) for i in idxs if i < len(dr)]
            except Exception: dirs = []
            try: prs = [float(pr[i]) for i in idxs if i < len(pr)]
            except Exception: prs = []
            if spds: wind_ms = kmh_to_ms(sum(spds)/len(spds))
            md = _circular_mean_deg(dirs)
            wind_dir = int(round(md)) if md is not None else wind_dir
            if prs: press_val = int(round(sum(prs)/len(prs)))
    return wind_ms, wind_dir, press_val, trend

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —à—Ç–æ—Ä–º-—Ñ–ª–∞–≥–∏ (–∑–∞–≤—Ç—Ä–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def storm_flags_for_tomorrow(wm: Dict[str, Any]) -> Dict[str, Any]:
    hourly = wm.get("hourly") or {}
    idxs = _tomorrow_indices(wm)
    if not idxs: return {"warning": False}

    def _arr(*names, default=None):
        for n in names:
            v = hourly.get(n)
            if isinstance(v, list): return v
        return default or []

    def _vals(arr):
        out = []
        for i in idxs:
            if i < len(arr):
                try: out.append(float(arr[i]))
                except Exception: pass
        return out

    speeds = _vals(_arr("windspeed_10m", "windspeed", "wind_speed_10m", "wind_speed"))
    gusts  = _vals(_arr("windgusts_10m", "wind_gusts_10m", "wind_gusts"))
    rain   = _vals(_arr("rain"))
    tprob  = _vals(_arr("thunderstorm_probability"))

    max_speed_ms = kmh_to_ms(max(speeds)) if speeds else None
    max_gust_ms  = kmh_to_ms(max(gusts))  if gusts  else None
    heavy_rain   = (max(rain) >= 8.0) if rain else False
    thunder      = (max(tprob) >= 60) if tprob else False

    reasons = []
    if isinstance(max_speed_ms, (int, float)) and max_speed_ms >= 13: reasons.append(f"–≤–µ—Ç–µ—Ä –¥–æ {max_speed_ms:.0f} –º/—Å")
    if isinstance(max_gust_ms,  (int, float)) and max_gust_ms  >= 17: reasons.append(f"–ø–æ—Ä—ã–≤—ã –¥–æ {max_gust_ms:.0f} –º/—Å")
    if heavy_rain: reasons.append("—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å")
    if thunder:    reasons.append("–≥—Ä–æ–∑–∞")

    return {
        "max_speed_ms": max_speed_ms,
        "max_gust_ms": max_gust_ms,
        "heavy_rain": heavy_rain,
        "thunder": thunder,
        "warning": bool(reasons),
        "warning_text": "‚ö†Ô∏è <b>–®—Ç–æ—Ä–º–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>: " + ", ".join(reasons) if reasons else "",
    }

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®—É–º–∞–Ω: —Ñ–æ–ª–ª–±—ç–∫ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _trend_text(sym: str) -> str:
    return {"‚Üë": "—Ä–∞—Å—Ç—ë—Ç", "‚Üì": "—Å–Ω–∏–∂–∞–µ—Ç—Å—è", "‚Üí": "—Å—Ç–∞–±–∏–ª—å–Ω–æ"}.get(sym, "—Å—Ç–∞–±–∏–ª—å–Ω–æ")

def _trend_from_series(vals: List[float], delta: float = 0.1) -> str:
    tail = vals[-24:] if len(vals) > 24 else vals
    if len(tail) < 2: return "‚Üí"
    avg_prev = sum(tail[:-1])/(len(tail)-1)
    d = tail[-1] - avg_prev
    return "‚Üë" if d >= delta else "‚Üì" if d <= -delta else "‚Üí"

def get_schumann_with_fallback() -> Dict[str, Any]:
    sch = (get_schumann() or {})
    if isinstance(sch.get("freq"), (int, float)) and isinstance(sch.get("amp"), (int, float)):
        sch["cached"] = False
        sch["trend_text"] = _trend_text(sch.get("trend", "‚Üí"))
        return sch

    cache = Path(__file__).parent / "schumann_hourly.json"
    if cache.exists():
        try:
            arr = json.loads(cache.read_text(encoding="utf-8")) or []
            amps  = [float(x["amp"])  for x in arr if isinstance(x.get("amp"), (int, float))]
            last  = arr[-1] if arr else {}
            trend = _trend_from_series(amps) if amps else "‚Üí"
            return {
                "freq": float(last["freq"]) if isinstance(last.get("freq"), (int, float)) else None,
                "amp":  float(last["amp"])  if isinstance(last.get("amp"),  (int, float)) else None,
                "trend": trend,
                "trend_text": _trend_text(trend),
                "cached": True,
                "status": "üü¢ –≤ –Ω–æ—Ä–º–µ" if (isinstance(last.get("freq"), (int, float)) and 7.7 <= float(last["freq"]) <= 8.1)
                          else ("üü° –∫–æ–ª–µ–±–∞–Ω–∏—è" if isinstance(last.get("freq"), (int, float)) and 7.4 <= float(last["freq"]) <= 8.4
                                else "üî¥ —Å–∏–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ")
            }
        except Exception:
            pass
    return {"freq": None, "amp": None, "trend": "‚Üí", "trend_text": "—Å—Ç–∞–±–∏–ª—å–Ω–æ", "cached": True, "status": "üü° –∫–æ–ª–µ–±–∞–Ω–∏—è"}

def schumann_line(s: Dict[str, Any]) -> str:
    freq = s.get("freq"); amp = s.get("amp")
    trend_text = s.get("trend_text", "—Å—Ç–∞–±–∏–ª—å–Ω–æ")
    cached = s.get("cached", False)
    status = s.get("status", "üü° –∫–æ–ª–µ–±–∞–Ω–∏—è")
    stale = " ‚è≥ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö —á–∏—Å–µ–ª" if cached else ""
    if not isinstance(freq, (int, float)) and not isinstance(amp, (int, float)):
        return f"{status}{stale} ‚Ä¢ —Ç—Ä–µ–Ω–¥: {trend_text} ‚Ä¢ H7: ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    return f"{status}{stale} ‚Ä¢ –®—É–º–∞–Ω: {freq:.2f} –ì—Ü / {amp:.1f} pT ‚Ä¢ —Ç—Ä–µ–Ω–¥: {trend_text} ‚Ä¢ H7: ‚Äî –Ω/–¥"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –∏–∑ lunar_calendar.json ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _load_calendar(path: str = "lunar_calendar.json") -> dict:
    try: data = json.loads(Path(path).read_text("utf-8"))
    except Exception: return {}
    if isinstance(data, dict) and isinstance(data.get("days"), dict):
        return data["days"]
    return data if isinstance(data, dict) else {}

_ZODIAC = {"–û–≤–µ–Ω":"‚ôà","–¢–µ–ª–µ—Ü":"‚ôâ","–ë–ª–∏–∑–Ω–µ—Ü—ã":"‚ôä","–†–∞–∫":"‚ôã","–õ–µ–≤":"‚ôå","–î–µ–≤–∞":"‚ôç","–í–µ—Å—ã":"‚ôé","–°–∫–æ—Ä–ø–∏–æ–Ω":"‚ôè","–°—Ç—Ä–µ–ª–µ—Ü":"‚ôê","–ö–æ–∑–µ—Ä–æ–≥":"‚ôë","–í–æ–¥–æ–ª–µ–π":"‚ôí","–†—ã–±—ã":"‚ôì"}
def _zsym(s: str) -> str:
    for k,v in _ZODIAC.items(): s = s.replace(k, v)
    return s

def _parse_voc_dt(s: str, tz: pendulum.Timezone):
    if not s: return None
    try: return pendulum.parse(s).in_tz(tz)
    except Exception:
        try:
            dmy, hm = s.split()
            d, m = map(int, dmy.split("."))
            hh, mm = map(int, hm.split(":"))
            year = pendulum.today(tz).year
            return pendulum.datetime(year, m, d, hh, mm, tz=tz)
        except Exception:
            return None

def _voc_interval(rec: dict, tz_local: str = "Asia/Nicosia"):
    voc = (rec or {}).get("void_of_course") or (rec or {}).get("voc") or (rec or {}).get("void") or {}
    if not isinstance(voc, dict): return None
    s = voc.get("start") or voc.get("from") or voc.get("start_time")
    e = voc.get("end")   or voc.get("to")   or voc.get("end_time")
    if not s or not e: return None
    tz = pendulum.timezone(tz_local)
    t1 = _parse_voc_dt(s, tz); t2 = _parse_voc_dt(e, tz)
    if not t1 or not t2: return None
    return t1, t2

def build_astro_section(date_local: pendulum.DateTime, tz_local: str) -> str:
    cal = _load_calendar("lunar_calendar.json")
    rec = cal.get(date_local.format("YYYY-MM-DD"), {}) if isinstance(cal, dict) else {}
    phase_raw = (rec.get("phase_name") or rec.get("phase") or "").strip()
    phase_name = re.sub(r"^[^\w–ê-–Ø–∞-—è–Å—ë]+", "", phase_raw).split(",")[0].strip() or "–õ—É–Ω–∞"
    percent = rec.get("percent") or rec.get("illumination") or rec.get("illum") or 0
    try: percent = int(round(float(percent)))
    except Exception: percent = 0
    sign = rec.get("sign") or rec.get("zodiac") or ""
    base = f"{phase_name} ({percent}%)" if percent else phase_name
    if sign: base += f" –≤ {_zsym(sign)}"
    lines = [f"üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>", f"üåô {base}."]
    voc = _voc_interval(rec, tz_local=tz_local)
    if voc:
        t1, t2 = voc
        lines.append(f"‚è≥ –ü–µ—Ä–∏–æ–¥ –±–µ–∑ –∫—É—Ä—Å–∞: {t1.format('HH:mm')}‚Äì{t2.format('HH:mm')}.")
    # LLM 1‚Äì2 –º—è–≥–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if os.getenv("DISABLE_LLM_DAILY","0").lower() not in ("1","true","yes","on"):
        try:
            from gpt import gpt_blurb
            _, tips = gpt_blurb("–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è")
            tips = [t.strip() for t in tips if t.strip()][:2]
            lines += tips
        except Exception:
            pass
    return "\n".join(lines)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Air ‚Üí –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _is_air_bad(air: Dict[str, Any]) -> Tuple[bool, str, str]:
    def _num(x):
        try: return float(x)
        except Exception: return None
    aqi = _num(air.get("aqi"))
    p25 = _num(air.get("pm25"))
    p10 = _num(air.get("pm10"))
    bad = False
    label = "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
    reasons = []
    if aqi is not None and aqi >= 100:
        bad = True; reasons.append(f"AQI {aqi:.0f}")
        if aqi >= 150: label = "–≤—ã—Å–æ–∫–∏–π"
    if p25 is not None and p25 > 35:
        bad = True; reasons.append(f"PM‚ÇÇ.‚ÇÖ {p25:.0f}")
        if p25 > 55: label = "–≤—ã—Å–æ–∫–∏–π"
    if p10 is not None and p10 > 50:
        bad = True; reasons.append(f"PM‚ÇÅ‚ÇÄ {p10:.0f}")
        if p10 > 100: label = "–≤—ã—Å–æ–∫–∏–π"
    return bad, label, ", ".join(reasons) if reasons else "–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ"

def build_conclusion(kp: Optional[float], kp_status: str,
                     air: Dict[str, Any],
                     storm: Dict[str, Any],
                     schu: Dict[str, Any]) -> List[str]:
    lines: List[str] = []
    air_bad, air_label, air_reason = _is_air_bad(air)
    gust_ms = storm.get("max_gust_ms")
    storm_main = isinstance(gust_ms, (int, float)) and gust_ms >= 17
    kp_main = isinstance(kp, (int, float)) and kp >= 5
    schu_main = (schu or {}).get("status","").startswith("üî¥")

    storm_text = f"—à—Ç–æ—Ä–º–æ–≤–∞—è –ø–æ–≥–æ–¥–∞: –ø–æ—Ä—ã–≤—ã –¥–æ {gust_ms:.0f} –º/—Å" if storm_main else None
    air_text   = f"–∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞: {air_label} ({air_reason})" if air_bad else None
    kp_text    = f"–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: Kp‚âà{kp:.1f} ({kp_status})" if kp_main else None
    schu_text  = "—Å–∏–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –®—É–º–∞–Ω–∞" if schu_main else None

    if storm_main:
        lines.append(f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî {storm_text}. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –¥–µ–ª–∞ —Å —É—á—ë—Ç–æ–º –ø–æ–≥–æ–¥—ã.")
    elif air_bad:
        lines.append(f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî {air_text}. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ –∏ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏.")
    elif kp_main:
        lines.append(f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî {kp_text}. –í–æ–∑–º–æ–∂–Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É –º–µ—Ç–µ–æ–∑–∞–≤–∏—Å–∏–º—ã—Ö.")
    elif schu_main:
        lines.append("–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä ‚Äî –≤–æ–ª–Ω—ã –®—É–º–∞–Ω–∞: –æ—Ç–º–µ—á–∞—é—Ç—Å—è —Å–∏–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
    else:
        lines.append("–°–µ—Ä—å—ë–∑–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞ –Ω–µ –≤–∏–¥–Ω–æ ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –ø–ª–∞–Ω—ã.")

    secondary = [t for t in (storm_text, air_text, kp_text, schu_text) if t]
    if secondary:
        primary = lines[0]
        rest = [t for t in secondary if t not in primary]
        if rest:
            lines.append("–¢–∞–∫–∂–µ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: " + "; ".join(rest[:2]) + ".")
    return lines

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (—É—Å—Ç–æ–π—á–∏–≤—ã–π) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_cities_block() -> List[str]:
    """KLD-—Å—Ç–∏–ª—å: –¥–Ω/–Ω–æ—á—å, –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, üåä. –° —Ñ–æ–ª–ª–±—ç–∫–æ–º –Ω–∞ daily.*"""
    tz_name = TZ.name
    temps: Dict[str, Tuple[float, float, int, Optional[float]]] = {}
    for city, (la, lo) in CITIES.items():
        tmax, tmin = fetch_tomorrow_temps(la, lo, tz=tz_name)
        if tmax is None or tmin is None:
            # —Ñ–æ–ª–ª–±—ç–∫ —á–µ—Ä–µ–∑ daily –º–∞—Å—Å–∏–≤—ã
            wm = get_weather(la, lo) or {}
            dl = wm.get("daily", {}) or {}
            try:
                tmxs = dl.get("temperature_2m_max") or dl.get("tmax") or []
                tmns = dl.get("temperature_2m_min") or dl.get("tmin") or []
                if isinstance(tmxs, list) and len(tmxs) > 1 and tmax is None:
                    tmax = float(tmxs[1])
                if isinstance(tmns, list) and len(tmns) > 1 and tmin is None:
                    tmin = float(tmns[1])
            except Exception:
                pass
        if tmax is None or tmin is None:
            continue  # —Å–æ–≤—Å–µ–º –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        wc = (get_weather(la, lo) or {}).get("daily", {}).get("weathercode", [])
        wc = wc[1] if isinstance(wc, list) and len(wc) > 1 else 0
        sst = get_sst(la, lo) if city in COASTAL else None
        temps[city] = (tmax, tmin, wc, sst)

    lines = ["üéñÔ∏è <b>–ì–æ—Ä–æ–¥–∞ (–¥./–Ω. ¬∞C, –ø–æ–≥–æ–¥–∞, üåä)</b>"]
    if not temps:
        lines.append("‚Äî –Ω/–¥ ‚Äî"); return lines
    medals = ["ü•á","ü•à","ü•â","4Ô∏è‚É£","5Ô∏è‚É£","6Ô∏è‚É£"]
    for i, (city, (d, n, wc, sst)) in enumerate(
        sorted(temps.items(), key=lambda kv: kv[1][0], reverse=True)[:6]
    ):
        desc = code_desc(wc)
        line = f"{medals[i]} {city}: {d:.0f}/{n:.0f} ¬∞C"
        if desc: line += f" ‚Ä¢ {desc}"
        if sst is not None: line += f" ‚Ä¢ üåä {sst:.1f}"
        lines.append(line)
    return lines

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –®–∞–ø–∫–∞ ¬´–∫–∞–∫ –≤ KLD¬ª (Limassol) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_header_line() -> str:
    stats = day_night_stats(LIM_LAT, LIM_LON, tz=TZ.name)
    wm = get_weather(LIM_LAT, LIM_LON) or {}
    storm = storm_flags_for_tomorrow(wm)
    wcarr = (wm.get("daily", {}) or {}).get("weathercode", [])
    wc = wcarr[1] if isinstance(wcarr, list) and len(wcarr) > 1 else None

    rh_min, rh_max = stats.get("rh_min"), stats.get("rh_max")
    t_day_max, t_night_min = stats.get("t_day_max"), stats.get("t_night_min")
    wind_ms, wind_dir, press_hpa, p_trend = pick_tomorrow_header_metrics(wm)
    wind_part = (
        f"üí® {wind_ms:.1f} –º/—Å ({compass(wind_dir)})" if isinstance(wind_ms, (int, float)) and wind_dir is not None
        else (f"üí® {wind_ms:.1f} –º/—Å" if isinstance(wind_ms, (int, float)) else "üí® –Ω/–¥")
    )
    gust = storm.get("max_gust_ms")
    if isinstance(gust, (int, float)):
        wind_part += f" –ø–æ—Ä—ã–≤—ã –¥–æ {gust:.0f}"

    parts = [
        f"üèôÔ∏è Limassol: –¥–Ω/–Ω–æ—á—å {t_day_max:.0f}/{t_night_min:.0f} ¬∞C" if (t_day_max is not None and t_night_min is not None) else "üèôÔ∏è Limassol: –¥–Ω/–Ω–æ—á—å –Ω/–¥",
        (code_desc(wc) or None),
        wind_part,
        (f"üíß RH {rh_min:.0f}‚Äì{rh_max:.0f}%" if rh_min is not None and rh_max is not None else None),
        (f"üîπ {press_hpa} –≥–ü–∞ {p_trend}" if isinstance(press_hpa, int) else None),
    ]
    return " ‚Ä¢ ".join([x for x in parts if x])

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–∞–¥–∏–∞—Ü–∏—è / Safecast ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def safecast_block_lines(lat: float, lon: float) -> List[str]:
    out: List[str] = []
    try:
        rd = radiation.get_radiation(lat, lon) or {}
        val = rd.get("value") or rd.get("dose")
        cpm = rd.get("cpm")
        if isinstance(val, (int, float)) or isinstance(cpm, (int, float)):
            lvl_txt, dot = "–≤ –Ω–æ—Ä–º–µ", "üü¢"
            if isinstance(val, (int, float)) and val >= 0.4: lvl_txt, dot = "–≤—ã—à–µ –Ω–æ—Ä–º—ã", "üîµ"
            elif isinstance(val, (int, float)) and val >= 0.2: lvl_txt, dot = "–ø–æ–≤—ã—à–µ–Ω–æ", "üü°"
            if isinstance(cpm, (int, float)):
                out.append(f"üìü –†–∞–¥–∏–∞—Ü–∏—è (Safecast): {int(round(cpm))} CPM ‚âà {float(val):.3f} ŒºSv/h ‚Äî {dot} {lvl_txt}")
            else:
                out.append(f"üìü –†–∞–¥–∏–∞—Ü–∏—è: {float(val):.3f} ŒºSv/h ‚Äî {dot} {lvl_txt}")
    except Exception:
        pass
    return out

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_message() -> str:
    P: List[str] = []
    P.append(f"<b>üåÖ –ö–∏–ø—Ä: –ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({TOMORROW.strftime('%d.%m.%Y')})</b>")
    P.append("‚Äî‚Äî‚Äî")

    # –®–∞–ø–∫–∞ –ø–æ –õ–∏–º–∞—Å—Å–æ–ª—É (–∫–∞–∫ –≤ KLD)
    P.append(build_header_line())
    P.append("‚Äî‚Äî‚Äî")

    # –ì–æ—Ä–æ–¥–∞ (—É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥)
    P.extend(build_cities_block())
    P.append("‚Äî‚Äî‚Äî")

    # Air (–∫–∞–∫ –≤ KLD) + Safecast + –¥—ã–º–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å
    P.append("üè≠ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    air = get_air(LIM_LAT, LIM_LON) or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append(f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air.get('aqi','–Ω/–¥')}) | PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}")
    P.extend(safecast_block_lines(LIM_LAT, LIM_LON))
    # –î—ã–º–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ ¬´–Ω–∏–∑–∫–∏–π/–Ω/–¥¬ª
    em_sm, lbl_sm = smoke_index(air.get("pm25"), air.get("pm10"))
    if lbl_sm and str(lbl_sm).lower() not in ("–Ω–∏–∑–∫–æ–µ", "–Ω–∏–∑–∫–∏–π", "–Ω–µ—Ç", "–Ω/–¥"):
        P.append(f"üî• –ó–∞–¥—ã–º–ª–µ–Ω–∏–µ: {em_sm} {lbl_sm}")
    P.append("‚Äî‚Äî‚Äî")

    # –ü—ã–ª—å—Ü–∞
    pol = get_pollen()
    if pol:
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(f"–î–µ—Ä–µ–≤—å—è: {pol['tree']} | –¢—Ä–∞–≤—ã: {pol['grass']} | –°–æ—Ä–Ω—è–∫–∏: {pol['weed']} ‚Äî —Ä–∏—Å–∫ {pol['risk']}")
        P.append("‚Äî‚Äî‚Äî")

    # –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ (—Å–æ —Å–≤–µ–∂–µ—Å—Ç—å—é)
    kp_tuple = get_kp() or (None, "–Ω/–¥", None, "n/d")
    try:
        kp, ks, kp_ts, _ = kp_tuple
    except Exception:
        kp = kp_tuple[0] if isinstance(kp_tuple, (list, tuple)) and len(kp_tuple) else None
        ks, kp_ts = "–Ω/–¥", None

    age_txt = ""
    if isinstance(kp_ts, int) and kp_ts > 0:
        try:
            age_min = int((pendulum.now("UTC").int_timestamp - kp_ts) / 60)
            age_txt = f", üïì {age_min // 60}—á –Ω–∞–∑–∞–¥" if age_min > 180 else (f", {age_min} –º–∏–Ω –Ω–∞–∑–∞–¥" if age_min >= 0 else "")
        except Exception:
            pass

    if isinstance(kp, (int, float)):
        P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({ks}{age_txt})")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")

    # –°–æ–ª–Ω–µ—á–Ω—ã–π –≤–µ—Ç–µ—Ä
    sw = get_solar_wind() or {}
    bz = sw.get("bz"); bt = sw.get("bt"); v = sw.get("speed_kms"); n = sw.get("density")
    wind_status = sw.get("status", "–Ω/–¥")
    parts = []
    if isinstance(bz, (int, float)): parts.append(f"Bz {bz:.1f} nT")
    if isinstance(bt, (int, float)): parts.append(f"Bt {bt:.1f} nT")
    if isinstance(v,  (int, float)): parts.append(f"v {v:.0f} –∫–º/—Å")
    if isinstance(n,  (int, float)): parts.append(f"n {n:.1f} —Å–º‚Åª¬≥")
    if parts:
        P.append("üå¨Ô∏è –°–æ–ª–Ω–µ—á–Ω—ã–π –≤–µ—Ç–µ—Ä: " + ", ".join(parts) + f" ‚Äî {wind_status}")
        P.append("‚ÑπÔ∏è –ü–æ –≤–µ—Ç—Ä—É —Å–µ–π—á–∞—Å " + (wind_status if isinstance(wind_status,str) else "–Ω/–¥") + "; Kp ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞ 3 —á.")
    P.append("‚Äî‚Äî‚Äî")

    # –®—É–º–∞–Ω
    schu_state = get_schumann_with_fallback()
    P.append(schumann_line(schu_state))
    P.append("‚Äî‚Äî‚Äî")

    # –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    P.append(build_astro_section(pendulum.today(TZ).add(days=1), TZ.name))
    P.append("‚Äî‚Äî‚Äî")

    # ¬´–í—ã–≤–æ–¥¬ª
    wm_anchor = get_weather(LIM_LAT, LIM_LON) or {}
    storm = storm_flags_for_tomorrow(wm_anchor)
    P.append("üìú <b>–í—ã–≤–æ–¥</b>")
    P.extend(build_conclusion(kp, ks or "–Ω/–¥", air, storm, schu_state))
    P.append("‚Äî‚Äî‚Äî")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    from gpt import gpt_blurb
    try:
        theme = (
            "–ø–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞" if storm.get("warning") else
            ("–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if isinstance(kp, (int, float)) and kp >= 5 else
             ("–ø–ª–æ—Ö–æ–π –≤–æ–∑–¥—É—Ö" if _is_air_bad(air)[0] else "–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å"))
        )
        _, tips = gpt_blurb(theme)
        tips = [t.strip() for t in tips if t.strip()][:3]
        if tips: P.extend(tips)
        else:    P.append("‚Äî –±–æ–ª—å—à–µ –≤–æ–¥—ã, –º–µ–Ω—å—à–µ —Å—Ç—Ä–µ—Å—Å–∞, –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–æ–Ω")
    except Exception:
        P.append("‚Äî –±–æ–ª—å—à–µ –≤–æ–¥—ã, –º–µ–Ω—å—à–µ —Å—Ç—Ä–µ—Å—Å–∞, –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–æ–Ω")
    P.append("‚Äî‚Äî‚Äî")

    # –§–∞–∫—Ç –¥–Ω—è
    P.append(f"üìö {get_fact(TOMORROW, '–ö–∏–ø—Ä')}")
    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û—Ç–ø—Ä–∞–≤–∫–∞ (–¥—Ä–æ–±–∏–º –ø–æ 3600) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_text(bot: Bot, chat_id: int, text: str) -> None:
    chunks: List[str] = []
    cur, cur_len = [], 0
    for line in text.split("\n"):
        if cur_len + len(line) + 1 > 3600 and cur:
            chunks.append("\n".join(cur)); cur, cur_len = [line], len(line) + 1
        else:
            cur.append(line); cur_len += len(line) + 1
    if cur: chunks.append("\n".join(cur))
    for i, part in enumerate(chunks):
        await bot.send_message(chat_id=chat_id, text=part, parse_mode="HTML", disable_web_page_preview=True)
        if i < len(chunks) - 1: await asyncio.sleep(0.4)

async def main() -> None:
    token = (os.getenv("TELEGRAM_TOKEN") or "").strip()
    chat_id_env = (os.getenv("CHANNEL_ID") or "").strip()
    try: chat_id = int(chat_id_env) if chat_id_env else 0
    except Exception: chat_id = 0
    if not token or chat_id == 0:
        logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏/–∏–ª–∏ CHANNEL_ID")
        raise SystemExit(1)
    txt = build_message()
    logging.info("Preview: %s", txt[:220].replace("\n", " | "))
    await send_text(Bot(token=token), chat_id, txt)

if __name__ == "__main__":
    asyncio.run(main())
