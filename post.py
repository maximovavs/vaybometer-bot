#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VayboMeter v5.x ‚Äî –≥–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞.

–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç:
  ‚Ä¢ utils.py      ‚Äî –æ–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (compass, clouds_word, wind_phrase, safe, get_fact)
  ‚Ä¢ weather.py    ‚Äî get_weather() + —Ñ–ª–∞–≥–∏ strong_wind, fog_alert
  ‚Ä¢ air.py        ‚Äî get_air(), get_pollen(), get_sst(), get_kp()
  ‚Ä¢ schumann.py   ‚Äî get_schumann()
  ‚Ä¢ astro.py      ‚Äî astro_events()
  ‚Ä¢ gpt.py        ‚Äî gpt_blurb()
"""

import os
import random
import asyncio
import logging

import pendulum
from telegram import Bot, error as tg_err

from utils      import compass, clouds_word, wind_phrase, safe, get_fact
from weather    import get_weather
from air        import get_air, get_pollen, get_sst, get_kp
from schumann   import get_schumann
from astro      import astro_events
from gpt        import gpt_blurb

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 0.  –ö–û–ù–°–¢–ê–ù–¢–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LAT, LON = 34.707, 33.022
CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}

TOKEN = os.environ["TELEGRAM_TOKEN"]
CHAT  = os.environ["CHANNEL_ID"]

TZ       = pendulum.timezone("Asia/Nicosia")
TODAY    = pendulum.now(TZ).date()
TOMORROW = TODAY.add(days=1)

WEATHER_ICONS = {
    "—è—Å–Ω–æ":       "‚òÄÔ∏è",
    "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è": "üå§Ô∏è",
    "–ø–∞—Å–º—É—Ä–Ω–æ":   "‚òÅÔ∏è",
    "–¥–æ–∂–¥—å":      "üåßÔ∏è",
    "—Ç—É–º–∞–Ω":      "üåÅ",
}

AIR_EMOJI = {
    "—Ö–æ—Ä–æ—à–∏–π":           "üü¢",
    "—É–º–µ—Ä–µ–Ω–Ω—ã–π":         "üü°",
    "–≤—Ä–µ–¥–Ω—ã–π –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö": "üü†",
    "–≤—Ä–µ–¥–Ω—ã–π":           "üî¥",
    "–æ—á. –≤—Ä–µ–¥–Ω—ã–π":       "üü£",
    "–æ–ø–∞—Å–Ω—ã–π":           "üü§",
    "–Ω/–¥":               "‚ö™Ô∏è",
}

UNSPLASH_KEY   = os.getenv("UNSPLASH_KEY")
POLL_QUESTION  = "–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î"
POLL_OPTIONS   = [
    "üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏",
    "üôÇ –í—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
    "üò¥ –°–ª–µ–≥–∫–∞ –≤—è–ª—ã–π(–∞—è)",
    "ü§í –í—Å—ë –ø–ª–æ—Ö–æ",
]

logging.basicConfig(level=logging.INFO,
                    format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1.  –°–ë–û–†–ö–ê –ú–ï–°–°–ï–î–ñ–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    # 1. –ü–æ–≥–æ–¥–∞
    w = get_weather(LAT, LON)
    if not w:
        raise RuntimeError("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    if "current" in w:
        # OpenWeather One Call
        cur       = w["current"]
        day_block = w["daily"][0]["temp"]
        wind_kmh  = cur["wind_speed"] * 3.6
        wind_deg  = cur["wind_deg"]
        wcode     = cur.get("weather",[{}])[0].get("id",0)
        press     = cur["pressure"]
        cloud_w   = clouds_word(cur.get("clouds",0))
        day_max   = day_block["max"]
        night_min = day_block["min"]
    else:
        # Open-Meteo
        cw        = w["current_weather"]
        dblock    = w["daily"]
        wind_kmh  = cw["windspeed"]
        wind_deg  = cw["winddirection"]
        press     = w["pressure"]
        cloud_w   = cw["clouds"]

        # –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (forecast_days=2)
        tm = dblock["temperature_2m_max"]
        tn = dblock["temperature_2m_min"]
        wc = dblock["weathercode"]
        day_max   = tm[1] if len(tm)>1 else tm[0]
        night_min = tn[1] if len(tn)>1 else tn[0]
        wcode     = wc[1] if len(wc)>1 else wc[0]

    strong_wind = w["strong_wind"]
    fog_alert   = w["fog_alert"]

    # 2. –¢—ë–ø–ª—ã–π/–ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –≥–æ—Ä–æ–¥
    temps = {}
    for city,(la,lo) in CITIES.items():
        wc = get_weather(la,lo)
        if not wc: continue
        if "current" in wc:
            temps[city] = wc["daily"][0]["temp"]["max"]
        else:
            arr = wc["daily"]["temperature_2m_max"]
            temps[city] = arr[1] if len(arr)>1 else arr[0]
    warm = max(temps, key=temps.get)
    cold = min(temps, key=temps.get)

    # 3. AQI / PM / Pollen / Kp / SST / Schumann / Astro
    air     = get_air() or {}
    pollen  = get_pollen()
    kp, kp_state = get_kp()
    sst     = get_sst()
    sch     = get_schumann()
    astro_list = astro_events()

    # 4. –í–∏–Ω–æ–≤–Ω–∏–∫ + —Å–æ–≤–µ—Ç—ã
    if fog_alert:
        culprit = "—Ç—É–º–∞–Ω"
    elif kp_state == "–±—É—Ä—è":
        culprit = "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"
    elif press < 1007:
        culprit = "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"
    elif strong_wind:
        culprit = "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä"
    else:
        culprit = "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"

    summary, tips = gpt_blurb(culprit)

    icon = WEATHER_ICONS.get(cloud_w, "üå¶Ô∏è")

    # 5. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ—á–∫–∏
    P = [
        f"{icon} <b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ {TOMORROW.format('DD.MM.YYYY')}</b>",
        f"<b>–¢–µ–º–ø. –¥–Ω—ë–º:</b> –¥–æ {day_max:.1f}¬∞C",
        f"<b>–¢–µ–º–ø. –Ω–æ—á—å—é:</b> –æ–∫–æ–ª–æ {night_min:.1f}¬∞C",
        f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {cloud_w}",
        f"<b>–í–µ—Ç–µ—Ä:</b> {wind_phrase(wind_kmh)} ({wind_kmh:.1f} –∫–º/—á, {compass(wind_deg)})",
        *(["‚ö†Ô∏è –í–µ—Ç–µ—Ä –º–æ–∂–µ—Ç —É—Å–∏–ª–∏–≤–∞—Ç—å—Å—è"] if strong_wind else []),
        *(["üåÅ –í–æ–∑–º–æ–∂–µ–Ω —Ç—É–º–∞–Ω, –≤–æ–¥–∏—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ"] if fog_alert else []),
        f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {press:.0f} –≥–ü–∞",
        f"<i>–°–∞–º—ã–π —Ç—ë–ø–ª—ã–π –≥–æ—Ä–æ–¥:</i> {warm} ({temps[warm]:.1f}¬∞C)",
        f"<i>–°–∞–º—ã–π –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –≥–æ—Ä–æ–¥:</i> {cold} ({temps[cold]:.1f}¬∞C)",
        "‚Äî‚Äî‚Äî",
        "üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>",
        f"{AIR_EMOJI.get(air.get('lvl'),'‚ö™Ô∏è')} AQI {air.get('aqi','‚Äî')} | PM2.5: {safe(air.get('pm25'),' ¬µg/–º¬≥')} | PM10: {safe(air.get('pm10'),' ¬µg/–º¬≥')}",
    ]

    if pollen:
        idx = lambda v: ["–Ω–µ—Ç","–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω–Ω—ã–π","–≤—ã—Å–æ–∫–∏–π","–æ—á. –≤—ã—Å–æ–∫–∏–π","—ç–∫—Å—Ç—Ä–∏–º"][int(round(v))]
        P += [
            "üåø <b>–ü—ã–ª—å—Ü–∞</b>",
            f"–î–µ—Ä–µ–≤—å—è ‚Äî {idx(pollen['treeIndex'])} | –¢—Ä–∞–≤—ã ‚Äî {idx(pollen['grassIndex'])} | –°–æ—Ä–Ω—è–∫–∏ ‚Äî {idx(pollen['weedIndex'])}"
        ]

    if kp is not None:
        P += [ "üß≤ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>",
               f"K-index: {kp:.1f} ({kp_state})" ]
    else:
        P += [ "üß≤ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö" ]

    if sch.get("high"):
        P += ["üéµ <b>–®—É–º–∞–Ω:</b> ‚ö°Ô∏è –≤–∏–±—Ä–∞—Ü–∏–∏ –ø–æ–≤—ã—à–µ–Ω—ã (>8 –ì—Ü)"]
    elif "freq" in sch:
        P += [ f"üéµ <b>–®—É–º–∞–Ω:</b> ‚âà{sch['freq']:.1f} –ì—Ü, –∞–º–ø–ª–∏—Ç—É–¥–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞" ]
    else:
        P += [ f"üéµ <b>–®—É–º–∞–Ω:</b> {sch.get('msg','–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}" ]

    if sst is not None:
        P += [ f"üåä <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã</b>\n–°–µ–π—á–∞—Å: {sst:.1f}¬∞C" ]

    if astro_list:
        P += [ "üåå <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n" + " | ".join(astro_list) ]

    P += [
        "‚Äî‚Äî‚Äî",
        f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}",
        "‚Äî‚Äî‚Äî",
        "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>",
        *[f"‚Ä¢ {t}" for t in tips],
        "‚Äî‚Äî‚Äî",
        f"üìö {get_fact(TOMORROW)}",
    ]

    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2.  SEND & EXTRA ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_main_post(bot: Bot, text: str) -> None:
    await bot.send_message(int(CHAT),
                           text[:4096],
                           parse_mode="HTML",
                           disable_web_page_preview=True)

async def send_friday_poll(bot: Bot) -> None:
    await bot.send_poll(int(CHAT),
                        question=POLL_QUESTION,
                        options=POLL_OPTIONS,
                        is_anonymous=False,
                        allows_multiple_answers=False)

async def fetch_unsplash_photo() -> str | None:
    if not UNSPLASH_KEY:
        return None
    j = await asyncio.get_event_loop().run_in_executor(
        None,
        lambda: __import__('utils')._get(
            "https://api.unsplash.com/photos/random",
            query="cyprus coast sunset",
            client_id=UNSPLASH_KEY
        )
    )
    return j and j.get("urls",{}).get("regular")

async def send_media(bot: Bot, photo_url: str) -> None:
    await bot.send_photo(int(CHAT), photo=photo_url, caption="–§–æ—Ç–æ –¥–Ω—è ‚Ä¢ Unsplash")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    logging.info("Starting build_msg()‚Ä¶")
    html = build_msg()
    logging.info("Preview: %s", html.replace("\n"," | ")[:200])

    bot = Bot(TOKEN)
    await send_main_post(bot, html)

    # –ü–æ –ø—è—Ç–Ω–∏—Ü–∞–º ‚Äî –æ–ø—Ä–æ—Å
    if pendulum.now(TZ).is_friday():
        await send_friday_poll(bot)

    # –ö–∞–∂–¥—ã–µ 3 –¥–Ω—è ‚Äî –∫–∞—Ä—Ç–∏–Ω–∫–∞
    if UNSPLASH_KEY and (pendulum.now(TZ).day % 3 == 0):
        if photo := await fetch_unsplash_photo():
            await send_media(bot, photo)

    logging.info("All messages sent ‚úì")

if __name__ == "__main__":
    asyncio.run(main())
