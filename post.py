#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
post.py
~~~~~~~~
–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É ¬´–ü–æ–≥–æ–¥–∞ + –ó–¥–æ—Ä–æ–≤—å–µ¬ª –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –µ—ë –≤ Telegram-–∫–∞–Ω–∞–ª.

‚ñ™ —Å—Ä–µ–¥–Ω—è—è –ø–æ–≥–æ–¥–∞ –ø–æ –ö–∏–ø—Ä—É + –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è –õ–∏–º–∞—Å—Å–æ–ª–∞  
‚ñ™ —Ä–µ–π—Ç–∏–Ω–≥ 4-—Ö –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å)  
‚ñ™ –≤–æ–∑–¥—É—Ö (AQ + PM) ‚Äî –¥–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –≤—Å–µ–≥–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω  
‚ñ™ –ø—ã–ª—å—Ü–∞ (Open-Meteo Pollen)  
‚ñ™ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ —Å–æ ¬´—Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–º¬ª  
‚ñ™ —Ä–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞ (—á–∞—Å—Ç–æ—Ç–∞ + —Ç—Ä–µ–Ω–¥ ‚Üë ‚Üì ‚Üí)  
‚ñ™ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã  
‚ñ™ –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è (—Ñ–∞–∑–∞ + –±–ª–∏–∂–∞–π—à–µ–µ —è–≤–ª–µ–Ω–∏–µ)  
‚ñ™ –≤—ã–≤–æ–¥ GPT –∏ ¬´—Ñ–∞–∫—Ç –¥–Ω—è¬ª
"""

from __future__ import annotations
import os, asyncio, logging, requests
from typing import Dict, Tuple, List, Optional

import pendulum
from telegram import Bot, error as tg_err

# ‚Äî —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ ‚Äî
from utils   import (
    WEATHER_ICONS, AIR_EMOJI,
    compass, clouds_word, wind_phrase, safe,
    pressure_trend, kp_emoji, pm_color, get_fact
)
from weather   import get_weather
from air       import get_air, get_kp, get_sst
from pollen    import get_pollen
from schumann  import get_schumann, get_schumann_trend
from astro     import astro_events
from gpt       import gpt_blurb

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ Telegram / –æ–∫—Ä—É–∂–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ           = pendulum.timezone("Asia/Nicosia")
TODAY        = pendulum.now(TZ).date()
TOMORROW     = TODAY.add(days=1)
TOKEN        = os.environ["TELEGRAM_TOKEN"]
CHAT_ID      = int(os.environ["CHANNEL_ID"])
UNSPLASH_KEY = os.getenv("UNSPLASH_KEY")

POLL_Q   = "–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?"
POLL_OPT = ["üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏", "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
            "üò¥ –ù–µ–º–Ω–æ–≥–æ –≤—è–ª—ã–π(–∞—è)", "ü§í –ü–ª–æ—Ö–æ"]

# ‚îÄ‚îÄ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CITIES: Dict[str, Tuple[float, float]] = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}

# ‚îÄ‚îÄ –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å tmax / tmin —Ä–æ–≤–Ω–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def fetch_tomorrow_temps(lat: float, lon: float) -> Tuple[Optional[float], Optional[float]]:
    date = TOMORROW.to_date_string()               # YYYY-MM-DD
    try:
        j = requests.get(
            "https://api.open-meteo.com/v1/forecast",
            params={
                "latitude": lat, "longitude": lon,
                "timezone": "UTC",
                "start_date": date, "end_date": date,
                "daily": "temperature_2m_max,temperature_2m_min",
            },
            timeout=15
        ).json()
        tmax = float(j["daily"]["temperature_2m_max"][0])
        tmin = float(j["daily"]["temperature_2m_min"][0])
        return tmax, tmin
    except Exception as e:
        logging.warning("Tomorrow temps fetch (%.3f,%.3f) error: %s", lat, lon, e)
        return None, None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    P: List[str] = []

    # 1Ô∏è‚É£ —Å—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –ö–∏–ø—Ä—É
    all_t: List[Tuple[float, float]] = []
    for la, lo in CITIES.values():
        d, n = fetch_tomorrow_temps(la, lo)
        if d is not None and n is not None:
            all_t.append((d, n))
    if not all_t:
        raise RuntimeError("–ù–∏ –æ–¥–∏–Ω –≥–æ—Ä–æ–¥ –Ω–µ –≤–µ—Ä–Ω—É–ª –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ t¬∞")
    avg_day   = sum(d for d, _ in all_t) / len(all_t)
    avg_night = sum(n for _, n in all_t) / len(all_t)

    # 2Ô∏è‚É£ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è –õ–∏–º–∞—Å—Å–æ–ª–∞
    la0, lo0  = CITIES["Limassol"]
    day_max, night_min = fetch_tomorrow_temps(la0, lo0)
    if day_max is None or night_min is None:
        raise RuntimeError("Open-Meteo –Ω–µ –≤–µ—Ä–Ω—É–ª t¬∞ –¥–ª—è –õ–∏–º–∞—Å—Å–æ–ª–∞")

    w0 = get_weather(la0, lo0)
    if not w0:
        raise RuntimeError("get_weather() –Ω–µ –¥–∞–ª current_weather")

    cur        = w0["current"]
    wind_kmh   = cur["windspeed"]
    wind_deg   = cur["winddirection"]
    press      = cur["pressure"]
    clouds_pct = cur["clouds"]
    cloud_w    = clouds_word(clouds_pct)

    icon = WEATHER_ICONS.get(cloud_w, "üå¶Ô∏è")
    P += [
        f"{icon} <b>–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –ö–∏–ø—Ä–µ "
        f"({TOMORROW.format('DD.MM.YYYY')})</b>",
        f"üå° –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø.: {avg_day:.0f} ¬∞C",
        f"üìà –¢–µ–º–ø. –¥–Ω—ë–º/–Ω–æ—á—å—é: {day_max:.1f} / {night_min:.1f} ¬∞C",
        f"üå§ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {cloud_w}",
        f"üí® –í–µ—Ç–µ—Ä: {wind_phrase(wind_kmh)} "
        f"({wind_kmh:.0f} –∫–º/—á, {compass(wind_deg)})",
        f"üîΩ –î–∞–≤–ª–µ–Ω–∏–µ: {press:.0f} –≥–ü–∞ {pressure_trend(w0)}",
        "‚Äî‚Äî‚Äî",
    ]

    # 3Ô∏è‚É£ —Ä–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å)
    rating: List[Tuple[str, float, float]] = []
    for city, (la, lo) in CITIES.items():
        d, n = fetch_tomorrow_temps(la, lo)
        if d is None:
            continue
        rating.append((city, d, n if n is not None else d))
    rating.sort(key=lambda x: x[1], reverse=True)

    medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£"]
    P.append("üéñÔ∏è –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å)")
    for i, (c, d, n) in enumerate(rating[:4]):
        P.append(f"{medals[i]} {c}: {d:.1f}/{n:.1f} ¬∞C")
    P.append("‚Äî‚Äî‚Äî")

    # 4Ô∏è‚É£ –≤–æ–∑–¥—É—Ö
    air = get_air()
    pm = lambda v: f"{v:.0f}" if v not in (None, "–Ω/–¥") else "–Ω/–¥"
    P.append("üèôÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞")
    P.append(
        f"{AIR_EMOJI.get(air['lvl'],'‚ö™')} {air['lvl']} "
        f"(AQI {air['aqi']}) | "
        f"PM‚ÇÇ.‚ÇÖ: {pm_color(pm(air['pm25']))} | "
        f"PM‚ÇÅ‚ÇÄ: {pm_color(pm(air['pm10']))}"
    )

    # 5Ô∏è‚É£ –ø—ã–ª—å—Ü–∞
    pol = get_pollen()
    if pol:
        P.append(f"üåø –ü—ã–ª—å—Ü–∞ ‚Äì —Ä–∏—Å–∫: {pol['risk']}")
        P.append(f"–î–µ—Ä–µ–≤—å—è: {pol['tree']}  |  –¢—Ä–∞–≤—ã: {pol['grass']}  |  –°–æ—Ä–Ω—è–∫–∏: {pol['weed']}")
    P.append("‚Äî‚Äî‚Äî")

    # 6Ô∏è‚É£ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞
    kp_val, _ = get_kp()
    if kp_val is not None:
        P.append(f"{kp_emoji(kp_val)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ Kp={kp_val:.1f}")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ ‚Äì –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    # 7Ô∏è‚É£ —Ä–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞
    sch = get_schumann()
    if "freq" in sch:
        trend = get_schumann_trend()
        arrow = "‚Üë" if trend > 0 else "‚Üì" if trend < 0 else "‚Üí"
        status = "‚ö°Ô∏è –ø–æ–≤—ã—à–µ–Ω" if sch.get("high") else "—Ñ–æ–Ω –≤ –Ω–æ—Ä–º–µ"
        P.append(f"üéµ –®—É–º–∞–Ω: {sch['freq']:.2f} –ì—Ü {arrow} ‚Äì {status}")
    else:
        P.append(f"üéµ –®—É–º–∞–Ω: {sch['msg']}")
    P.append("‚Äî‚Äî‚Äî")

    # 8Ô∏è‚É£ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è
    sst = get_sst()
    if sst is not None:
        P.append(f"üåä –í–æ–¥–∞ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–≥–æ –º–æ—Ä—è: {sst:.1f} ¬∞C")
        P.append("‚Äî‚Äî‚Äî")

    # 9Ô∏è‚É£ –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    astro = astro_events()
    if astro:
        P.append("üåå –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è ‚Äì " + " | ".join(astro))
        P.append("‚Äî‚Äî‚Äî")

    # üîü –≤—ã–≤–æ–¥ + —Å–æ–≤–µ—Ç—ã
    culprit = (
        "—Ç—É–º–∞–Ω" if cloud_w == "—Ç—É–º–∞–Ω"
        else "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if kp_val and kp_val >= 5
        else "–ø—ã–ª—å—Ü–∞"
    )
    summary, tips = gpt_blurb(culprit)
    P.append(f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    for t in tips:
        P.append(f"‚Ä¢ {t}")
    P.append("‚Äî‚Äî‚Äî")
    P.append(f"üìö {get_fact(TOMORROW)}")

    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_main_post(bot: Bot) -> None:
    html = build_msg()
    logging.info("Preview: %s", html.replace("\n", " | ")[:220])
    await bot.send_message(
        CHAT_ID, html, parse_mode="HTML",
        disable_web_page_preview=True
    )

async def send_poll(bot: Bot) -> None:
    if pendulum.now(TZ).weekday() == 4:          # –ø—è—Ç–Ω–∏—Ü–∞
        await bot.send_poll(
            CHAT_ID, question=POLL_Q, options=POLL_OPT,
            is_anonymous=False, allows_multiple_answers=False
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    bot = Bot(token=TOKEN)
    await send_main_post(bot)
    await send_poll(bot)
    logging.info("Done ‚úì")

if __name__ == "__main__":
    asyncio.run(main())
