#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
post.py ‚Äî –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç VayboMeter-–±–æ—Ç–∞.

–ù–æ–≤–æ–µ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏:
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ ‚Üí 5 –ø—É–Ω–∫—Ç–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω Troodos) + —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ WMO-–∫–æ–¥–∞.
‚Ä¢ –°—Ç—Ä–µ–ª–∫–∞ –¥–∞–≤–ª–µ–Ω–∏—è ‚Üë/‚Üì/‚Üí ‚Äî –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É —Å—É—Ç–æ—á–Ω–æ–º—É —Ç—Ä–µ–Ω–¥—É (Open-Meteo hourly).
‚Ä¢ –ë–ª–æ–∫ –®—É–º–∞–Ω–∞: –≤–º–µ—Å—Ç–æ ¬´(–∫—ç—à)¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ü–≤–µ—Ç-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  üü¢ –Ω–æ—Ä–º–∞ ‚âà 7.8 Hz‚ÄÇüî¥ –Ω–∏–∂–µ –Ω–æ—Ä–º—ã‚ÄÇüü£ –≤—ã—à–µ –Ω–æ—Ä–º—ã.
‚Ä¢ –í –∞—Å—Ç—Ä–æ–±–ª–æ–∫–µ:
    ‚Äì –≤—ã–≤–æ–¥—è—Ç—Å—è —Ç—Ä–∏ —Å–æ–≤–µ—Ç–∞ –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏,
    ‚Äì –≤–º–µ—Å—Ç–æ ¬´(11 % –æ—Å–≤–µ—â.) ‚Äì ¬ª –≤—Å—Ç–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏,
    ‚Äì —É–±—Ä–∞–Ω–æ –ª–∏—à–Ω–µ–µ ¬´‚Äì¬ª –ø–æ—Å–ª–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏,
    ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω –≤—ã–≤–æ–¥ VoC (–µ—Å–ª–∏ –µ—Å—Ç—å),
    ‚Äì –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç—Ä–∏–∂–∫–∏, –ø–æ–µ–∑–¥–∫–∏ –∏ —Ç.–¥.) –¥–ª—è ¬´—Å–µ–≥–æ–¥–Ω—è¬ª.
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ ¬´–ø–æ–≥–æ–¥–∞¬ª –≤ –∫–æ–Ω—Ü–µ (¬´–≤—Ä–µ–º–µ–Ω–∏¬ª ‚Üí ¬´–ø–æ–≥–æ–¥—É¬ª).
"""

from __future__ import annotations
import os, asyncio, json, logging
from pathlib import Path
from typing import Dict, Any, Tuple, Optional

import requests, pendulum
from requests.exceptions import RequestException
from telegram import Bot, error as tg_err

from utils import (
    compass, clouds_word, get_fact,
    AIR_EMOJI, pm_color, kp_emoji
)
from weather import get_weather, fetch_tomorrow_temps  # —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from air     import get_air, get_sst, get_kp
from pollen  import get_pollen
from schumann import get_schumann
from astro   import astro_events
from gpt     import gpt_blurb
from lunar   import get_day_lunar_info

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ       = pendulum.timezone("Asia/Nicosia")
TODAY    = pendulum.now(TZ).date()
TOMORROW = TODAY.add(days=1)

TOKEN    = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID  = int(os.getenv("CHANNEL_ID", 0))

# C–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ + –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
    "Troodos" : (34.916, 32.823),
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ WMO-–∫–æ–¥–æ–≤ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π
WMO_DESC = {
    0:  "—è—Å–Ω–æ",
    1:  "—á–∞—Å—Ç. –æ–±–ª–∞—á.",
    2:  "–æ–±–ª–∞—á–Ω–æ",
    3:  "–ø–∞—Å–º—É—Ä–Ω–æ",
    45: "—Ç—É–º–∞–Ω",
    48: "–∏–∑–º–æ—Ä–æ–∑—å",
    51: "—Å–ª–∞–±. –º–æ—Ä–æ—Å—å",
    61: "–¥–æ–∂–¥—å",
    71: "—Å–Ω–µ–≥",
    95: "–≥—Ä–æ–∑–∞",
}
def code_desc(code: int) -> str:
    return WMO_DESC.get(code, "‚Äî")

# –°—Ç—Ä–µ–ª–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –¥–∞–≤–ª–µ–Ω–∏—è (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–≤–ª–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å—É—Ç–æ–∫)
def pressure_arrow(hourly: Dict[str, Any]) -> str:
    pr = hourly.get("surface_pressure", [])
    if len(pr) < 2:
        return "‚Üí"
    delta = pr[-1] - pr[0]
    if delta > 1.0:
        return "‚Üë"
    if delta < -1.0:
        return "‚Üì"
    return "‚Üí"

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –®—É–º–∞–Ω–∞ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
def schumann_line(sch: Dict[str, Any]) -> str:
    if sch.get("freq") is None:
        return "üéµ –®—É–º–∞–Ω: –Ω/–¥"
    f   = sch["freq"]
    amp = sch["amp"]
    if f < 7.6:
        emoji = "üî¥"
    elif f > 8.1:
        emoji = "üü£"
    else:
        emoji = "üü¢"
    return f"{emoji} –®—É–º–∞–Ω: {f:.2f} –ì—Ü / {amp:.1f} pT {sch['trend']}"

# –§–æ–ª–±—ç–∫ –¥–ª—è –®—É–º–∞–Ω–∞ (–µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –±–µ—Ä—ë–º –∏–∑ schumann_hourly.json)
def get_schumann_with_fallback() -> Dict[str, Any]:
    sch = get_schumann()
    if sch.get("freq") is not None:
        sch["cached"] = False
        return sch

    cache_path = Path(__file__).parent / "schumann_hourly.json"
    if cache_path.exists():
        try:
            arr = json.loads(cache_path.read_text())
            if arr:
                last = arr[-1]
                pts  = arr[-24:]
                if len(pts) >= 2:
                    freqs = [p["freq"] for p in pts[:-1]]
                    avg   = sum(freqs) / len(freqs)
                    delta = last["freq"] - avg
                    trend = "‚Üë" if delta >= 0.1 else "‚Üì" if delta <= -0.1 else "‚Üí"
                else:
                    trend = "‚Üí"
                return {
                    "freq":   round(last["freq"], 2),
                    "amp":    round(last["amp"], 1),
                    "trend":  trend,
                    "cached": True,
                }
        except Exception as e:
            logging.warning("Schumann cache parse error: %s", e)
    return sch

# ‚îÄ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    P: list[str] = []

    # 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
    P.append(f"<b>üåÖ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({TOMORROW.format('DD.MM.YYYY')})</b>")

    # 2) –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è
    if (sst := get_sst()) is not None:
        P.append(f"üåä –¢–µ–º–ø. –º–æ—Ä—è: {sst:.1f} ¬∞C")

    # 3) –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è Limassol (–æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å)
    lat, lon = CITIES["Limassol"]
    day_max, night_min = fetch_tomorrow_temps(la=lat, lo=lon, tz=TZ.name)
    w_full = get_weather(lat, lon) or {}
    cur    = w_full.get("current", {})
    avg_temp = (day_max + night_min) / 2 if day_max is not None and night_min is not None else cur.get("temperature", 0)

    wind_kmh = cur.get("windspeed", 0)
    wind_deg = cur.get("winddirection", 0)
    press    = cur.get("pressure", 1013)
    clouds   = cur.get("clouds", 0)

    P.append(
        f"üå°Ô∏è –°—Ä. —Ç–µ–º–ø: {avg_temp:.0f} ¬∞C ‚Ä¢ {clouds_word(clouds)} "
        f"‚Ä¢ üí® {wind_kmh:.1f} –∫–º/—á ({compass(wind_deg)}) "
        f"‚Ä¢ üíß {press:.0f} –≥–ü–∞ {pressure_arrow(w_full.get('hourly', {}))}"
    )
    P.append("‚Äî‚Äî‚Äî")

    # 4) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤: —Ç–æ–ø-5 –ø–æ –¥–Ω–µ–≤–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
    temps: Dict[str, Tuple[float, float, int]] = {}
    for city, (la, lo) in CITIES.items():
        d, n = fetch_tomorrow_temps(la, lo, tz=TZ.name)
        if d is None:
            continue
        wcity = get_weather(la, lo) or {}
        code_daily = None
        # –ë–µ—Ä—ë–º –ø–æ–≥–æ–¥—É –ø–æ WMO-–∫–æ–¥—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –∏–∑ daily.weathercode
        try:
            code_list = wcity.get("daily", {}).get("weathercode", [])
            if len(code_list) >= 2:
                code_daily = code_list[1]
        except Exception:
            code_daily = None
        temps[city] = (d, n or d, code_daily or 0)

    if temps:
        P.append("üéñÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å, –ø–æ–≥–æ–¥–∞)</b>")
        medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–Ω–µ–≤–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –±–µ—Ä—ë–º —Ç–æ–ø-5
        top5 = sorted(temps.items(), key=lambda kv: kv[1][0], reverse=True)[:5]
        for i, (city, (d, n, code)) in enumerate(top5):
            desc = code_desc(code)
            P.append(f"{medals[i]} {city}: {d:.1f}/{n:.1f} ¬∞C, {desc}")
        P.append("‚Äî‚Äî‚Äî")

    # 5) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –∏ –ø—ã–ª—å—Ü–∞
    air = get_air() or {}
    lvl = air.get("lvl", "–Ω/–¥")
    P.append("üèôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>")
    P.append(
        f"{AIR_EMOJI.get(lvl, '‚ö™')} {lvl} (AQI {air.get('aqi', '–Ω/–¥')}) | "
        f"PM‚ÇÇ.‚ÇÖ: {pm_color(air.get('pm25'))} | PM‚ÇÅ‚ÇÄ: {pm_color(air.get('pm10'))}"
    )
    if pollen := get_pollen():
        P.append("üåø <b>–ü—ã–ª—å—Ü–∞</b>")
        P.append(
            f"–î–µ—Ä–µ–≤—å—è: {pollen['tree']} | –¢—Ä–∞–≤—ã: {pollen['grass']} | "
            f"–°–æ—Ä–Ω—è–∫–∏: {pollen['weed']} ‚Äî —Ä–∏—Å–∫ {pollen['risk']}"
        )
    P.append("‚Äî‚Äî‚Äî")

    # 6) –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –ø–æ–≥–æ–¥–∞: –≥–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ –∏ –®—É–º–∞–Ω
    kp, kp_state = get_kp()
    if kp is not None:
        P.append(f"{kp_emoji(kp)} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp={kp:.1f} ({kp_state})")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω/–¥")

    sch = get_schumann_with_fallback()
    P.append(schumann_line(sch))
    P.append("‚Äî‚Äî‚Äî")

    # 7) –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    P.append("üåå <b>–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è</b>")
    astro_lines = astro_events()
    if astro_lines:
        for line in astro_lines:
            P.append(line)
    else:
        P.append("‚Äî")  # –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ—Å—Ç–æ —Ä–∏—Å—É–µ–º —á–µ—Ä—Ç—É
    P.append("‚Äî‚Äî‚Äî")

    # 8) GPT-–≤—ã–≤–æ–¥ (–µ—ë ¬´–≤–∏–Ω–æ–≤–Ω–∏–∫¬ª ‚Äî —É—Å–ª–æ–≤–∏–µ –≤–Ω—É—Ç—Ä–∏ gpt_blurb)
    summary, tips = gpt_blurb("–ø–æ–≥–æ–¥–∞")
    P.append(f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>")
    # —Ç—É—Ç –≤—ã–≤–æ–¥–∏–º —Ä–æ–≤–Ω–æ —Ç—Ä–∏ –ø—É–Ω–∫—Ç–∞
    for t in tips[:3]:
        P.append(f"‚Ä¢ {t}")
    P.append("‚Äî‚Äî‚Äî")
    P.append(f"üìö {get_fact(TOMORROW)}")

    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_main_post(bot: Bot) -> None:
    html = build_msg()
    logging.info("Preview (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): %s", html.replace("\n", " | ")[:200])
    try:
        await bot.send_message(
            CHAT_ID,
            html,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info("Message sent ‚úì")
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)
        raise

async def send_poll_if_friday(bot: Bot) -> None:
    if pendulum.now(TZ).weekday() == 4:
        try:
            await bot.send_poll(
                CHAT_ID,
                question="–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î",
                options=["üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏", "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üò¥ –°–ª–µ–≥–∫–∞ –≤—è–ª—ã–π(–∞—è)", "ü§í –í—Å—ë –ø–ª–æ—Ö–æ"],
                is_anonymous=False,
                allows_multiple_answers=False
            )
        except tg_err.TelegramError as e:
            logging.warning("Poll send error: %s", e)

async def main() -> None:
    bot = Bot(token=TOKEN)
    await send_main_post(bot)
    await send_poll_if_friday(bot)

if __name__ == "__main__":
    asyncio.run(main())