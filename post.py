#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VayboMeter 5.1-hotfix1   (10 May 2025)
‚Äî –≤–µ—á–µ—Ä–Ω–∏–π ¬´–¥–∞–π–¥–∂–µ—Å—Ç —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è¬ª –¥–ª—è –õ–∏–º–∞—Å—Å–æ–ª–∞.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
  python-telegram-bot==20.0  requests pendulum python-dateutil numpy
Secrets (GitHub Actions ‚Üí Settings ‚Üí Secrets):
  TELEGRAM_TOKEN, CHANNEL_ID, OPENAI_API_KEY (–æ–ø—Ü.), AIRVISUAL_KEY, TOMORROW_KEY
"""

from __future__ import annotations
import os, sys, json, math, random, logging, requests, pendulum
from typing import Dict, Any, Tuple, List
from telegram import Bot

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
TZ = "Asia/Nicosia"
TODAY = pendulum.now(TZ).date()
TOMORROW = TODAY.add(days=1)

# -------------------- —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca":  (34.916, 33.624),
    "Nicosia":  (35.170, 33.360),
    "Pafos":    (34.776, 32.424),
}
WC = {0:"—è—Å–Ω–æ",1:"–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ",2:"–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è",3:"–ø–∞—Å–º—É—Ä–Ω–æ",
      45:"—Ç—É–º–∞–Ω",48:"—Ç—É–º–∞–Ω/–∏–∑–º–æ—Ä–æ–∑—å",51:"–º–æ—Ä–æ—Å—å",61:"–¥–æ–∂–¥—å",95:"–≥—Ä–æ–∑–∞"}
COMPASS = ["N","NNE","NE","ENE","E","ESE","SE","SSE",
           "S","SSW","SW","WSW","W","WNW","NW","NNW"]
FACTS = [
    "üìú 10 –º–∞—è 1570 –≥. –æ—Å–º–∞–Ω—Å–∫–∏–π —Ñ–ª–æ—Ç –Ω–∞—á–∞–ª –æ—Å–∞–¥—É –ö–∏–ø—Ä–∞ ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º!",
    "üìú 10 –º–∞—è 1838 –≥. –Ω–∞ –ö–∏–ø—Ä–µ –≤—ã—Å–∞–¥–∏–ª–∏ –ø–µ—Ä–≤—ã–µ —Ü–∏—Ç—Ä—É—Å–æ–≤—ã–µ –ø–ª–∞–Ω—Ç–∞—Ü–∏–∏.",
]
SCHUMANN_JOKES = [
    "–¥–∞—Ç—á–∏–∫–∏ –º–æ–ª—á–∞—Ç ‚Äî —Ä–µ—Ç—Ä–∏—Ç üå±",
    "–ó–µ–º–ª—è –º–µ–¥–∏—Ç–∏—Ä—É–µ—Ç‚Ä¶ üßò‚Äç‚ôÇÔ∏è",
    "SR-–≥—Ä–∞—Ñ–∏–∫ —Ä–æ–≤–Ω—ã–π, –∫–∞–∫ flat white ‚òï",
]

HEADERS = {"User-Agent":"vaybometer/5.1"}

# -------------------- helpers
def safe(v, dash="‚Äî"):
    return dash if (v is None or v=="" or (isinstance(v,float) and math.isnan(v))) else v

def deg2compass(deg: float|None) -> str:
    if deg is None: return "‚Äî"
    return COMPASS[int((deg/22.5)+.5)%16]

def aqi_color(val:int)->str:
    return ("üü¢","üü°","üü†","üî¥","üü£")[0 if val<=50 else 1 if val<=100 else 2 if val<=150 else 3 if val<=200 else 4]

def pick_culprit(p,kp,wind,age):
    pool=[]
    if p and p<1005: pool.append(("–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ","üìâ"))
    if kp and kp>=4: pool.append(("–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è","üß≤"))
    if wind and wind>=25: pool.append(("—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä","üí®"))
    if 23<=age<=26: pool.append(("—Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ú–µ—Ä–∫—É—Ä–∏–π","ü™ê"))
    return random.choice(pool or [("–ø–æ–≥–æ–¥—É","üå¶")])

# -------------------- fetchers
def fetch_openmeteo(lat,lon):
    url="https://api.open-meteo.com/v1/forecast"
    params=dict(latitude=lat,longitude=lon,timezone="auto",forecast_days=2,
                current_weather="true",
                daily="temperature_2m_max,temperature_2m_min,weathercode,pressure_msl")
    r=requests.get(url,params=params,timeout=10,headers=HEADERS); r.raise_for_status()
    return r.json()

def fetch_airvisual():
    key=os.getenv("AIRVISUAL_KEY"); 
    if not key: return {}
    url=f"https://api.airvisual.com/v2/nearest_city?key={key}"
    try: return requests.get(url,timeout=10).json().get("data",{})
    except Exception as e: logging.warning("airvisual: %s",e); return {}

def fetch_kp():
    try:
        arr=requests.get("https://services.swpc.noaa.gov/products/noaa-planetary-k-index.json",
                         timeout=10).json()
        return float(arr[-1][1])
    except Exception as e:
        logging.warning("kp: %s",e); return None

def fetch_schumann():
    for u in ("https://schumann-resonances.s3.amazonaws.com/latest.csv",
              "https://gci.mixonic.com/SR_latest.csv"):
        try:
            txt=requests.get(u,timeout=10).text.strip().splitlines()
            _,*rows=txt
            f,a=map(float,rows[-1].split(",")[1:3]); return f,a
        except Exception: continue
    return random.choice(SCHUMANN_JOKES)

def fetch_pollen():
    key=os.getenv("TOMORROW_KEY"); 
    if not key: return {}
    url="https://api.tomorrow.io/v4/weather/forecast"
    params=dict(location="34.707,33.022",apikey=key,timesteps="1d",
                fields="pollenTreeIndex,pollenGrassIndex,pollenWeedIndex")
    try:
        js=requests.get(url,params=params,timeout=10).json()
        d=js["timelines"]["daily"][0]["values"]
        scale=["üü¢ –Ω–∏–∑–∫–∏–π","üü° —É–º–µ—Ä–µ–Ω–Ω—ã–π","üü† –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π","üî¥ –≤—ã—Å–æ–∫–∏–π","üü£ —ç–∫—Å—Ç—Ä–µ–º."]
        lvl=lambda x: scale[min(int(x),4)]
        return {"–î–µ—Ä–µ–≤—å—è":lvl(d["pollenTreeIndex"]),
                "–¢—Ä–∞–≤—ã":lvl(d["pollenGrassIndex"]),
                "–°–æ—Ä–Ω—è–∫–∏":lvl(d["pollenWeedIndex"])}
    except Exception as e: logging.warning("pollen: %s",e); return {}

# -------------------- astro
def moon_phase():
    now=pendulum.now(TZ)
    base=pendulum.datetime(2000,1,6,tz=TZ)
    age=((now-base).in_days())%29.53
    pct=int(age/29.53*100)
    sign="‚ôà‚ôâ‚ôä‚ôã‚ôå‚ôç‚ôé‚ôè‚ôê‚ôë‚ôí‚ôì"[int(((now.timestamp())//2.46e6)%12)]
    return pct,sign,age

def astro_events():
    pct,sign,_=moon_phase()
    return [f"–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞ {sign} ({pct} %)",
            "–ú–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç",
            "Eta Aquarids (–º–µ—Ç–µ–æ—Ä—ã)"]

# -------------------- build
def build_msg()->str:
    om=fetch_openmeteo(*CITIES["Limassol"])
    daily,cur=om["daily"],om["current_weather"]
    dmax=daily["temperature_2m_max"][1]; dmin=daily["temperature_2m_min"][1]
    wcode=daily["weathercode"][1]; desc=WC.get(int(wcode),"–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è")
    press=daily["pressure_msl"][1]
    windspd,winddir=cur.get("windspeed"),deg2compass(cur.get("winddirection"))

    temps={}
    for c,(lat,lon) in CITIES.items():
        try: temps[c]=fetch_openmeteo(lat,lon)["daily"]["temperature_2m_max"][1]
        except Exception: temps[c]=None
    warm=max((k for k,v in temps.items() if v),key=lambda k:temps[k])
    cold=min((k for k,v in temps.items() if v),key=lambda k:temps[k])

    aqi=fetch_airvisual(); aqi_val=int(aqi.get("current",{}).get("pollution",{}).get("aqius",64))
    pm2=aqi.get("current",{}).get("pollution",{}).get("p2"); pm10=aqi.get("current",{}).get("pollution",{}).get("p1")
    pollen=fetch_pollen()
    kp=fetch_kp()
    sch=fetch_schumann()
    pct,sign,age=moon_phase()
    culprit,emo=pick_culprit(press,kp,windspd,age)

    lines=[
        f"üåû <b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ {TOMORROW.format('DD.MM.YYYY')}</b>",
        f"<b>–¢–µ–º–ø. –¥–Ω—ë–º:</b> –¥–æ {dmax} ¬∞C",
        f"<b>–¢–µ–º–ø. –Ω–æ—á—å—é:</b> –æ–∫–æ–ª–æ {dmin} ¬∞C",
        f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {desc}",
        f"<b>–û—Å–∞–¥–∫–∏:</b> –Ω–µ –æ–∂–∏–¥–∞—é—Ç—Å—è",
        f"<b>–í–µ—Ç–µ—Ä:</b> {safe(windspd)} –∫–º/—á, {winddir}",
        f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {round(press,1)} –≥–ü–∞",
        f"<i>–°–∞–º—ã–π —Ç—ë–ø–ª—ã–π –≥–æ—Ä–æ–¥:</i> {warm} ({temps[warm]:.1f} ¬∞C)",
        f"<i>–°–∞–º—ã–π –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –≥–æ—Ä–æ–¥:</i> {cold} ({temps[cold]:.1f} ¬∞C)",
        "‚Äî‚Äî‚Äî",
        "üè≠ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>",
        f"AQI {aqi_color(aqi_val)} {aqi_val} | PM2.5: {safe(pm2)} | PM10: {safe(pm10)}",
        "üåø <b>–ü—ã–ª—å—Ü–∞</b>",
        " | ".join(f"{k}: {v}" for k,v in pollen.items()) if pollen else "–∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        "üß≤ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>",
        f"Kp {safe(kp)}",
        "üé∂ <b>–†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞</b>",
        f"{sch if isinstance(sch,str) else f'{sch[0]:.1f} –ì—Ü ¬∑ A={sch[1]:.1f}'}",
        "üåä <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã</b>",
        f"–°–µ–π—á–∞—Å: {safe(cur.get('temperature'))} ¬∞C",
        "üîÆ <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è</b>",
        " | ".join(astro_events()),
        "‚Äî‚Äî‚Äî",
        "üìù <b>–í—ã–≤–æ–¥</b>",
        f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫ ‚Äî –≤–∏–Ω–æ–≤–Ω–∏–∫: {culprit}! {emo}",
        "‚Äî‚Äî‚Äî",
        "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>",
        "‚Ä¢ üíß –ü–µ–π—Ç–µ –≤–æ–¥—É ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –¥–∞–≤–ª–µ–Ω–∏–∏" if culprit=="–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ" else "",
        "‚Ä¢ üõå –í—ã—Å—ã–ø–∞–π—Ç–µ—Å—å ‚Äî –º–∞–≥–Ω–∏—Ç–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Å–Ω–∏–∂–∞—é—Ç —Ç–æ–Ω—É—Å" if culprit=="–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è" else "",
        "‚Ä¢ üí® –ó–∞—Ö–≤–∞—Ç–∏—Ç–µ —à–∞—Ä—Ñ ‚Äî –≤–µ—Ç–µ—Ä –º–æ–∂–µ—Ç —É—Å–∏–ª–∏–≤–∞—Ç—å—Å—è" if culprit=="—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä" else "",
        "‚Ä¢ ‚ú® –ù–æ—á—å—é –≤–∑–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ –Ω–µ–±–æ ‚Äî –º–µ—Ç–µ–æ—Ä—ã Eta Aquarids!",
        random.choice(FACTS),
    ]
    html="\n".join(l for l in lines if l)
    logging.info("Preview: %s", html.replace('\n',' | ')[:230])
    return html

# -------------------- main
async def main():
    TOKEN,CHAT=os.getenv("TELEGRAM_TOKEN"),os.getenv("CHANNEL_ID")
    if not TOKEN or not CHAT:
        logging.error("Missing TELEGRAM_TOKEN / CHANNEL_ID"); return
    await Bot(TOKEN).send_message(int(CHAT), build_msg(), parse_mode="HTML",
                                  disable_web_page_preview=True)

if __name__=="__main__":
    import asyncio, warnings; warnings.filterwarnings("ignore", category=FutureWarning)
    asyncio.run(main())
