#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
schumann.py
~~~~~~~~~~~
–†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞ ‚Äî —á–∞—Å—Ç–æ—Ç–∞/–∞–º–ø–ª–∏—Ç—É–¥–∞ –ø–µ—Ä–≤–æ–π –≥–∞—Ä–º–æ–Ω–∏–∫–∏ (SR-1).

–§—É–Ω–∫—Ü–∏–∏
--------
get_schumann() -> dict
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –∏ —Ñ–ª–∞–≥ ¬´high¬ª
get_schumann_trend(hours=24) -> str
    –°—Ç—Ä–µ–ª–∫–∞ ‚Üë / ‚Üì / ‚Üí –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–Ω–¥–∞ –∑–∞ *hours*

–ò—Å—Ç–æ—Ä–∏—è
--------
‚Ä¢ –ö–∞–∂–¥—ã–π —É—Å–ø–µ—à–Ω—ã–π –∑–∞–º–µ—Ä –ø–∏—à–µ—Ç—Å—è –≤ ¬´~/.cache/sr1.json¬ª
  [{ts: ISO8601, freq:‚Ä¶, amp:‚Ä¶}, ‚Ä¶]
‚Ä¢ –§–∞–π–ª –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è 72 —á–∞—Å–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö (‚âà 72 –∑–∞–ø–∏—Å–∏ –ø–æ –æ–¥–Ω–æ–º—É –≤ —á–∞—Å)
"""

from __future__ import annotations

import json
import logging
import os
import random
from pathlib import Path
from typing import Any, Dict, List, Optional

import pendulum

from utils import _get  # HTTP-–æ–±—ë—Ä—Ç–∫–∞ —Å retry

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CACHE_DIR = Path.home() / ".cache"
CACHE_DIR.mkdir(exist_ok=True)
HISTORY_FILE = CACHE_DIR / "sr1.json"

SR_URLS = (
    "https://api.glcoherence.org/v1/earth",        # JSON {frequency_1, amplitude_1}
    "https://gci-api.ucsd.edu/data/latest",        # JSON {data: {sr1:{frequency,‚Ä¶}}}
)

SCH_QUOTES = [
    "–¥–∞—Ç—á–∏–∫–∏ –º–æ–ª—á–∞—Ç ‚Äî —Ä–µ—Ç—Ä–∏—Ç üå±",
    "–∫–æ—à–∞—á–∏–π –º—è—É-—Ñ–∞–∫—Ç–æ—Ä –∑–∞–≥–ª—É—à–∏–ª —Å–µ–Ω—Å–æ—Ä—ã üò∏",
    "–≤–æ–ª–Ω—ã —É—à–ª–∏ –ª–æ–≤–∏—Ç—å —á–∞–µ–∫ üê¶",
    "–ø–æ–∫–∞–∑–∞–Ω–∏—è –º–µ–¥–∏—Ç–∏—Ä—É—é—Ç üßò",
    "–¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–ø—É—Å–∫–µ üèùÔ∏è",
    "–®—É–º–∞–Ω —Å–ø–∏—Ç ‚Äî –Ω–µ –±—É–¥–∏–º üîï",
    "—Ç–∏—à–∏–Ω–∞ –≤ —ç—Ñ–∏—Ä–µ‚Ä¶ üéß",
]


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _load_history() -> List[Dict[str, Any]]:
    if HISTORY_FILE.exists():
        try:
            return json.loads(HISTORY_FILE.read_text())
        except Exception:
            logging.warning("SR1 history corrupt - recreating")
    return []


def _save_history(hist: List[Dict[str, Any]]) -> None:
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 72 —á.
    cutoff = pendulum.now("UTC").subtract(hours=72)
    hist = [h for h in hist if pendulum.parse(h["ts"]) >= cutoff]
    try:
        HISTORY_FILE.write_text(json.dumps(hist, ensure_ascii=False))
    except Exception as e:
        logging.warning("SR1 history save error: %s", e)


def _append_history(freq: float, amp: float) -> None:
    hist = _load_history()
    hist.append({"ts": pendulum.now("UTC").to_iso8601_string(),
                 "freq": round(freq, 2),
                 "amp": round(amp, 1)})
    _save_history(hist)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ public API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_schumann() -> Dict[str, Any]:
    """
    –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ SR_URLS.
    ‚Ä¢ high = True, –µ—Å–ª–∏ freq > 8 –ì—Ü **–∏–ª–∏** amp > 100.
    ‚Ä¢ –ü—Ä–∏ —É—Å–ø–µ—Ö–µ –∫–µ—à–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é.
    ‚Ä¢ –ü—Ä–∏ –¥–≤—É—Ö –æ—à–∏–±–∫–∞—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"msg": <—Å–ª—É—á–∞–π–Ω–∞—è —Ñ—Ä–∞–∑–∞> }.
    """
    for url in SR_URLS:
        j = _get(url)
        if not j:
            continue
        try:
            if "data" in j:                 # —Ñ–æ—Ä–º–∞—Ç GCI-API
                j = j["data"]["sr1"]
            freq = float(j.get("frequency_1") or j.get("frequency"))
            amp  = float(j.get("amplitude_1") or j.get("amplitude"))
        except Exception as e:
            logging.warning("Schumann parse %s: %s", url, e)
            continue

        _append_history(freq, amp)          # –ø–∏—à–µ–º –∏—Å—Ç–æ—Ä–∏—é
        return {
            "freq": round(freq, 2),
            "amp":  round(amp, 1),
            "high": (freq > 8.0) or (amp > 100.0),
        }

    # –æ–±–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
    return {"msg": random.choice(SCH_QUOTES)}


def get_schumann_trend(hours: int = 24) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–µ–ª–∫—É —Ç—Ä–µ–Ω–¥–∞ —á–∞—Å—Ç–æ—Ç—ã (‚Üë / ‚Üì / ‚Üí) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ *hours*.
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî '‚Üí'.
    """
    hist = _load_history()
    if len(hist) < 2:
        return "‚Üí"

    now      = pendulum.now("UTC")
    earlier: Optional[Dict[str, Any]] = None
    latest   = hist[-1]

    target_ts = now.subtract(hours=hours)
    # –∏—â–µ–º –∑–∞–ø–∏—Å—å, –±–ª–∏–∂–∞–π—à—É—é, –Ω–æ <= —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    for rec in reversed(hist):
        if pendulum.parse(rec["ts"]) <= target_ts:
            earlier = rec
            break
    if not earlier:
        return "‚Üí"

    diff = latest["freq"] - earlier["freq"]
    if diff >= 0.05:     # +0.05 –ì—Ü –∏ –±–æ–ª–µ–µ ‚Äî —Ä–æ—Å—Ç
        return "‚Üë"
    if diff <= -0.05:    # ‚àí0.05 –ì—Ü –∏ –º–µ–Ω–µ–µ ‚Äî –ø–∞–¥–µ–Ω–∏–µ
        return "‚Üì"
    return "‚Üí"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CLI —Ç–µ—Å—Ç  `python -m schumann` ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":           # demo
    from pprint import pprint

    info = get_schumann()
    pprint(info)

    if "freq" in info:
        arrow = get_schumann_trend()
        print(f"–¢—Ä–µ–Ω–¥ 24 —á: {arrow}")
