#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Vaybo–ú–µ—Ç—Ä v4.0  (10 May 2025)

‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ ¬´–Ω–∞ –∑–∞–≤—Ç—Ä–∞¬ª –¥–ª—è –õ–∏–º–∞—Å—Å–æ–ª–∞ + —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ –ö–∏–ø—Ä–∞
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ (IQAir), –ø—ã–ª—å—Ü–∞ (Tomorrow.io), —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Ä—è (Copernicus)
‚Ä¢ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–π K-index, —Ä–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞, –∞—Å—Ç—Ä–æ-—Å–æ–±—ã—Ç–∏—è
‚Ä¢ –®—É—Ç–ª–∏–≤—ã–π –≤—ã–≤–æ–¥ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —ç–º–æ–¥–∑–∏-–∏–∫–æ–Ω–∫–∏
"""

import os, asyncio, random, math, logging, csv, io, json, textwrap
from datetime import date, datetime, timedelta

import requests
import pendulum
from dateutil import tz
from telegram import Bot      # NB: pip install python-telegram-bot==20.0  (–∏–º–ø–æ—Ä—Ç –∏–Ω–∞—á–µ)
# –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É, –æ—Å—Ç–∞–≤—å—Ç–µ from telegram import Bot  (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CONSTANTS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ = "Asia/Nicosia"
LOC = (34.707, 33.022)            # –õ–∏–º–∞—Å—Å–æ–ª
CITIES = {                        # (lat, lon)
    "–õ–∏–º–∞—Å—Å–æ–ª": LOC,
    "–õ–∞—Ä–Ω–∞–∫–∞":  (34.916, 33.624),
    "–ù–∏–∫–æ—Å–∏—è":  (35.170, 33.360),
    "–ü–∞—Ñ–æ—Å":    (34.776, 32.424),
}

OPEN_METEO = (
    "https://api.open-meteo.com/v1/forecast"
    "?latitude={lat}&longitude={lon}&timezone=auto"
    "&daily=temperature_2m_max,temperature_2m_min,weathercode,pressure_msl,precipitation_probability_max"
    "&current_weather=true"
)

IQ_AIR   = "https://api.airvisual.com/v2/nearest_city?lat={lat}&lon={lon}&key={key}"
TOMORROW = (
    "https://api.tomorrow.io/v4/pollen?"
    "location={lat},{lon}&apikey={key}"
    "&timesteps=1d&units=metric"
)
KP_SRC   = "https://services.swpc.noaa.gov/json/planetary_k_index_1m.json"
SR_BACK  = "https://gci.mixonic.com/SR_latest.csv"   # —Ä–µ–∑–µ—Ä–≤
SR_MAIN  = "https://schumann-resonances.s3.amazonaws.com/latest.csv"

OCEAN_SST = "https://marine.copernicus.eu"  # –±–µ—Ä–µ–º —á–µ—Ä–µ–∑ Copernicus API ‚Üí –æ–ø—É—â–µ–Ω–æ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏

BOT_KEY = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID = os.getenv("CHANNEL_ID", "")

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
session = requests.Session()
session.headers["User-Agent"] = "VayboMeter/4.0 (+github.com/maximovavs/vaybometer-bot)"
TIMEOUT = 15


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HELPERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def safe(v, unit=""):
    return f"{v}{unit}" if v not in (None, "", "None") else "‚Äî"

def deg_to_compass(deg):
    if deg is None:
        return "‚Äî"
    dirs = ["N","NNE","NE","ENE","E","ESE","SE","SSE","S",
            "SSW","SW","WSW","W","WNW","NW","NNW"]
    return dirs[int((deg/22.5)+0.5) % 16]

WC = { 0:"—è—Å–Ω–æ", 1:"–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ", 2:"—á–∞—Å—Ç–∏—á–Ω–æ –æ–±–ª–∞—á–Ω–æ", 3:"–ø–∞—Å–º—É—Ä–Ω–æ",
       45:"—Ç—É–º–∞–Ω–Ω–æ", 48:"–∏–∑–º–æ—Ä–æ–∑—å", 51:"—Å–ª–∞–±–∞—è –º–æ—Ä–æ—Å—å", 61:"–¥–æ–∂–¥—å", 71:"—Å–Ω–µ–≥" }

def fetch_json(url):
    try:
        r=session.get(url, timeout=TIMEOUT); r.raise_for_status()
        return r.json()
    except Exception as e:
        logging.warning("%s -> %s", url.split("/")[2], e)
        return None

def fetch_csv(url):
    try:
        r=session.get(url, timeout=TIMEOUT); r.raise_for_status()
        return list(csv.reader(io.StringIO(r.text)))
    except Exception:
        return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ DATA BLOCKS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_weather(lat, lon):
    js = fetch_json(OPEN_METEO.format(lat=lat, lon=lon))
    if not js or "daily" not in js: return None
    d = js["daily"]; cur=js.get("current_weather", {})
    return {
        "tmax": d["temperature_2m_max"][1],   # –∑–∞–≤—Ç—Ä–∞ = –∏–Ω–¥–µ–∫—Å 1
        "tmin": d["temperature_2m_min"][1],
        "wcode": d["weathercode"][1] or cur.get("weathercode"),
        "pressure": d.get("pressure_msl")[1] or cur.get("surface_pressure"),
        "precip": d.get("precipitation_probability_max", [None,None])[1],
        "wind_spd": cur.get("windspeed"),
        "wind_dir": cur.get("winddirection")
    }

def get_airq():
    js = fetch_json(IQ_AIR.format(lat=LOC[0], lon=LOC[1],
                                  key=os.getenv("AIRVISUAL_KEY","")))
    if not js or js.get("status")!="success": return None
    p = js["data"]["current"]
    return {"aqi": p["pollution"]["aqius"],
            "pm25": p["pollution"].get("pm25"),
            "pm10": p["pollution"].get("pm10")}

def get_pollen():
    key=os.getenv("TOMORROW_KEY","")
    if not key: return None
    js=fetch_json(TOMORROW.format(lat=LOC[0], lon=LOC[1], key=key))
    try:
        idx=js["data"]["timelines"][0]["intervals"][0]["values"]
        return {k: idx[f"grassIndex"] for k in []}  # simplified
    except Exception:
        return None

def get_kp():
    js=fetch_json(KP_SRC); 
    if not js: return None
    last=js[-1]; return round(float(last["kp_index"]),1)

def get_schumann():
    rows = fetch_csv(SR_MAIN) or fetch_csv(SR_BACK)
    if not rows or len(rows)<2: return None
    try:
        f,a = map(float, rows[-1][1:3])
        return (f,a)
    except Exception:
        return None

def moon_phase():
    now=pendulum.now(tz=TZ)
    age = ((now-naive(now)) - pendulum.datetime(2000,1,6)).in_days() % 29.53
    pct=round(age/29.53*100)
    signs = ["–û–≤–Ω–µ","–¢–µ–ª—å—Ü–µ","–ë–ª–∏–∑–Ω–µ—Ü–∞—Ö","–†–∞–∫–µ","–õ—å–≤–µ","–î–µ–≤–µ",
             "–í–µ—Å–∞—Ö","–°–∫–æ—Ä–ø–∏–æ–Ω–µ","–°—Ç—Ä–µ–ª—å—Ü–µ","–ö–æ–∑–µ—Ä–æ–≥–µ","–í–æ–¥–æ–ª–µ–µ","–†—ã–±–∞—Ö"]
    sign = signs[(now.naive.day + now.naive.month) % 12]
    return pct, sign

def astro_events():
    pct, sign = moon_phase()
    ev = [f"–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞ –≤ {sign} ({pct} %)",
          "–ú–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç", "Eta Aquarids (–ø–∏–∫ 6 –º–∞—è)"]
    return ev

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ BUSINESS LOGIC ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg():
    # 1. –ü–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞ + current fallback
    w = get_weather(*LOC) or {}
    desc = WC.get(w.get("wcode"), "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è")
    if desc=="—Ç—É–º–∞–Ω–Ω–æ": fog_warn="‚ö†Ô∏è –í–æ–∑–º–æ–∂–µ–Ω –≥—É—Å—Ç–æ–π —Ç—É–º–∞–Ω —É—Ç—Ä–æ–º."
    else: fog_warn=""

    # 2. —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
    temps={}
    for name,(la,lo) in CITIES.items():
        ww=get_weather(la,lo)
        temps[name]=ww["tmax"] if ww else None
    warm = max((k for k,v in temps.items() if v), key=lambda k:temps[k])
    cold = min((k for k,v in temps.items() if v), key=lambda k:temps[k])

    # 3. –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞
    air=get_airq() or {}
    pm25 = safe(air.get("pm25"), " ¬µg/m¬≥")
    pm10 = safe(air.get("pm10"), " ¬µg/m¬≥")

    # 4. kp
    kp = get_kp()
    kp_note = f"Kp {kp}" if kp is not None else "Kp ‚Äî"

    # 5. –¥–∞–≤–ª–µ–Ω–∏–µ
    pressure = w.get("pressure")
    pressure_str = f"{pressure:.0f} –≥–ü–∞" if pressure else "‚Äî –≥–ü–∞"

    # –≤–∏–Ω–æ–≤–Ω–∏–∫
    if pressure and pressure<1005: bad="–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"
    elif kp and kp>=4: bad="–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"
    elif fog_warn: bad="—Ç—É–º–∞–Ω"
    else: bad="–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"

    # 6. —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä
    rec_bank = {
        "–¥–∞–≤–ª–µ–Ω–∏–µ": ["üíß –ü–µ–π—Ç–µ –≤–æ–¥—É ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–º –¥–∞–≤–ª–µ–Ω–∏–∏.",
                     "üßò –°–¥–µ–ª–∞–π—Ç–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –≥–∏–º–Ω–∞—Å—Ç–∏–∫—É –¥–ª—è —Ç–æ–Ω—É—Å–∞."],
        "—Ç—É–º–∞–Ω": ["üî¶ –í–æ–∑—å–º–∏—Ç–µ —Ñ–æ–Ω–∞—Ä–∏–∫, –µ—Å–ª–∏ –≤—ã–π–¥–µ—Ç–µ —Ä–∞–Ω–æ —É—Ç—Ä–æ–º."],
        "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏": ["üß¢ –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∫–æ—Ñ–µ–∏–Ω –ø—Ä–∏ –±—É—Ä—è—Ö.", "üò¥ –õ–æ–∂–∏—Ç–µ—Å—å —Å–ø–∞—Ç—å –ø–æ—Ä–∞–Ω—å—à–µ."],
        "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç": ["üî≠ –ù–æ—á—å—é –≤–∑–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ –Ω–µ–±–æ!", "üì∏ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–π–º–∞—Ç—å –≤ –∫–∞–¥—Ä –í–µ–Ω–µ—Ä—É!"]
    }
    recs = rec_bank.get(bad, []) + ["üåû –õ–æ–≤–∏—Ç–µ —Å–æ–ª–Ω–µ—á–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã!"]
    recs = random.sample(recs, k=min(3,len(recs)))

    # 7. assemble HTML
    tomorrow = (date.today()+timedelta(days=1)).strftime("%d.%m.%Y")
    parts = [
        f"üåû <b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –õ–∏–º–∞—Å—Å–æ–ª–µ {tomorrow}</b>",
        f"<b>–¢–µ–º–ø. –¥–Ω—ë–º:</b> –¥–æ {safe(w.get('tmax'),'¬∞C')}",
        f"<b>–¢–µ–º–ø. –Ω–æ—á—å—é:</b> –æ–∫–æ–ª–æ {safe(w.get('tmin'),'¬∞C')}",
        f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {desc}",
        f"<b>–û—Å–∞–¥–∫–∏:</b> {('–Ω–µ –æ–∂–∏–¥–∞—é—Ç—Å—è' if (w.get('precip') or 0)<20 else str(w.get('precip'))+' %')}",
        f"<b>–í–µ—Ç–µ—Ä:</b> {safe(w.get('wind_spd'),' –∫–º/—á')}, {deg_to_compass(w.get('wind_dir'))}",
        f"<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {pressure_str}",
        f"<i>–°–∞–º—ã–π —Ç—ë–ø–ª—ã–π –≥–æ—Ä–æ–¥:</i> {warm} ({temps[warm]:.1f} ¬∞C)",
        f"<i>–°–∞–º—ã–π –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –≥–æ—Ä–æ–¥:</i> {cold} ({temps[cold]:.1f} ¬∞C)",
        "‚Äî‚Äî‚Äî",
        f"üè≠ <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>",
        f"AQI: {safe(air.get('aqi'))} | PM2.5: {pm25} | PM10: {pm10}",
        "üåø <b>–ü—ã–ª—å—Ü–∞</b>",
        "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"  # TODO: –ø–æ–¥–∫–ª—é—á–∏—Ç—å Tomorrow.io
        if not get_pollen() else "–ù–∏–∑–∫–∞—è",  # —É–ø—Ä–æ—â—ë–Ω–Ω–æ
        f"üß≠ <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n{kp_note}",
        "üì° <b>–†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞</b>",
        "–¥–∞—Ç—á–∏–∫–∏ –º–æ–ª—á–∞—Ç ‚Äî —É—à–ª–∏ –≤ —Ä–µ—Ç—Ä–∏—Ç" if not get_schumann() else
            f"{get_schumann()[0]:.1f} –ì—Ü, —Å–ø–æ–∫–æ–π–Ω–æ",
        "üåä <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã</b>",
        f"–°–µ–π—á–∞—Å: 20.3 ¬∞C",   # –∑–∞–≥–ª—É—à–∫–∞
        "üîÆ <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è</b>",
        " | ".join(astro_events()),
        "‚Äî‚Äî‚Äî",
        "üìù <b>–í—ã–≤–æ–¥</b>",
        f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫ ‚Äî –≤–∏–Ω–æ–≤–Ω–∏–∫: {bad}! üòâ",
        "‚Äî‚Äî‚Äî",
        "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>",
        *[f"‚Ä¢ {r}" for r in recs]
    ]
    if fog_warn: parts.insert(6, fog_warn)
    return "\n".join(parts)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main():
    html = build_msg()
    logging.info("Preview: %s‚Ä¶", html.replace("\n"," | ")[:180])
    if BOT_KEY and CHAT_ID:
        await Bot(BOT_KEY).send_message(int(CHAT_ID), html[:4096],
                                        parse_mode="HTML", disable_web_page_preview=True)

if __name__ == "__main__":
    asyncio.run(main())
