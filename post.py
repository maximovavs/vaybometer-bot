#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os, asyncio, logging
from typing import Any, Dict, Optional

import pendulum
from telegram import Bot, error as tg_err

from utils import (
    compass, clouds_word, wind_phrase, safe, get_fact,
    WEATHER_ICONS, AIR_EMOJI, WMO_DESCRIPTIONS
)
from weather import get_weather
from air import get_air, get_pollen, get_sst, get_kp      # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ get_sst, get_kp
from schumann import get_schumann
from astro import astro_events
from gpt import gpt_blurb

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Constants ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ           = pendulum.timezone("Asia/Nicosia")
TODAY        = pendulum.now(TZ).date()
TOMORROW     = TODAY.add(days=1)
TOKEN        = os.environ["TELEGRAM_TOKEN"]
CHAT_ID      = int(os.environ["CHANNEL_ID"])

CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ BUILD_MESSAGE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    P: list[str] = []

    # === 1) –ü–æ–≥–æ–¥–∞ –Ω–∞ –ö–∏–ø—Ä–µ (—Å—Ä–µ–¥–Ω–µ–µ) ===
    temps: list[tuple[float, float]] = []
    for la, lo in CITIES.values():
        w = get_weather(la, lo)
        if not w:
            continue

        daily = w["daily"]
        if isinstance(daily, dict):               # open-meteo dict-arrays
            dmax = daily["temperature_2m_max"]
            dmin = daily["temperature_2m_min"]
            day  = dmax[1] if len(dmax) > 1 else dmax[0]
            night= dmin[1] if len(dmin) > 1 else dmin[0]
        else:                                     # list (open-meteo / openweather)
            blk  = daily[1] if len(daily) > 1 else daily[0]
            if "temp" in blk:                     # openweather
                day, night = blk["temp"]["max"], blk["temp"]["min"]
            else:                                 # open-meteo list-dict
                day   = blk["temperature_2m_max"][-1]
                night = blk["temperature_2m_min"][0]
        temps.append((day, night))

    avg_day   = sum(d for d, _ in temps) / len(temps)
    avg_night = sum(n for _, n in temps) / len(temps)

    # –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –õ–∏–º–∞—Å—Å–æ–ª–∞
    w0 = get_weather(*CITIES["Limassol"])
    if not w0:
        raise RuntimeError("–ù–µ—Ç –ø–æ–≥–æ–¥—ã –¥–ª—è –õ–∏–º–∞—Å—Å–æ–ª–∞")

    cur = w0.get("current") or w0["current_weather"]
    wind_kmh = cur.get("windspeed") or cur.get("wind_speed") or 0.0
    wind_deg = cur.get("winddirection") or cur.get("wind_deg") or 0.0

    # –¥–∞–≤–ª–µ–Ω–∏–µ (–∏–∑ current –∏–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —á–∞—Å–∞ hourly)
    press = (
        cur.get("pressure") or
        w0.get("hourly", {}).get("surface_pressure", [1013])[0]
    )

    # –æ–±–ª–∞—á–Ω–æ—Å—Ç—å (–∏–∑ current –∏–ª–∏ hourly)
    clouds_pct = cur.get("clouds")
    if clouds_pct is None:
        clouds_pct = w0.get("hourly", {}).get("cloud_cover", [0])[0]
    cloud_w = clouds_word(clouds_pct)

    icon = WEATHER_ICONS.get(cloud_w, "üå¶Ô∏è")
    P += [
        f"{icon} –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –ö–∏–ø—Ä–µ "
        f"({TOMORROW.format('DD.MM.YYYY')})",
        f"üå°Ô∏è –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø.: {avg_day:.0f} ¬∞C",
        f"üìà –¢–µ–º–ø. –¥–Ω—ë–º/–Ω–æ—á—å—é: {avg_day:.1f} / {avg_night:.1f} ¬∞C",
        f"üå§ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {cloud_w}",
        f"üí® –í–µ—Ç–µ—Ä: {wind_phrase(wind_kmh)} "
        f"({wind_kmh:.1f} –∫–º/—á, {compass(wind_deg)})",
        f"üîΩ –î–∞–≤–ª–µ–Ω–∏–µ: {press:.0f} –≥–ü–∞",
        "‚Äî‚Äî‚Äî",
    ]

    # === 2) –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å) ===
    city_t: list[tuple[str, float, float]] = []
    for city, (la, lo) in CITIES.items():
        w = get_weather(la, lo)
        if not w:
            continue
        daily = w["daily"]
        if isinstance(daily, dict):
            dmax = daily["temperature_2m_max"]
            dmin = daily["temperature_2m_min"]
            day  = dmax[1] if len(dmax) > 1 else dmax[0]
            night= dmin[1] if len(dmin) > 1 else dmin[0]
        else:
            blk = daily[1] if len(daily) > 1 else daily[0]
            if "temp" in blk:
                day, night = blk["temp"]["max"], blk["temp"]["min"]
            else:
                day, night = blk["temperature_2m_max"][-1], blk["temperature_2m_min"][0]
        city_t.append((city, day, night))

    city_t.sort(key=lambda x: x[1], reverse=True)
    medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£"]
    P.append("üéñÔ∏è –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å)")
    for i, (c, d, n) in enumerate(city_t[:4]):
        P.append(f"{medals[i]} {c}: {d:.1f}/{n:.1f} ¬∞C")
    P.append("‚Äî‚Äî‚Äî")

    # === 3) –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ + –ø—ã–ª—å—Ü–∞ ===
    air = get_air() or {}
    P.append("üèôÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞")
    if air:
        P.append(
            f"{AIR_EMOJI[air['lvl']]} {air['lvl']} (AQI {air['aqi']}) | "
            f"PM2.5: {safe(air['pm25'],' ¬µg/–º¬≥')} | "
            f"PM10: {safe(air['pm10'],' ¬µg/–º¬≥')}"
        )
    else:
        P.append("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    pollen = get_pollen()
    if pollen:
        idx = lambda v: ["–Ω–µ—Ç", "–Ω–∏–∑–∫–∏–π", "—É–º–µ—Ä–µ–Ω–Ω—ã–π", "–≤—ã—Å–æ–∫–∏–π",
                         "–æ—á. –≤—ã—Å–æ–∫–∏–π", "—ç–∫—Å—Ç—Ä–∏–º"][int(round(v))]
        P += [
            "üåø –ü—ã–ª—å—Ü–∞",
            f"–î–µ—Ä–µ–≤—å—è ‚Äì {idx(pollen['treeIndex'])}, "
            f"–¢—Ä–∞–≤—ã ‚Äì {idx(pollen['grassIndex'])}, "
            f"–°–æ—Ä–Ω—è–∫–∏ ‚Äì {idx(pollen['weedIndex'])}"
        ]
    P.append("‚Äî‚Äî‚Äî")

    # === 4) –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ + –®—É–º–∞–Ω + –º–æ—Ä–µ + –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è ===
    kp, kp_state = get_kp()
    sch          = get_schumann()
    sst          = get_sst()
    astro        = astro_events()

    P.append(
        f"üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: Kp {kp:.1f} ({kp_state})"
        if kp is not None else "üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    )

    if sch.get("high"):
        P.append("üéµ –®—É–º–∞–Ω: ‚ö°Ô∏è –≤–∏–±—Ä–∞—Ü–∏–∏ –ø–æ–≤—ã—à–µ–Ω—ã")
    elif "freq" in sch:
        P.append(f"üéµ –®—É–º–∞–Ω: ‚âà{sch['freq']:.1f} –ì—Ü")
    else:
        P.append(f"üéµ –®—É–º–∞–Ω: {sch.get('msg','–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")

    if sst is not None:
        P.append(f"üåä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: {sst:.1f} ¬∞C")

    if astro:
        P.append("üåå –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è ‚Äì " + " | ".join(astro))
    P.append("‚Äî‚Äî‚Äî")

    # === 5) –í—ã–≤–æ–¥ + —Å–æ–≤–µ—Ç—ã GPT ===
    culprit = "—Ç—É–º–∞–Ω" if cloud_w == "—Ç—É–º–∞–Ω" else (
        "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if kp_state == "–±—É—Ä—è" else
        "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ" if press < 1007 else
        "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä" if wind_kmh > 30 else
        "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"
    )
    summary, tips = gpt_blurb(culprit)

    P.append(f"üìú –í—ã–≤–æ–¥\n{summary}")
    P.append("‚Äî‚Äî‚Äî")
    P.append("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    for t in tips:
        P.append(f"‚Ä¢ {t}")
    P.append("‚Äî‚Äî‚Äî")
    P.append(f"üìö {get_fact(TOMORROW)}")

    return "\n".join(P)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ SEND MESSAGE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    text = build_msg()
    logging.info("Preview: %s", text.replace('\n', ' | ')[:250])

    bot = Bot(TOKEN)
    try:
        await bot.send_message(
            CHAT_ID, text, parse_mode="HTML", disable_web_page_preview=True
        )
    except tg_err.TelegramError as e:
        logging.error("Telegram error: %s", e)

if __name__ == "__main__":
    asyncio.run(main())
