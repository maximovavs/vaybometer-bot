"""
post.py ‚Äì Vaybo–ú–µ—Ç—Ä v3.7
"""

from __future__ import annotations
import asyncio, json, os, sys
from datetime import datetime
from typing import Any, Dict, Optional

import requests, swisseph as swe
from openai import OpenAI
from telegram import Bot, error as tg_err

LAT, LON = 34.707, 33.022

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _get(u: str, **p) -> Optional[dict]:
    try:
        r = requests.get(u, params=p, timeout=20); r.raise_for_status()
        return r.json()
    except Exception as e:
        print(f"[warn] {u} -> {e}", file=sys.stderr); return None

deg2dir = lambda d: "N NE E SE S SW W NW".split()[int((d+22.5)%360//45)]
wind_phrase = lambda k: "—à—Ç–∏–ª—å" if k<5 else "—Å–ª–∞–±—ã–π" if k<15 else "—É–º–µ—Ä–µ–Ω–Ω—ã–π" if k<30 else "—Å–∏–ª—å–Ω—ã–π"

def aqi_to_pm25(aqi: float) -> float:
    bp=[(0,50,0,12),(51,100,12.1,35.4),(101,150,35.5,55.4),
        (151,200,55.5,150.4),(201,300,150.5,250.4),(301,400,250.5,350.4),(401,500,350.5,500.4)]
    for Il,Ih,Cl,Ch in bp:
        if Il<=aqi<=Ih: return round((aqi-Il)*(Ch-Cl)/(Ih-Il)+Cl,1)
    return aqi

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ data sources ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_weather():
    k=os.getenv("OWM_KEY")
    if k:
        for ver in ("3.0","2.5"):
            d=_get(f"https://api.openweathermap.org/data/{ver}/onecall",
                   lat=LAT,lon=LON,appid=k,units="metric",exclude="minutely,hourly")
            if d and d.get("current") and d.get("daily"): return d
    return _get("https://api.open-meteo.com/v1/forecast",
                latitude=LAT,longitude=LON,current_weather=True,
                hourly="cloud_cover,precipitation_probability,weathercode,surface_pressure",
                daily="temperature_2m_max,temperature_2m_min,precipitation_probability_max",
                timezone="UTC")

get_air = lambda: _get("https://api.airvisual.com/v2/nearest_city",
                       lat=LAT,lon=LON,key=os.getenv("AIRVISUAL_KEY")) if os.getenv("AIRVISUAL_KEY") else None

def get_pm10_fallback()->Optional[float]:
    d=_get("https://air-quality-api.open-meteo.com/v1/air-quality",
           latitude=LAT,longitude=LON,hourly="pm10",timezone="UTC")
    try:return round(float(d["hourly"]["pm10"][0]),1)
    except Exception:return None

def get_pollen():
    k=os.getenv("TOMORROW_KEY")
    if not k:return None
    d=_get("https://api.tomorrow.io/v4/timelines",apikey=k,location=f"{LAT},{LON}",
           fields="treeIndex,grassIndex,weedIndex",timesteps="1d")
    try:v=d["data"]["timelines"][0]["intervals"][0]["values"];return{"tree":v["treeIndex"],"grass":v["grassIndex"],"weed":v["weedIndex"]}
    except Exception:return None

get_sst=lambda: (lambda d: round(float(d["hourly"]["sea_surface_temperature"][0]),1) if d else None)(
    _get("https://marine-api.open-meteo.com/v1/marine",
         latitude=LAT,longitude=LON,hourly="sea_surface_temperature",timezone="UTC"))

get_kp=lambda: (lambda a: float(a[-1][1]) if a else None)(
    _get("https://services.swpc.noaa.gov/products/noaa-planetary-k-index.json"))

def get_schumann():
    d=_get("https://api.glcoherence.org/v1/earth")
    return {"freq":d["frequency_1"],"amp":d["amplitude_1"]} if d else None

def astro_events():
    jd=swe.julday(*datetime.utcnow().timetuple()[:3])
    moon_lon=swe.calc_ut(jd,swe.MOON)[0][0]; moon_sign=int(moon_lon//30)
    sign_names="–û–≤–Ω–µ –¢–µ–ª—å—Ü–µ –ë–ª–∏–∑–Ω–µ—Ü–∞—Ö –†–∞–∫–µ –õ—å–≤–µ –î–µ–≤–µ –í–µ—Å–∞—Ö –°–∫–æ—Ä–ø–∏–æ–Ω–µ –°—Ç—Ä–µ–ª—å—Ü–µ –ö–æ–∑–µ—Ä–æ–≥–µ –í–æ–¥–æ–ª–µ–µ –†—ã–±–∞—Ö".split()
    moon=f"–õ—É–Ω–∞ –≤ {sign_names[moon_sign]}"
    # —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ú–µ—Ä–∫—É—Ä–∏–π?
    merc_spd=swe.calc_ut(jd,swe.MERCURY)[0][3]
    merc="–ú–µ—Ä–∫—É—Ä–∏–π —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–µ–Ω ‚Äì —Ç–µ—Ö–Ω–∏–∫–∞ —à–∞–ª–∏—Ç" if merc_spd<0 else None
    return " | ".join(filter(None,[moon,merc]))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ GPT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def gpt_comment(snip: dict)->tuple[str,str]:
    style = ("–¢—ã ‚Äî –≤–µ—Å—ë–ª—ã–π, —Å–ª–µ–≥–∫–∞ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –±–æ—Ç-–∞—Å—Ç—Ä–æ–ª–æ–≥ Gen Z. "
             "–î–∞–π 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å —à—É—Ç–∫–æ–π (¬´–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ ‚Ä¶¬ª). "
             "–ó–∞—Ç–µ–º 3‚Äì4 –∫–æ—Ä–æ—Ç–∫–∏—Ö, –Ω–µ–±–∞–Ω–∞–ª—å–Ω—ã—Ö, —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞.\n"
             "–§–æ—Ä–º–∞—Ç:\n–í—ã–≤–æ–¥: ‚Ä¶\n–°–æ–≤–µ—Ç—ã:\n- ‚Ä¶")
    rsp=OpenAI(api_key=os.environ["OPENAI_API_KEY"]).chat.completions.create(
        model="gpt-4o-mini",temperature=0.5,
        messages=[{"role":"user","content":style+"\n"+json.dumps(snip,ensure_ascii=False)}]
    ).choices[0].message.content.strip()
    summary=rsp.split("–°–æ–≤–µ—Ç—ã:")[0].replace("–í—ã–≤–æ–¥:","").strip()
    tips=[l.strip("- ").strip("0123456789. ").strip() for l in rsp.split("–°–æ–≤–µ—Ç—ã:")[-1].splitlines() if l.strip()]
    tips=[t for t in tips if t and summary not in t][:4]
    return summary,"\n".join(f"- {t}" for t in tips)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ digest ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_md(d:Dict[str,Any])->str:
    P,snip=[],{}
    # weather
    if w:=d["weather"]:
        if "current" in w:
            cur,day=w["current"],w["daily"][0]["temp"]; wind=cur["wind_speed"]*3.6
            P+=["‚òÄÔ∏è **–ü–æ–≥–æ–¥–∞**",
                 f"**–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** –¥–Ω—ë–º –¥–æ {day['max']:.0f} ¬∞C, –Ω–æ—á—å—é –æ–∫–æ–ª–æ {day['min']:.0f} ¬∞C",
                 f"**–û–±–ª–∞—á–Ω–æ—Å—Ç—å:** {cur.get('clouds','‚Äî')} %",
                 f"**–û—Å–∞–¥–∫–∏:** –Ω–µ –æ–∂–∏–¥–∞—é—Ç—Å—è" if w['daily'][0].get("rain",0)==0 else "**–û—Å–∞–¥–∫–∏:** –≤–æ–∑–º–æ–∂–µ–Ω –¥–æ–∂–¥—å",
                 f"**–í–µ—Ç–µ—Ä:** {wind_phrase(wind)} ({wind:.1f} –∫–º/—á), {deg2dir(cur['wind_deg'])}",
                 f"**–î–∞–≤–ª–µ–Ω–∏–µ:** {cur['pressure']} –≥–ü–∞"]
            snip.update(temp_min=day['min'],temp_max=day['max'],pressure=cur['pressure'])
        else:
            cw,dm=w["current_weather"],w["daily"]; cloud=w["hourly"]["cloud_cover"][0]; pp=w["daily"]["precipitation_probability_max"][0]
            pressure=w["hourly"]["surface_pressure"][0]
            P+=["‚òÄÔ∏è **–ü–æ–≥–æ–¥–∞**",
                 f"**–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** –¥–Ω—ë–º –¥–æ {dm['temperature_2m_max'][0]:.0f} ¬∞C, "
                 f"–Ω–æ—á—å—é –æ–∫–æ–ª–æ {dm['temperature_2m_min'][0]:.0f} ¬∞C",
                 f"**–û–±–ª–∞—á–Ω–æ—Å—Ç—å:** {cloud} %",
                 f"**–û—Å–∞–¥–∫–∏:** –Ω–µ –æ–∂–∏–¥–∞—é—Ç—Å—è" if pp<20 else "**–û—Å–∞–¥–∫–∏:** –≤–æ–∑–º–æ–∂–µ–Ω –¥–æ–∂–¥—å",
                 f"**–í–µ—Ç–µ—Ä:** {wind_phrase(cw['windspeed'])} ({cw['windspeed']:.1f} –∫–º/—á), {deg2dir(cw['winddirection'])}",
                 f"**–î–∞–≤–ª–µ–Ω–∏–µ:** {pressure:.0f} –≥–ü–∞"]
            snip.update(temp_min=dm['temperature_2m_min'][0],temp_max=dm['temperature_2m_max'][0],pressure=pressure)

    # air
    if air:=d["air"]:
        pol=air["data"]["current"]["pollution"]; pm25=pol.get("p2") or aqi_to_pm25(pol["aqius"])
        pm10=pol.get("p1") or get_pm10_fallback() or "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        P+=["","üå¨Ô∏è **–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞**",
            f"**AQI:** {pol['aqius']}  |  **PM2.5:** {pm25} ¬µg/m¬≥  |  **PM10:** {pm10} ¬µg/m¬≥"]
        level=("—Ö–æ—Ä–æ—à–∏–π" if pol['aqius']<=50 else "—É–º–µ—Ä–µ–Ω–Ω—ã–π" if pol['aqius']<=100 else "–≤—Ä–µ–¥–Ω—ã–π")
        P+= [f"–í–æ–∑–¥—É—Ö {level}."] ; snip["aqi"]=pol['aqius']

    if p:=d["pollen"]:
        P+=["","üåø **–£—Ä–æ–≤–µ–Ω—å –ø—ã–ª—å—Ü—ã**",f"**–î–µ—Ä–µ–≤—å—è:** {p['tree']}  |  **–¢—Ä–∞–≤—ã:** {p['grass']}  |  **–°–æ—Ä–Ω—è–∫–∏:** {p['weed']}"]

    if (kp:=d["kp"]) is not None:
        state="–±—É—Ä—è (G1)" if kp>=5 else "—Å–ø–æ–∫–æ–π–Ω—ã–π" if kp<4 else "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π"
        P+=["","üåå **–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**",f"**–£—Ä–æ–≤–µ–Ω—å:** {state} (Kp {kp:.1f})"]; snip["kp"]=kp

    # Schumann always visible
    if d["schumann"]:
        s=d["schumann"]; P+=["","üìà **–†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞**",f"**–ß–∞—Å—Ç–æ—Ç–∞:** ‚âà{s['freq']:.1f} –ì—Ü",f"**–ê–º–ø–ª–∏—Ç—É–¥–∞:** {s['amp']}"]
    else:
        P+=["","üìà **–†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞**","–Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"]

    if d["sst"]:
        P+=["","üåä **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã –≤ –º–æ—Ä–µ**",f"**–°–µ–π—á–∞—Å:** {d['sst']} ¬∞C"]

    if (astro:=astro_events()):
        P+=["","üîÆ **–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è**",astro]

    P.append("---")
    summ,tips=gpt_comment(snip)
    P+=["**üìù –í—ã–≤–æ–¥**",summ,"","---","**‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**",tips]
    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Telegram ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send(md:str):
    await Bot(os.environ["TELEGRAM_TOKEN"]).send_message(
        chat_id=os.environ["CHANNEL_ID"], text=md[:4096],
        parse_mode="Markdown", disable_web_page_preview=True)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main():
    d={"weather":get_weather(),"air":get_air(),"pollen":get_pollen(),"sst":get_sst(),
       "kp":get_kp(),"schumann":get_schumann()}
    md=build_md(d); print("MD preview:", md[:200].replace("\n"," | "))
    try: await send(md); print("‚úì sent")
    except tg_err.TelegramError as e:
        print("Telegram error:", e, file=sys.stderr); raise

if __name__=="__main__":
    asyncio.run(main())
