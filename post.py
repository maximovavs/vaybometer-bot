#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
post.py ‚Äì —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–æ–Ω—Å ¬´–í–∞–π–±–æ–º–µ—Ç—Ä–∞¬ª.
"""

from __future__ import annotations
import os, asyncio, logging, requests
from typing import Optional, Tuple, Dict

import pendulum
from telegram import Bot, error as tg_err

# ‚îÄ‚îÄ –Ω–∞—à–∏ —É—Ç–∏–ª–∏—Ç—ã / API-–æ–±—ë—Ä—Ç–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from utils import (
    compass, clouds_word, wind_phrase, safe, get_fact, pressure_trend,
    WEATHER_ICONS, AIR_EMOJI, K_COLOR
)
from weather  import get_weather
from air      import get_air, get_pollen, get_sst, get_kp
from schumann import get_schumann
from astro    import astro_events
from gpt      import gpt_blurb

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è / –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ           = pendulum.timezone("Asia/Nicosia")
TODAY        = pendulum.now(TZ).date()
TOMORROW     = TODAY.add(days=1)
TOKEN        = os.environ["TELEGRAM_TOKEN"]
CHAT_ID      = int(os.environ["CHANNEL_ID"])
UNSPLASH_KEY = os.getenv("UNSPLASH_KEY")

POLL_QUESTION = "–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? ü§î"
POLL_OPTIONS  = ["üî• –ü–æ–ª–æ–Ω(–∞) —ç–Ω–µ—Ä–≥–∏–∏", "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
                 "üò¥ –°–ª–µ–≥–∫–∞ –≤—è–ª—ã–π(–∞—è)", "ü§í –í—Å—ë –ø–ª–æ—Ö–æ"]

CITIES = {
    "Limassol": (34.707, 33.022),
    "Larnaca" : (34.916, 33.624),
    "Nicosia" : (35.170, 33.360),
    "Pafos"   : (34.776, 32.424),
}

# ‚îÄ‚îÄ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å max/min Open-Meteo —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def fetch_tomorrow_temps(lat: float, lon: float) -> Tuple[Optional[float], Optional[float]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (t_max, t_min) –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è —á–µ—Ä–µ–∑ start_date / end_date."""
    date = TOMORROW.to_date_string()
    j = requests.get(
        "https://api.open-meteo.com/v1/forecast",
        params={
            "latitude":   lat,
            "longitude":  lon,
            "timezone":   "UTC",
            "daily":      "temperature_2m_max,temperature_2m_min",
            "start_date": date,
            "end_date":   date,
        },
        timeout=15,
        headers={"User-Agent": "VayboMeter"}
    ).json()
    d = j.get("daily", {})
    try:
        return d["temperature_2m_max"][0], d["temperature_2m_min"][0]
    except Exception:
        return None, None


# ‚îÄ‚îÄ —Å–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_msg() -> str:
    P: list[str] = []

    # —Å—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ 4 –≥–æ—Ä–æ–¥–∞–º
    sum_d, sum_n, cnt = 0.0, 0.0, 0
    for la, lo in CITIES.values():
        d, n = fetch_tomorrow_temps(la, lo)
        if d is None:
            continue
        sum_d += d
        sum_n += (n if n is not None else d)
        cnt   += 1
    avg_day   = sum_d / (cnt or 1)
    avg_night = sum_n / (cnt or 1)

    # –ø–æ–≥–æ–¥–∞ Limassol
    lim_lat, lim_lon = CITIES["Limassol"]
    day_max, night_min = fetch_tomorrow_temps(lim_lat, lim_lon)
    if day_max is None or night_min is None:
        raise RuntimeError("–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –Ω–∞ –∑–∞–≤—Ç—Ä–∞")

    w_lim = get_weather(lim_lat, lim_lon)
    if not w_lim:
        raise RuntimeError("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    strong = w_lim.get("strong_wind", False)
    fog    = w_lim.get("fog_alert",   False)

    cur = w_lim.get("current") or w_lim["current_weather"]
    wind_kmh  = cur.get("windspeed") or cur.get("wind_speed", 0)
    wind_deg  = cur.get("winddirection") or cur.get("wind_deg", 0)
    press     = cur.get("pressure") or w_lim["hourly"]["surface_pressure"][0]
    cloud_w   = clouds_word(cur.get("clouds") or w_lim["hourly"]["cloud_cover"][0])

    icon = WEATHER_ICONS.get(cloud_w, "üå¶Ô∏è")
    P.append(f"{icon} –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –ö–∏–ø—Ä–µ ({TOMORROW.format('DD.MM.YYYY')})")
    P.append(f"üå° –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø.: {avg_day:.0f} ¬∞C")
    P.append(f"üîΩ –î–∞–≤–ª–µ–Ω–∏–µ: {press:.0f} –≥–ü–∞ {pressure_trend(w_lim)}")
    P.append(f"üìà –¢–µ–º–ø. –¥–Ω—ë–º/–Ω–æ—á—å—é: {day_max:.1f}/{night_min:.1f} ¬∞C")
    P.append(f"üå§ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {cloud_w}")
    P.append(f"üí® –í–µ—Ç–µ—Ä: {wind_phrase(wind_kmh)} ({wind_kmh:.1f} –∫–º/—á, {compass(wind_deg)})")
    if strong: P.append("‚ö†Ô∏è –í–µ—Ç–µ—Ä –º–æ–∂–µ—Ç —É—Å–∏–ª–∏—Ç—å—Å—è")
    if fog:    P.append("üåÅ –í–æ–∑–º–æ–∂–µ–Ω —Ç—É–º–∞–Ω, –≤–æ–¥–∏—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ")
    P.append("‚Äî‚Äî‚Äî")

    # —Ä–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤
    temps: Dict[str, Tuple[float, float]] = {}
    for city, (la, lo) in CITIES.items():
        d, n = fetch_tomorrow_temps(la, lo)
        if d is None:
            continue
        temps[city] = (d, n if n is not None else d)

    P.append("üéñÔ∏è –†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ (–¥–Ω./–Ω–æ—á—å)")
    medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£"]
    for i, (city, (d_t, n_t)) in enumerate(sorted(temps.items(),
                                                  key=lambda kv: kv[1][0],
                                                  reverse=True)[:4]):
        P.append(f"{medals[i]} {city}: {d_t:.1f}/{n_t:.1f} ¬∞C")
    P.append("‚Äî‚Äî‚Äî")

    # AQI + –ø—ã–ª—å—Ü–∞
    air = get_air() or {}
    pm = lambda v: f"{v:.0f}" if v not in (None, "–Ω/–¥") else "–Ω/–¥"

    P.append("üèôÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞")
    if air:
        lvl = air["lvl"]
        P.append(f"{AIR_EMOJI.get(lvl,'‚ö™')} {lvl} (AQI {air['aqi']}) | "
                 f"PM2.5: {pm(air['pm25'])} ¬µg/–º¬≥ | "
                 f"PM10: {pm(air['pm10'])} ¬µg/–º¬≥")
    else:
        P.append("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    pol = get_pollen()
    if pol:
        idx = lambda v: ["–Ω–µ—Ç","–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω–Ω—ã–π","–≤—ã—Å–æ–∫–∏–π",
                         "–æ—á. –≤—ã—Å–æ–∫–∏–π","—ç–∫—Å—Ç—Ä–∏–º"][int(round(v))]
        P.extend([
            "üåø –ü—ã–ª—å—Ü–∞",
            f"–î–µ—Ä–µ–≤—å—è ‚Äì {idx(pol['treeIndex'])} | "
            f"–¢—Ä–∞–≤—ã ‚Äì {idx(pol['grassIndex'])} | "
            f"–°–æ—Ä–Ω—è–∫–∏ ‚Äì {idx(pol['weedIndex'])}"
        ])
    P.append("‚Äî‚Äî‚Äî")

    # –≥–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ / –®—É–º–∞–Ω / –º–æ—Ä–µ / –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
    kp, _ = get_kp()
    sch   = get_schumann()
    sst   = get_sst()
    astro = astro_events()

    if kp is not None:
        color = K_COLOR["low"] if kp < 4 else K_COLOR["mid"] if kp < 6 else K_COLOR["high"]
        P.append(f"{color} –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ Kp={kp:.1f}")
    else:
        P.append("üß≤ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–∫–∞ ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    if "freq" in sch:
        P.append(f"üéµ –®—É–º–∞–Ω: {sch['freq']:.1f} –ì—Ü ‚Äì —Ñ–æ–Ω –≤ –Ω–æ—Ä–º–µ")
    else:
        P.append(f"üéµ –®—É–º–∞–Ω: {sch['msg']}")

    if sst is not None:
        P.append(f"üåä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: {sst:.1f} ¬∞C")

    if astro:
        P.append("üåå –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è ‚Äì " + " | ".join(astro))
    P.append("‚Äî‚Äî‚Äî")

    # –≤—ã–≤–æ–¥ + GPT-—Å–æ–≤–µ—Ç—ã
    culprit = ("—Ç—É–º–∞–Ω"           if fog else
               "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏"  if kp and kp >= 5 else
               "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ" if press < 1007 else
               "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä"   if strong else
               "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç")
    summary, tips = gpt_blurb(culprit)
    P.extend([
        f"üìú <b>–í—ã–≤–æ–¥</b>\n{summary}",
        "‚Äî‚Äî‚Äî",
        "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>",
        *(f"‚Ä¢ {t}" for t in tips),
        "‚Äî‚Äî‚Äî",
        f"üìö {get_fact(TOMORROW)}"
    ])

    return "\n".join(P)


# ‚îÄ‚îÄ Telegram helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_main_post(bot: Bot) -> None:
    html = build_msg()
    logging.info("Preview: %s", html.replace("\n", " | ")[:200])
    await bot.send_message(CHAT_ID, html, parse_mode="HTML",
                           disable_web_page_preview=True)

async def send_poll_if_friday(bot: Bot) -> None:
    if pendulum.now(TZ).weekday() == 4:  # Friday
        try:
            await bot.send_poll(CHAT_ID, question=POLL_QUESTION,
                                options=POLL_OPTIONS,
                                is_anonymous=False,
                                allows_multiple_answers=False)
        except tg_err.TelegramError as e:
            logging.warning("Poll send error: %s", e)

async def fetch_unsplash_photo() -> Optional[str]:
    if not UNSPLASH_KEY:
        return None
    j = requests.get("https://api.unsplash.com/photos/random",
                     params={"query": "cyprus coast sunset",
                             "client_id": UNSPLASH_KEY},
                     timeout=15).json()
    return j.get("urls", {}).get("regular")

async def send_photo(bot: Bot, photo: str) -> None:
    try:
        await bot.send_photo(CHAT_ID, photo=photo, caption="–§–æ—Ç–æ –¥–Ω—è ‚Ä¢ Unsplash")
    except tg_err.TelegramError as e:
        logging.warning("Photo send error: %s", e)

# ‚îÄ‚îÄ main entrypoint ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    bot = Bot(token=TOKEN)
    await send_main_post(bot)
    await send_poll_if_friday(bot)
    if UNSPLASH_KEY and TODAY.day % 3 == 0:
        if (url := await fetch_unsplash_photo()):
            await send_photo(bot, url)

if __name__ == "__main__":
    asyncio.run(main())
