#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_cy.py  ‚Ä¢  –ó–∞–ø—É—Å–∫ ¬´Cyprus daily post¬ª –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞.

–†–µ–∂–∏–º—ã:
  1) –û–±—ã—á–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ—Å—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç post_common.main_common().
  2) --fx-only           ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ FX-–ø–æ—Å—Ç (–±–∞–∑–∞ EUR: –º–µ–∂—Ä—ã–Ω–æ–∫ + –ï–¶–ë + –¶–ë –†–§ —Å –¥–∏–Ω–∞–º–∏–∫–æ–π).
  3) --dry-run           ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç (–ª–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç).
  4) --date YYYY-MM-DD   ‚Äî –¥–∞—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤/FX (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å–µ–π—á–∞—Å –≤ TZ).
  5) --for-tomorrow      ‚Äî —Å–¥–≤–∏–≥ –¥–∞—Ç—ã +1 –¥–µ–Ω—å (—É–¥–æ–±–Ω–æ –¥–ª—è ¬´–ø–æ—Å—Ç–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞¬ª).
  6) --to-test           ‚Äî –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª (CHANNEL_ID_TEST).
  7) --chat-id ID        ‚Äî —è–≤–Ω—ã–π chat_id –∫–∞–Ω–∞–ª–∞ (–ø–µ—Ä–µ–±–∏–≤–∞–µ—Ç –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ).

ENV:
  TELEGRAM_TOKEN         ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.
  CHANNEL_ID             ‚Äî ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
  CHANNEL_ID_TEST        ‚Äî ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–¥–ª—è --to-test).
  CHANNEL_ID_OVERRIDE    ‚Äî —è–≤–Ω—ã–π chat_id (–ø–µ—Ä–µ–±–∏–≤–∞–µ—Ç –≤—Å—ë).
  TZ                     ‚Äî —Ç–∞–π–º–∑–æ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Asia/Nicosia).
  DISABLE_LLM_DAILY      ‚Äî –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ post_common.
"""

from __future__ import annotations

import os
import sys
import argparse
import asyncio
import logging
from typing import Dict, Any, Tuple, Optional
from pathlib import Path

import pendulum
from telegram import Bot, constants

from post_common import main_common  # –æ—Å–Ω–æ–≤–Ω–æ–π —Å–±–æ—Ä—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Secrets / Env ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

TOKEN = os.getenv("TELEGRAM_TOKEN", "")
if not TOKEN:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
    sys.exit(1)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≥–∏–æ–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

SEA_LABEL   = "–ú–æ—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞"
OTHER_LABEL = "–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞"

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å ‚Äî –ö–∏–ø—Ä (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TZ)
TZ_STR = os.getenv("TZ", "Asia/Nicosia")

SEA_CITIES: Dict[str, Tuple[float, float]] = {
    "Limassol": (34.707, 33.022),
    "Pafos": (34.776, 32.424),
    "Ayia Napa": (34.988, 34.012),
    "Larnaca": (34.916, 33.624),
}
SEA_CITIES_ORDERED = list(SEA_CITIES.items())

OTHER_CITIES_ALL: Dict[str, Tuple[float, float]] = {
    "Nicosia": (35.170, 33.360),
    "Troodos": (34.916, 32.823),
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FX helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

FX_CACHE_PATH = Path("fx_cache.json")  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è ¬´–Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –¶–ë –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è¬ª

def _fmt_num(n: Optional[float], digits: int = 2) -> str:
    if n is None:
        return "‚Äî"
    try:
        s = f"{float(n):.{digits}f}"
        return s.rstrip("0").rstrip(".") if "." in s else s
    except Exception:
        return "‚Äî"

def _to_float(x) -> Optional[float]:
    try:
        return float(x)
    except Exception:
        return None

def _fmt_delta_arrow(d, digits: int = 2, eps: float = 0.005) -> str:
    """
    –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞: ‚Üë0.34 / ‚Üì0.12. –ï—Å–ª–∏ –ø–æ—á—Ç–∏ –Ω–æ–ª—å ‚Äî –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –¶–ë –†–§, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥—É–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.
    """
    try:
        x = float(d)
    except Exception:
        return ""
    if abs(x) < eps:
        return ""
    s = f"{abs(x):.{digits}f}".rstrip("0").rstrip(".")
    return f" ‚Üë{s}" if x > 0 else f" ‚Üì{s}"

def _load_cbr_rates(date_local: pendulum.DateTime, tz: pendulum.Timezone) -> Dict[str, Any]:
    """
    –û–∂–∏–¥–∞–µ–º fx.get_rates(date=..., tz=...) -> {'USD': {'value':..., 'delta':...}, 'EUR': {...}, 'as_of': ...}
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º {} –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    try:
        import importlib
        fx = importlib.import_module("fx")
        return fx.get_rates(date=date_local, tz=tz) or {}  # type: ignore[attr-defined]
    except Exception as e:
        logging.warning("FX: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –¶–ë –†–§: %s", e)
        return {}

def _fetch_intermarket_eur() -> Dict[str, float]:
    """
    –ú–µ–∂—Ä—ã–Ω–æ—á–Ω—ã–µ –∫—Ä–æ—Å—Å—ã –∫ EUR: USD, GBP, TRY, ILS.
    –û–∂–∏–¥–∞–µ–º fx.get_intermarket_eur() -> dict(code->float). –í–æ–∑–≤—Ä–∞—â–∞–µ–º {} –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    try:
        import importlib
        fx = importlib.import_module("fx")
        if hasattr(fx, "get_intermarket_eur"):  # type: ignore[attr-defined]
            data = fx.get_intermarket_eur()  # type: ignore[attr-defined]
            return data or {}
    except Exception as e:
        logging.warning("FX: –º–µ–∂—Ä—ã–Ω–æ–∫ EUR –Ω–µ –ø–æ–ª—É—á–µ–Ω: %s", e)
    return {}

def _fetch_ecb_official() -> Tuple[Dict[str, float], Optional[str]]:
    """
    –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –ï–¶–ë –∫ EUR: USD, GBP, TRY, ILS.
    –û–∂–∏–¥–∞–µ–º fx.get_ecb_eur_rates() -> (dict, as_of) –ò–õ–ò fx.get_ecb_official() -> dict.
    """
    try:
        import importlib
        fx = importlib.import_module("fx")
        if hasattr(fx, "get_ecb_eur_rates"):  # type: ignore[attr-defined]
            d, as_of = fx.get_ecb_eur_rates()  # type: ignore[attr-defined]
            return (d or {}), (str(as_of) if as_of else None)
        if hasattr(fx, "get_ecb_official"):  # type: ignore[attr-defined]
            d = fx.get_ecb_official()  # type: ignore[attr-defined]
            return (d or {}), None
    except Exception as e:
        logging.warning("FX: –ï–¶–ë-–∫—É—Ä—Å—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã: %s", e)
    return {}, None

def _build_fx_message_eur(date_local: pendulum.DateTime, tz: pendulum.Timezone):
    """
    –î–≤—É—Ö—Å—Ç—Ä–æ—á–Ω—ã–π FX-–ø–æ—Å—Ç (EUR-–±–∞–∑–∞).
      ‚Ä¢ –ú–µ–∂—Ä—ã–Ω–æ–∫: USD 1.16 ‚Ä¢ GBP 0.87 ‚Ä¢ TRY 48.36 ‚Ä¢ ILS 3.80
      ‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ: –ï–¶–ë ‚Äî USD 1.16 ‚Ä¢ GBP 0.87 ‚Ä¢ TRY 48.36 ‚Ä¢ ILS 3.80 ‚Ä¢ –¶–ë –†–§ ‚Äî ‚Ç¨‚Üí‚ÇΩ 93.92 ‚Üì0.13 ‚Ä¢ $‚Üí‚ÇΩ 80.85 ‚Üë0.07
    –ï—Å–ª–∏ –º–µ–∂—Ä—ã–Ω–æ–∫/–ï–¶–ë –ø—É—Å—Ç—ã ‚Äî —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫—É—Å–∫–∏ —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è.
    """
    NBSP = "\u00A0"  # –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª (—á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞–ª–æ —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ ¬´‚Ç¨‚Üí‚ÇΩ¬ª)

    inter = _fetch_intermarket_eur()
    ecb, _asof = _fetch_ecb_official()
    cbr = _load_cbr_rates(date_local, tz)

    # –µ—Å–ª–∏ –º–µ–∂—Ä—ã–Ω–æ–∫ –ø—É—Å—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –ï–¶–ë –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    if not inter and ecb:
        inter = dict(ecb)

    def _line_cross(prefix: str, data: Dict[str, float]) -> str:
        if not data:
            return ""
        parts = []
        for code in ("USD", "GBP", "TRY", "ILS"):
            v = _to_float(data.get(code))
            if v is not None:
                parts.append(f"{code} {_fmt_num(v, 2)}")
        return f"{prefix} " + " ‚Ä¢ ".join(parts) if parts else ""

    line1 = _line_cross("‚Ä¢ –ú–µ–∂—Ä—ã–Ω–æ–∫:", inter)         # –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π
    line_ecb = _line_cross("–ï–¶–ë ‚Äî", ecb)              # –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π

    # –¶–ë –†–§ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ)
    eur_val = _to_float(((cbr.get("EUR") or {}).get("value")))
    usd_val = _to_float(((cbr.get("USD") or {}).get("value")))
    eur_dlt = _to_float(((cbr.get("EUR") or {}).get("delta")))
    usd_dlt = _to_float(((cbr.get("USD") or {}).get("delta")))

    cbr_bits = []
    if eur_val is not None:
        cbr_bits.append(f"‚Ç¨‚Üí‚ÇΩ{NBSP}{_fmt_num(eur_val, 2)}{_fmt_delta_arrow(eur_dlt)}")
    if usd_val is not None:
        cbr_bits.append(f"$‚Üí‚ÇΩ{NBSP}{_fmt_num(usd_val, 2)}{_fmt_delta_arrow(usd_dlt)}")

    cbr_line = f"–¶–ë –†–§ ‚Äî " + " ‚Ä¢ ".join(cbr_bits) if cbr_bits else ""

    # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ: –ï–¶–ë (–µ—Å–ª–∏ –µ—Å—Ç—å) + –¶–ë –†–§ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    official_parts = []
    if line_ecb:
        official_parts.append(line_ecb)
    if cbr_line:
        official_parts.append(cbr_line)

    line2 = "‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ: " + " ‚Ä¢ ".join(official_parts) if official_parts else ""

    # –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
    lines = []
    if line1:
        lines.append(line1)
    if line2:
        lines.append(line2)

    title = "üí± <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (–±–∞–∑–∞ EUR)</b>"
    body = ("\n".join(lines) if lines else "‚Ä¢ –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã") + "\n\n#–ö–∏–ø—Ä #–∫—É—Ä—Å—ã_–≤–∞–ª—é—Ç"
    return f"{title}\n{body}", cbr

def _normalize_cbr_date(raw) -> Optional[str]:
    if raw is None:
        return None
    if hasattr(raw, "to_date_string"):
        try:
            return raw.to_date_string()  # type: ignore[call-arg]
        except Exception:
            pass
    if isinstance(raw, (int, float)):
        try:
            return pendulum.from_timestamp(int(raw), tz="Europe/Moscow").to_date_string()
        except Exception:
            return None
    try:
        s = str(raw).strip()
        if "T" in s or " " in s:
            return pendulum.parse(s, tz="Europe/Moscow").to_date_string()
        pendulum.parse(s, tz="Europe/Moscow")
        return s
    except Exception:
        return None

async def _send_fx_eur_only(
    bot: Bot,
    chat_id: int,
    date_local: pendulum.DateTime,
    tz: pendulum.Timezone,
    dry_run: bool
) -> None:
    text, rates = _build_fx_message_eur(date_local, tz)
    raw_date = rates.get("as_of") or rates.get("date") or rates.get("cbr_date")
    cbr_date = _normalize_cbr_date(raw_date)

    # –Ω–µ –ø–æ—Å—Ç–∏–º –ø–æ–≤—Ç–æ—Ä, –µ—Å–ª–∏ ¬´–¥–∞—Ç–∞ –¶–ë¬ª —Ç–∞ –∂–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ fx.py, –µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        import importlib
        fx = importlib.import_module("fx")
        if cbr_date and hasattr(fx, "should_publish_again"):  # type: ignore[attr-defined]
            should = fx.should_publish_again(FX_CACHE_PATH, cbr_date)  # type: ignore[attr-defined]
            if not should:
                logging.info("FX: –∫—É—Ä—Å—ã –¶–ë –†–§ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å ‚Äî –ø–æ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")
                return
    except Exception as e:
        logging.warning("FX: skip-check –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º: %s", e)

    if dry_run:
        logging.info("DRY-RUN (fx-only):\n%s", text)
        return

    await bot.send_message(chat_id=chat_id, text=text, parse_mode=constants.ParseMode.HTML, disable_web_page_preview=True)

    try:
        import importlib
        fx = importlib.import_module("fx")
        if cbr_date and hasattr(fx, "save_fx_cache"):  # type: ignore[attr-defined]
            fx.save_fx_cache(FX_CACHE_PATH, cbr_date, text)  # type: ignore[attr-defined]
    except Exception as e:
        logging.warning("FX: save cache failed: %s", e)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Chat selection ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def resolve_chat_id(args_chat: str, to_test: bool) -> int:
    """
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:
      1) --chat-id / CHANNEL_ID_OVERRIDE
      2) --to-test  ‚Üí CHANNEL_ID_TEST
      3) CHANNEL_ID (–æ—Å–Ω–æ–≤–Ω–æ–π)
      4) (—Å–æ–≤–º.) CHANNEL_ID_KLG
    """
    chat_override = (args_chat or "").strip() or os.getenv("CHANNEL_ID_OVERRIDE", "").strip()
    if chat_override:
        try:
            return int(chat_override)
        except Exception:
            logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π chat_id (override): %r", chat_override)
            sys.exit(1)

    if to_test:
        ch_test = os.getenv("CHANNEL_ID_TEST", "").strip()
        if not ch_test:
            logging.error("--to-test –∑–∞–¥–∞–Ω, –Ω–æ CHANNEL_ID_TEST –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω")
            sys.exit(1)
        try:
            return int(ch_test)
        except Exception:
            logging.error("CHANNEL_ID_TEST –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: %r", ch_test)
            sys.exit(1)

    ch_main = os.getenv("CHANNEL_ID", "").strip() or os.getenv("CHANNEL_ID_KLG", "").strip()
    if not ch_main:
        logging.error("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –∏ –Ω–µ —É–∫–∞–∑–∞–Ω --chat-id/override")
        sys.exit(1)
    try:
        return int(ch_main)
    except Exception:
        logging.error("CHANNEL_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: %r", ch_main)
        sys.exit(1)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞—Ç—á –¥–∞—Ç—ã –¥–ª—è –≤—Å–µ–≥–æ –ø–æ—Å—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

class _TodayPatch:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–¥–º–µ–Ω—ã `pendulum.today()` –∏ `pendulum.now()`."""
    def __init__(self, base_date: pendulum.DateTime):
        self.base_date = base_date
        self._orig_today = None
        self._orig_now = None

    def __enter__(self):
        self._orig_today = pendulum.today
        self._orig_now = pendulum.now

        def _fake(dt: pendulum.DateTime, tz_arg=None):
            return dt.in_tz(tz_arg) if tz_arg else dt

        pendulum.today = lambda tz_arg=None: _fake(self.base_date, tz_arg)  # type: ignore[assignment]
        pendulum.now = lambda tz_arg=None: _fake(self.base_date, tz_arg)    # type: ignore[assignment]

        logging.info(
            "–î–∞—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ %s (TZ %s)",
            self.base_date.to_datetime_string(),
            self.base_date.timezone_name,
        )
        return self

    def __exit__(self, exc_type, exc, tb):
        if self._orig_today:
            pendulum.today = self._orig_today  # type: ignore[assignment]
        if self._orig_now:
            pendulum.now = self._orig_now  # type: ignore[assignment]
        return False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def main_cy() -> None:
    parser = argparse.ArgumentParser(description="Cyprus daily post runner")
    parser.add_argument("--date", type=str, default="", help="–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å–µ–≥–æ–¥–Ω—è –≤ TZ)")
    parser.add_argument("--for-tomorrow", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞—Ç—É +1 –¥–µ–Ω—å")
    parser.add_argument("--dry-run", action="store_true", help="–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥")
    parser.add_argument("--fx-only", action="store_true", help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ FX-–ø–æ—Å—Ç (EUR-–±–∞–∑–∞)")
    parser.add_argument("--to-test", action="store_true", help="–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª (CHANNEL_ID_TEST)")
    parser.add_argument("--chat-id", type=str, default="", help="–Ø–≤–Ω—ã–π chat_id –∫–∞–Ω–∞–ª–∞ (–ø–µ—Ä–µ–±–∏–≤–∞–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ)")
    args = parser.parse_args()

    tz = pendulum.timezone(TZ_STR)
    base_date = pendulum.parse(args.date).in_tz(tz) if args.date else pendulum.now(tz)
    if args.for_tomorrow:
        base_date = base_date.add(days=1)

    chat_id = resolve_chat_id(args.chat_id, args.to_test)
    bot = Bot(token=TOKEN)

    with _TodayPatch(base_date):
        if args.fx_only:
            await _send_fx_eur_only(bot, chat_id, base_date, tz, dry_run=args.dry_run)
            return

        if args.dry_run:
            logging.info("DRY-RUN: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞")
            return

        await main_common(
            bot=bot,
            chat_id=chat_id,
            region_name="–ö–∏–ø—Ä",
            sea_label=SEA_LABEL,
            sea_cities=SEA_CITIES_ORDERED,
            other_label=OTHER_LABEL,
            other_cities=OTHER_CITIES_ALL,
            tz=TZ_STR,  # post_common —Å–∞–º –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ pendulum.timezone
        )

if __name__ == "__main__":
    asyncio.run(main_cy())
