#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post_cy.py  ‚Ä¢  –ó–∞–ø—É—Å–∫ ¬´Cyprus daily post¬ª –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞.

–†–µ–∂–∏–º—ã:
  1) –û–±—ã—á–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ—Å—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç post_common.main_common().
  2) --fx-only           ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –±–ª–æ–∫ ¬´–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç¬ª (–±–∞–∑–∞ EUR).
  3) --dry-run           ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ workflow).
  4) --date YYYY-MM-DD   ‚Äî –¥–∞—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤/FX (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å–µ–≥–æ–¥–Ω—è –≤ TZ).
  5) --for-tomorrow      ‚Äî —Å–¥–≤–∏–≥ –¥–∞—Ç—ã +1 –¥–µ–Ω—å (—É–¥–æ–±–Ω–æ –¥–ª—è ¬´–ø–æ—Å—Ç–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞¬ª).
  6) --to-test           ‚Äî –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª (CHANNEL_ID_TEST).
  7) --chat-id ID        ‚Äî —è–≤–Ω—ã–π chat_id –∫–∞–Ω–∞–ª–∞ (–ø–µ—Ä–µ–±–∏–≤–∞–µ—Ç –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ).

ENV:
  TELEGRAM_TOKEN, CHANNEL_ID, CHANNEL_ID_TEST, CHANNEL_ID_OVERRIDE,
  TZ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Asia/Nicosia)
"""

from __future__ import annotations

import os
import sys
import argparse
import asyncio
import logging
from typing import Dict, Any, Tuple, Optional
from pathlib import Path
import xml.etree.ElementTree as ET

import pendulum
import requests
from telegram import Bot, constants

from post_common import main_common  # –æ—Å–Ω–æ–≤–Ω–æ–π —Å–±–æ—Ä—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Secrets / Env ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

TOKEN = os.getenv("TELEGRAM_TOKEN", "")
if not TOKEN:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
    sys.exit(1)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≥–∏–æ–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

SEA_LABEL   = "–ú–æ—Ä—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞"
OTHER_LABEL = "–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞"

TZ_STR = os.getenv("TZ", "Asia/Nicosia")

SEA_CITIES: Dict[str, Tuple[float, float]] = {
    "Limassol":  (34.707, 33.022),
    "Pafos":     (34.776, 32.424),
    "Ayia Napa": (34.988, 34.012),
    "Larnaca":   (34.916, 33.624),
}
SEA_CITIES_ORDERED = list(SEA_CITIES.items())

OTHER_CITIES_ALL: Dict[str, Tuple[float, float]] = {
    "Nicosia": (35.170, 33.360),
    "Troodos": (34.916, 32.823),
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FX helpers (EUR base) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

FX_CACHE_PATH = Path("fx_cache.json")  # –∫—ç—à –¥–ª—è –∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç–∞ –¶–ë (–∫–∞–∫ –±—ã–ª–æ)

CODES = ("USD", "GBP", "TRY", "ILS")

def _to_float(x) -> Optional[float]:
    try:
        s = str(x).replace("‚àí", "-").replace(",", ".").strip()
        return float(s)
    except Exception:
        return None

def _fmt_num(x: Optional[float], digits: int = 2) -> str:
    return f"{x:.{digits}f}" if isinstance(x, (int, float)) else "‚Äî"

def _fetch_intermarket_eur(symbols=CODES) -> Dict[str, Any]:
    """
    –ú–µ–∂—Ä—ã–Ω–æ–∫ (–ø–æ—á—Ç–∏-—Ä–µ–∞–ª—Ç–∞–π–º): exchangerate.host (–±–µ–∑ –∫–ª—é—á–∞).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {'USD': 1.08, ...}. –ü—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî {}.
    """
    try:
        r = requests.get(
            "https://api.exchangerate.host/latest",
            params={"base": "EUR", "symbols": ",".join(symbols)},
            timeout=12
        )
        r.raise_for_status()
        j = r.json() or {}
        rates = j.get("rates") or {}
        return {k: _to_float(v) for k, v in rates.items()}
    except Exception as e:
        logging.warning("Intermarket fetch failed: %s", e)
        return {}

def _fetch_ecb_official(symbols=CODES) -> Tuple[Dict[str, float], Optional[str]]:
    """
    –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –ï–¶–ë ‚Äî daily XML.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (rates, date_str).
    """
    try:
        r = requests.get(
            "https://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml",
            timeout=12,
            headers={"User-Agent": "VayboMeter/1.0"}
        )
        r.raise_for_status()
        root = ET.fromstring(r.text)
        # –∏—â–µ–º <Cube time="YYYY-MM-DD"><Cube currency="USD" rate="1.08"/>...
        ns = {"gesmes": "http://www.gesmes.org/xml/2002-08-01", "def": "http://www.ecb.int/vocabulary/2002-08-01/eurofxref"}
        # –≤ —ç—Ç–æ–º XML –∏–Ω–æ–≥–¥–∞ –±–µ–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º—ë–Ω, –ø–æ—Ç–æ–º—É –ø–∞—Ä—Å–∏–º ¬´–Ω–∞–ø—Ä—è–º—É—é¬ª
        time_node = None
        for cube in root.iter():
            if cube.attrib.get("time"):
                time_node = cube
                break
        rates: Dict[str, float] = {}
        if time_node is not None:
            for c in time_node:
                cur = c.attrib.get("currency")
                rate = _to_float(c.attrib.get("rate"))
                if cur in symbols and rate is not None:
                    rates[cur] = rate
            date_str = time_node.attrib.get("time")
        else:
            date_str = None
        return rates, date_str
    except Exception as e:
        logging.warning("ECB fetch failed: %s", e)
        return {}, None

def _normalize_cbr_date(raw) -> Optional[str]:
    if raw is None:
        return None
    try:
        if hasattr(raw, "to_date_string"):
            return raw.to_date_string()
        s = str(raw).strip()
        if "T" in s or " " in s:
            return pendulum.parse(s, tz="Europe/Moscow").to_date_string()
        pendulum.parse(s, tz="Europe/Moscow")
        return s
    except Exception:
        return None

def _load_cbr_rates(date_local: pendulum.DateTime, tz: pendulum.Timezone) -> Dict[str, Any]:
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å fx.py (–∫–∞–∫ –±—ã–ª–æ) ‚Äî –æ–Ω –¥–∞—ë—Ç –∫—É—Ä—Å—ã –¶–ë –†–§ –≤ ‚ÇΩ.
    –û–∂–∏–¥–∞–µ–º {'USD': {'value': ...}, 'EUR': {...}, 'as_of'/'cbr_date': ...}
    """
    try:
        import importlib
        fx = importlib.import_module("fx")
        rates = fx.get_rates(date=date_local, tz=tz)  # type: ignore[attr-defined]
        return rates or {}
    except Exception as e:
        logging.warning("FX (CBR) module not found/failed: %s", e)
        return {}

def _should_skip_by_cbr_cache(rates: Dict[str, Any]) -> bool:
    """
    –ù–µ –ø—É–±–ª–∏–∫—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ, –µ—Å–ª–∏ –¥–∞—Ç–∞ –¶–ë —Ç–∞ –∂–µ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ).
    """
    try:
        import importlib
        fx = importlib.import_module("fx")
        raw_date = rates.get("as_of") or rates.get("date") or rates.get("cbr_date")
        cbr_date = _normalize_cbr_date(raw_date)
        if cbr_date and hasattr(fx, "should_publish_again"):  # type: ignore[attr-defined]
            return not fx.should_publish_again(FX_CACHE_PATH, cbr_date)  # type: ignore[attr-defined]
    except Exception:
        pass
    return False

def _save_cbr_cache(rates: Dict[str, Any], text: str) -> None:
    try:
        import importlib
        fx = importlib.import_module("fx")
        raw_date = rates.get("as_of") or rates.get("date") or rates.get("cbr_date")
        cbr_date = _normalize_cbr_date(raw_date)
        if cbr_date and hasattr(fx, "save_fx_cache"):  # type: ignore[attr-defined]
            fx.save_fx_cache(FX_CACHE_PATH, cbr_date, text)  # type: ignore[attr-defined]
    except Exception as e:
        logging.warning("FX cache save failed: %s", e)

def _build_fx_message_eur(date_local: pendulum.DateTime, tz: pendulum.Timezone) -> Tuple[str, Dict[str, Any]]:
    """
    üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (–±–∞–∑–∞ EUR)
    ‚Ä¢ –ú–µ–∂—Ä—ã–Ω–æ–∫: USD 1.08 ‚Ä¢ GBP 0.86 ‚Ä¢ TRY 37.25 ‚Ä¢ ILS 4.02
    ‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ: –ï–¶–ë ‚Äî USD 1.08 ‚Ä¢ GBP 0.86 ‚Ä¢ TRY 37.24 ‚Ä¢ ILS 4.01 ‚Ä¢ –¶–ë –†–§ ‚Äî ‚Ç¨‚Üí‚ÇΩ 102.30 ‚Ä¢ $‚Üí‚ÇΩ 96.10

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (text, cbr_rates) ‚Äî –≤—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–ª—è –∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç–∞.
    """
    # 1) –º–µ–∂—Ä—ã–Ω–æ–∫
    inter = _fetch_intermarket_eur()
    # 2) –ï–¶–ë
    ecb, _ = _fetch_ecb_official()
    # 3) –¶–ë –†–§
    cbr = _load_cbr_rates(date_local, tz)

    def _fmt_cross_line(prefix: str, mapping: Dict[str, float]) -> str:
        parts = []
        for code in CODES:
            parts.append(f"{code} {_fmt_num(mapping.get(code), 2)}")
        return f"{prefix}: " + " ‚Ä¢ ".join(parts)

    # –µ—Å–ª–∏ –º–µ–∂—Ä—ã–Ω–æ–∫ –ø—É—Å—Ç, –ø–æ–¥—Å—Ç–∞–≤–∏–º –ï–¶–ë, —á—Ç–æ–±—ã —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—Ä–æ–ø–∞–ª–∞
    if not inter and ecb:
        inter = dict(ecb)

    line1 = _fmt_cross_line("‚Ä¢ –ú–µ–∂—Ä—ã–Ω–æ–∫", inter) if inter else "‚Ä¢ –ú–µ–∂—Ä—ã–Ω–æ–∫: ‚Äî"

    line2_left = _fmt_cross_line("–ï–¶–ë", ecb) if ecb else "–ï–¶–ë ‚Äî –Ω/–¥"
    eur_rub = _fmt_num(_to_float(((cbr.get("EUR") or {}).get("value"))), 2)
    usd_rub = _fmt_num(_to_float(((cbr.get("USD") or {}).get("value"))), 2)
    line2_right = f"–¶–ë –†–§ ‚Äî ‚Ç¨‚Üí‚ÇΩ {eur_rub} ‚Ä¢ $‚Üí‚ÇΩ {usd_rub}"

    title = "üí± <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (–±–∞–∑–∞ EUR)</b>"
    body = f"{line1}\n‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ: {line2_left} ‚Ä¢ {line2_right}\n\n#–ö–∏–ø—Ä #–∫—É—Ä—Å—ã_–≤–∞–ª—é—Ç"
    return f"{title}\n{body}", cbr

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Chat selection ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def resolve_chat_id(args_chat: str, to_test: bool) -> int:
    chat_override = (args_chat or "").strip() or os.getenv("CHANNEL_ID_OVERRIDE", "").strip()
    if chat_override:
        try:
            return int(chat_override)
        except Exception:
            logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π chat_id (override): %r", chat_override)
            sys.exit(1)

    if to_test:
        ch_test = os.getenv("CHANNEL_ID_TEST", "").strip()
        if not ch_test:
            logging.error("--to-test –∑–∞–¥–∞–Ω, –Ω–æ CHANNEL_ID_TEST –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
            sys.exit(1)
        try:
            return int(ch_test)
        except Exception:
            logging.error("CHANNEL_ID_TEST –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: %r", ch_test)
            sys.exit(1)

    ch_main = os.getenv("CHANNEL_ID", "").strip() or os.getenv("CHANNEL_ID_KLG", "").strip()
    if not ch_main:
        logging.error("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –∏ –Ω–µ —É–∫–∞–∑–∞–Ω --chat-id/override")
        sys.exit(1)
    try:
        return int(ch_main)
    except Exception:
        logging.error("CHANNEL_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: %r", ch_main)
        sys.exit(1)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞—Ç—á –¥–∞—Ç—ã –¥–ª—è –≤—Å–µ–≥–æ –ø–æ—Å—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

class _TodayPatch:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–æ–¥–º–µ–Ω–∞ pendulum.today()/now() –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    def __init__(self, base_date: pendulum.DateTime):
        self.base_date = base_date
        self._orig_today = None
        self._orig_now = None

    def __enter__(self):
        self._orig_today = pendulum.today
        self._orig_now = pendulum.now

        def _fake(dt: pendulum.DateTime, tz_arg=None):
            return dt.in_tz(tz_arg) if tz_arg else dt

        pendulum.today = lambda tz_arg=None: _fake(self.base_date, tz_arg)  # type: ignore[assignment]
        pendulum.now   = lambda tz_arg=None: _fake(self.base_date, tz_arg)  # type: ignore[assignment]
        logging.info("–î–∞—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ %s (%s)",
                     self.base_date.to_datetime_string(), self.base_date.timezone_name)
        return self

    def __exit__(self, exc_type, exc, tb):
        if self._orig_today:
            pendulum.today = self._orig_today  # type: ignore[assignment]
        if self._orig_now:
            pendulum.now = self._orig_now      # type: ignore[assignment]
        return False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def _send_fx_only(
    bot: Bot,
    chat_id: int,
    date_local: pendulum.DateTime,
    tz: pendulum.Timezone,
    dry_run: bool
) -> None:
    text, cbr_rates = _build_fx_message_eur(date_local, tz)

    # –∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç –ø–æ –¥–∞—Ç–µ –¶–ë (–µ—Å–ª–∏ FX-–ø–æ—Å—Ç —Ç–æ–ª—å–∫–æ –∏–∑-–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è)
    try:
        if _should_skip_by_cbr_cache(cbr_rates):
            logging.info("–ö—É—Ä—Å—ã –¶–ë –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å ‚Äî FX-–ø–æ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")
            return
    except Exception:
        pass

    if dry_run:
        logging.info("DRY-RUN (fx-only):\n%s", text)
        return

    await bot.send_message(chat_id=chat_id, text=text, parse_mode=constants.ParseMode.HTML, disable_web_page_preview=True)
    _save_cbr_cache(cbr_rates, text)

async def main_cy() -> None:
    parser = argparse.ArgumentParser(description="Cyprus daily post runner")
    parser.add_argument("--date", type=str, default="", help="–î–∞—Ç–∞ YYYY-MM-DD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å–µ–≥–æ–¥–Ω—è –≤ TZ)")
    parser.add_argument("--for-tomorrow", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞—Ç—É +1 –¥–µ–Ω—å")
    parser.add_argument("--dry-run", action="store_true", help="–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥")
    parser.add_argument("--fx-only", action="store_true", help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–ª–æ–∫ ¬´–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç¬ª")
    parser.add_argument("--to-test", action="store_true", help="–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª (CHANNEL_ID_TEST)")
    parser.add_argument("--chat-id", type=str, default="", help="–Ø–≤–Ω—ã–π chat_id –∫–∞–Ω–∞–ª–∞ (–ø–µ—Ä–µ–±–∏–≤–∞–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ)")
    args = parser.parse_args()

    tz = pendulum.timezone(TZ_STR)
    base_date = pendulum.parse(args.date).in_tz(tz) if args.date else pendulum.now(tz)
    if args.for_tomorrow:
        base_date = base_date.add(days=1)

    chat_id = resolve_chat_id(args.chat_id, args.to_test)
    bot = Bot(token=TOKEN)

    with _TodayPatch(base_date):
        if args.fx_only:
            await _send_fx_only(bot, chat_id, base_date, tz, dry_run=args.dry_run)
            return

        if args.dry_run:
            logging.info("DRY-RUN: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞")
            return

        await main_common(
            bot=bot,
            chat_id=chat_id,
            region_name="–ö–∏–ø—Ä",
            sea_label=SEA_LABEL,
            sea_cities=SEA_CITIES_ORDERED,
            other_label=OTHER_LABEL,
            other_cities=OTHER_CITIES_ALL,
            tz=TZ_STR,
        )

if __name__ == "__main__":
    asyncio.run(main_cy())
