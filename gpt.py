#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
gpt.py ‚Äî ¬´–í—ã–≤–æ–¥¬ª –∏ ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏¬ª –¥–ª—è VayboMeter.

–ö–æ–Ω—Ç—Ä–∞–∫—Ç:
    gpt_blurb(theme) -> (summary: str, tips: List[str])

–ü–æ–≤–µ–¥–µ–Ω–∏–µ:
- –ï—Å–ª–∏ DISABLE_LLM_DAILY=1 –∏–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã/–ø–∞–¥–∞—é—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–ª–ª–±—ç–∫.
- –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏: OpenAI -> Gemini -> Groq. –õ—é–±–æ–π —É–¥–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–∞—Ä—Å–∏—Ç—Å—è –≤ (summary, tips).
- –ß–∏—Å—Ç–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ <think>‚Ä¶</think> –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π.
- –°–æ–≤–µ—Ç—ã –∫–æ—Ä–æ—Ç–∫–∏–µ (–¥–æ ~12 —Å–ª–æ–≤), —Å —ç–º–æ–¥–∑–∏. –ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ç—Ä–æ–∫ ‚Äî –¥–æ–±–∏—Ä–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞.

–û–∫—Ä—É–∂–µ–Ω–∏–µ:
- OPENAI_API_KEY, GEMINI_API_KEY, GROQ_API_KEY ‚Äî –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.
- DISABLE_LLM_DAILY=1 ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ñ–æ–ª–ª–±—ç–∫ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM.
"""

from __future__ import annotations
from typing import List, Tuple, Optional
import os, re, random

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Ñ–∏–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _llm_disabled() -> bool:
    return os.getenv("DISABLE_LLM_DAILY", "0").strip().lower() in ("1", "true", "yes", "on")

_THINK_TAG_BLOCK_RE = re.compile(r"<think>.*?</think>", re.IGNORECASE | re.DOTALL)
_THINK_TAG_RE = re.compile(r"</?think>", re.IGNORECASE)

def _strip_think(s: str) -> str:
    s = _THINK_TAG_BLOCK_RE.sub("", s or "")
    s = _THINK_TAG_RE.sub("", s)
    return s.strip()

# –ö–∞—Ä—Ç–∞ ¬´—Ç–µ–º—ã¬ª -> —Å–ª–æ–≤–æ –≤ —Ñ—Ä–∞–∑–µ ¬´–≤–∏–Ω–∏—Ç–µ ‚Ä¶¬ª
_CULPRIT_WORD = {
    "–ø–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞": "–ø–æ–≥–æ–¥—É",
    "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏": "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏",
    "–ø–ª–æ—Ö–æ–π –≤–æ–∑–¥—É—Ö": "–≤–æ–∑–¥—É—Ö",
    "–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å": "–∑–¥–æ—Ä–æ–≤—ã–π —Ä–µ–∂–∏–º",
    "–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è": "–õ—É–Ω—É",
}

# –ë–µ–π–∑–ª–∞–π–Ω —Å–æ–≤–µ—Ç—ã, —á—Ç–æ–±—ã –±—ã–ª–æ —á–µ–º –¥–æ–±–∏—Ä–∞—Ç—å
ASTRO_HEALTH_FALLBACK: List[str] = [
    "üíß –ü–µ–π—Ç–µ –≤–æ–¥—É –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –≥–ª–æ—Ç–∫–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è",
    "üò¥ –õ–æ–∂–∏—Ç–µ—Å—å —Å–ø–∞—Ç—å –Ω–∞ 30 –º–∏–Ω—É—Ç —Ä–∞–Ω—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ",
    "ü´Å 4-7-8: –≤–¥–æ—Ö 4—Å, –∑–∞–¥–µ—Ä–∂–∫–∞ 7—Å, –≤—ã–¥–æ—Ö 8—Å ‚Äî —Ç—Ä–∏ —Ü–∏–∫–ª–∞",
    "ü•ó –£–∂–∏–Ω –¥–æ 19:00, –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –∏ –±–µ–ª–∫–∞",
    "üö∂ 15 –º–∏–Ω—É—Ç –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ—Å–ª–µ –µ–¥—ã ‚Äî —Å–∞—Ö–∞—Ä –∏ —Å–æ–Ω –ª—É—á—à–µ",
    "üìµ –ó–∞ —á–∞—Å –¥–æ —Å–Ω–∞ ‚Äî –±–µ–∑ —ç–∫—Ä–∞–Ω–æ–≤, —Ç—É—Å–∫–ª—ã–π —Å–≤–µ—Ç",
    "üßÇ –ú–µ–Ω—å—à–µ —Å–æ–ª–∏ –∏ –∞–ª–∫–æ–≥–æ–ª—è ‚Äî –¥–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–∂–µ—Ç —Å–ø–∞—Å–∏–±–æ",
    "üßò 5 –º–∏–Ω—É—Ç —Ä–∞—Å—Ç—è–∂–∫–∏ —à–µ–∏ –∏ –ø–ª–µ—á, –ø–ª–µ—á–∏ –≤–Ω–∏–∑",
    "‚òÄÔ∏è 10 –º–∏–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ —Å–≤–µ—Ç–∞ ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∏—Ç–º—ã",
]

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É–ª—ã –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
CULPRITS = {
    "–ø–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞": {
        "tips": [
            "üß• –°–ª–æ–∏ –æ–¥–µ–∂–¥—ã –∏ –∫–∞–ø—é—à–æ–Ω ‚Äî —Ç–µ–ø–ª–æ –∏ —Å—É—Ö–æ",
            "‚òî –ö–æ—Ä–æ—Ç–∫–∏–µ –≤—ã—Ö–æ–¥—ã –º–µ–∂–¥—É –ª–∏–≤–Ω—è–º–∏, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–∞–¥–∞—Ä—ã",
            "ü•£ –¢—ë–ø–ª—ã–π —Å—É–ø –∏ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã ‚Äî –∫–æ–º—Ñ–æ—Ä—Ç –∏ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è",
        ]
    },
    "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏": {
        "tips": [
            "üíß –ë–æ–ª—å—à–µ –≤–æ–¥—ã –∏ –º–∞–≥–Ω–∏–π –≤–µ—á–µ—Ä–æ–º ‚Äî –º–µ–Ω—å—à–µ –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏",
            "ü´Å –î—ã—Ö–∞–Ω–∏–µ –ø–æ –∫–≤–∞–¥—Ä–∞—Ç—É 4-4-4-4 ‚Äî —É—Å–ø–æ–∫–æ–∏—Ç –ø—É–ª—å—Å",
            "üò¥ –†–µ–∂–∏–º —Å–Ω–∞ –±–µ–∑ –∫–æ—Ñ–µ–∏–Ω–∞ –ø–æ—Å–ª–µ 15:00",
        ]
    },
    "–ø–ª–æ—Ö–æ–π –≤–æ–∑–¥—É—Ö": {
        "tips": [
            "üò∑ –ú–∞—Å–∫–∞ –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —É–ª–∏—Ü–µ, –æ–∫–Ω–∞ –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏",
            "üåø –í–æ–∑–¥—É—Ö–æ–æ—á–∏—Å—Ç–∏—Ç–µ–ª—å/HEPA, –≤–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –≤–µ—á–µ—Ä–æ–º",
            "üö∂ –ü—Ä–æ–≥—É–ª–∫–∞ —É –º–æ—Ä—è/–ø–∞—Ä–∫–∞ ‚Äî –ø—ã–ª–∏ –º–µ–Ω—å—à–µ",
        ]
    },
    "–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å": {
        "tips": [
            "ü•ó –¢–∞—Ä–µ–ª–∫–∞: ¬Ω –æ–≤–æ—â–∏, ¬º –±–µ–ª–æ–∫, ¬º —Ü–µ–ª—å–Ω—ã–µ –∫—Ä—É–ø—ã",
            "üö∂ 7‚Äì10k —à–∞–≥–æ–≤, –±–µ–∑ —Ñ–∞–Ω–∞—Ç–∏–∑–º–∞",
            "üí§ 90 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞ ‚Äî –±–µ–∑ —Ç—è–∂—ë–ª–æ–π –µ–¥—ã",
        ]
    },
    "–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è": {
        "tips": [
            "üßò 5 –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã —É—Ç—Ä–æ–º ‚Äî —Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏",
            "üìì –ó–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–∏ —Ü–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å ‚Äî —á—ë—Ç–∫–∏–π –≤–µ–∫—Ç–æ—Ä",
            "ü§ù –ù–µ–±–æ–ª—å—à–æ–π –¥–æ–±—Ä—ã–π –ø–æ—Å—Ç—É–ø–æ–∫ ‚Äî —É–∫—Ä–µ–ø–∏—Ç —Å–≤—è–∑–∏",
        ]
    },
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü—Ä–æ–º–ø—Ç—ã –∏ –ø–∞—Ä—Å–∏–Ω–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _make_prompt(theme: str) -> str:
    cul = _CULPRIT_WORD.get(theme, theme)
    return (
        "–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π health coach —Å–æ –∑–Ω–∞–Ω–∏—è–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã, "
        "–∫–æ—Ç–æ—Ä—ã–π –¥–∞—ë—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n"
        f"1) –û–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: ¬´–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {cul}!¬ª. "
        "–ü–æ—Å–ª–µ —Ç–æ—á–∫–∏ ‚Äî –ø–æ–∑–∏—Ç–∏–≤ ‚â§12 —Å–ª–æ–≤.\n"
        "2) –ó–∞—Ç–µ–º —Ä–æ–≤–Ω–æ 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—É–Ω–∫—Ç–∞ (‚â§12 —Å–ª–æ–≤ –∫–∞–∂–¥—ã–π) —Å —ç–º–æ–¥–∑–∏: "
        "–ø–∏—Ç–∞–Ω–∏–µ, —Å–æ–Ω/–¥—ã—Ö–∞–Ω–∏–µ, –ª—ë–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å/—Ä–µ–∂–∏–º. "
        "–ù–µ –ø–∏—à–∏ —Å–ª–æ–≤–æ ¬´—Å–æ–≤–µ—Ç¬ª. –û—Ç–≤–µ—Ç ‚Äî –ø–æ —Å—Ç—Ä–æ–∫–∞–º."
    )

def _from_lines(culprit: str, lines: List[str], tips_pool: List[str]) -> Tuple[str, List[str]]:
    lines = [ln.strip() for ln in lines if ln and ln.strip()]
    summary = ""
    tips: List[str] = []

    if lines:
        summary = lines[0]
        tail = [ln for ln in lines[1:] if ln and not ln.startswith("#")]
        for ln in tail:
            if len(tips) >= 3:
                break
            # –û—Ç—Å–µ—á—å –∫–æ—Å—Ç—ã–ª–∏ –≤—Ä–æ–¥–µ ¬´–°–æ–≤–µ—Ç 1:¬ª
            ln = re.sub(r"^(?:[-‚Ä¢\d\.\)]\s*)?(?:—Å–æ–≤–µ—Ç|tip)\s*\d*[:\-]\s*", "", ln, flags=re.I).strip()
            if ln:
                tips.append(ln)

    # –ï—Å–ª–∏ summary –ø—É—Å—Ç–æ–π ‚Äî –ø–æ—Å—Ç–∞–≤–∏–º –±–∞–∑–æ–≤—É—é —Ñ—Ä–∞–∑—É
    if not summary:
        summary = f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"

    # –î–æ–±–∏—Ä–∞–µ–º —Å–æ–≤–µ—Ç—ã –∏–∑ –ø—É–ª–∞
    pool = (ASTRO_HEALTH_FALLBACK + tips_pool) if tips_pool else ASTRO_HEALTH_FALLBACK
    while len(tips) < 3 and pool:
        candidate = random.choice(pool)
        pool.remove(candidate)
        if candidate not in tips:
            tips.append(candidate)

    # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—ã (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)
    def _clip(s: str) -> str:
        s = s.strip()
        return s if len(s) <= 120 else (s[:117].rstrip() + "‚Ä¶")

    summary = _clip(summary)
    tips = [_clip(t) for t in tips[:3]]
    return summary, tips

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _try_openai(prompt: str) -> Optional[str]:
    api_key = os.getenv("OPENAI_API_KEY", "").strip()
    if not api_key:
        return None
    try:
        # –ù–æ–≤—ã–π SDK (openai>=1.0)
        from openai import OpenAI  # type: ignore
        client = OpenAI(api_key=api_key)
        model = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
        resp = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ-—Ä—É—Å—Å–∫–∏."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.6,
            max_tokens=280,
        )
        text = resp.choices[0].message.content or ""
        return _strip_think(text)
    except Exception:
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ä—ã–π SDK (openai<1.0)
        try:
            import openai  # type: ignore
            openai.api_key = api_key
            model = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
            resp = openai.ChatCompletion.create(
                model=model,
                messages=[
                    {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ-—Ä—É—Å—Å–∫–∏."},
                    {"role": "user", "content": prompt},
                ],
                temperature=0.6,
                max_tokens=280,
            )
            text = resp["choices"][0]["message"]["content"] or ""
            return _strip_think(text)
        except Exception:
            return None

def _try_gemini(prompt: str) -> Optional[str]:
    api_key = os.getenv("GEMINI_API_KEY", "").strip()
    if not api_key:
        return None
    try:
        import google.generativeai as genai  # type: ignore
        genai.configure(api_key=api_key)
        model_name = os.getenv("GEMINI_MODEL", "gemini-1.5-flash")
        model = genai.GenerativeModel(model_name)
        resp = model.generate_content(prompt)
        text = ""
        if hasattr(resp, "text") and resp.text:
            text = resp.text
        elif hasattr(resp, "candidates") and resp.candidates:
            text = resp.candidates[0].content.parts[0].text
        return _strip_think(text)
    except Exception:
        return None

def _try_groq(prompt: str) -> Optional[str]:
    api_key = os.getenv("GROQ_API_KEY", "").strip()
    if not api_key:
        return None
    try:
        from groq import Groq  # type: ignore
        client = Groq(api_key=api_key)
        model = os.getenv("GROQ_MODEL", "llama-3.1-70b-versatile")
        resp = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ-—Ä—É—Å—Å–∫–∏."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.6,
            max_tokens=280,
        )
        text = resp.choices[0].message.content or ""
        return _strip_think(text)
    except Exception:
        return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü—É–±–ª–∏—á–Ω–æ–µ API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def gpt_blurb(theme: str) -> Tuple[str, List[str]]:
    """
    –í–µ—Ä–Ω—ë—Ç (summary, tips).
    –ü—Ä–∏ –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–º LLM –∏–ª–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ ‚Äî —Ñ–æ–ª–ª–±—ç–∫ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    """
    culprit = _CULPRIT_WORD.get(theme, theme)
    tips_pool = CULPRITS.get(theme, {}).get("tips", [])

    if _llm_disabled():
        # –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ñ–æ–ª–ª–±—ç–∫
        summary = f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
        pool = (ASTRO_HEALTH_FALLBACK + tips_pool) if tips_pool else ASTRO_HEALTH_FALLBACK
        tips = random.sample(pool, k=min(3, len(pool))) if pool else []
        while len(tips) < 3:
            tips.append("üíß –ü–µ–π—Ç–µ –≤–æ–¥—É –∏ –≤—ã—Å—ã–ø–∞–π—Ç–µ—Å—å")
        return summary, tips[:3]

    prompt = _make_prompt(theme)

    # 1) OpenAI
    text = _try_openai(prompt)
    if text:
        return _from_lines(culprit, text.splitlines(), tips_pool)

    # 2) Gemini
    text = _try_gemini(prompt)
    if text:
        return _from_lines(culprit, text.splitlines(), tips_pool)

    # 3) Groq
    text = _try_groq(prompt)
    if text:
        return _from_lines(culprit, text.splitlines(), tips_pool)

    # 4) –ü–æ–ª–Ω—ã–π —Ñ–æ–ª–ª–±—ç–∫
    summary = f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"
    pool = (ASTRO_HEALTH_FALLBACK + tips_pool) if tips_pool else ASTRO_HEALTH_FALLBACK
    tips = random.sample(pool, k=min(3, len(pool))) if pool else []
    while len(tips) < 3:
        tips.append("üò¥ –†–µ–∂–∏–º —Å–Ω–∞: –ª—è–≥—Ç–µ –Ω–∞ 30 –º–∏–Ω—É—Ç —Ä–∞–Ω—å—à–µ")
    return summary, tips[:3]


# –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–æ–Ω
if __name__ == "__main__":
    for t in ("–ø–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞", "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏", "–ø–ª–æ—Ö–æ–π –≤–æ–∑–¥—É—Ö", "–∑–¥–æ—Ä–æ–≤—ã–π –¥–µ–Ω—å", "–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è"):
        s, tips = gpt_blurb(t)
        print("‚Äî", t, "‚Äî")
        print(s)
        for x in tips:
            print(" ‚Ä¢", x)
        print()
