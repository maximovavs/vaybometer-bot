#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import random
from typing import Tuple, List

try:
    from openai import OpenAI
except ImportError:
    OpenAI = None  # –ï—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—É–¥–µ–º –≤—ã–∑—ã–≤–∞—Ç—å GPT

OPENAI_KEY = os.getenv("OPENAI_API_KEY")

# –°–ª–æ–≤–∞—Ä—å ¬´–≤–∏–Ω–æ–≤–Ω–∏–∫–æ–≤¬ª —Å–æ —Å–≤–æ–∏–º–∏ —ç–º–æ–¥–∂–∏ –∏ –ø—É–ª–æ–º —Å–æ–≤–µ—Ç–æ–≤
CULPRITS = {
    "—Ç—É–º–∞–Ω": {
        "emoji": "üåÅ",
        "tips": [
            "üî¶ –°–≤–µ—Ç–ª–∞—è –æ–¥–µ–∂–¥–∞ –∏ —Ñ–æ–Ω–∞—Ä—å",
            "üöó –í–æ–¥–∏—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ",
            "‚è∞ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –¥–æ—Ä–æ–≥—É —Å –∑–∞–ø–∞—Å–æ–º",
            "üëÄ –£–≤–µ–ª–∏—á—å—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –º–µ–∂–¥—É –∞–≤—Ç–æ",
        ],
    },
    "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏": {
        "emoji": "üß≤",
        "tips": [
            "üßò 5-–º–∏–Ω—É—Ç–Ω–∞—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞",
            "üåø –ó–∞–≤–∞—Ä–∏—Ç–µ —á–∞–π —Å –º–µ–ª–∏—Å—Å–æ–π",
            "üôÖ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π",
            "üòå –õ—ë–≥–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
        ],
    },
    "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ": {
        "emoji": "üå°Ô∏è",
        "tips": [
            "üíß –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã",
            "üò¥ 20-–º–∏–Ω –¥–Ω–µ–≤–Ω–æ–π –æ—Ç–¥—ã—Ö",
            "ü§∏ –ù–µ–∂–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞",
            "ü•ó –õ—ë–≥–∫–∏–π —É–∂–∏–Ω –±–µ–∑ —Å–æ–ª–∏",
        ],
    },
    "—à–∞–ª—å–Ω–æ–π –≤–µ—Ç–µ—Ä": {
        "emoji": "üí®",
        "tips": [
            "üß£ –ó–∞—Ö–≤–∞—Ç–∏—Ç–µ —à–∞—Ä—Ñ",
            "üö∂ –ö–æ—Ä–æ—Ç–∫–∞—è –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≥—É–ª–∫–∞",
            "üï∂Ô∏è –ó–∞—â–∏—Ç–∏—Ç–µ –≥–ª–∞–∑–∞ –æ—Ç –ø—ã–ª–∏",
            "ü§ö –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫—Ä—ã—à–∫–∏ –º—É—Å–æ—Ä–Ω—ã—Ö –±–∞–∫–æ–≤",
        ],
    },
    "–∂–∞—Ä–∞": {
        "emoji": "üî•",
        "tips": [
            "üí¶ –î–µ—Ä–∂–∏—Ç–µ –≤–æ–¥—É –ø–æ–¥ —Ä—É–∫–æ–π",
            "üß¢ –ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
            "üå≥ –ò—â–∏—Ç–µ —Ç–µ–Ω—å –≤ –ø–æ–ª–¥–µ–Ω—å",
            "‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–π –∫–æ–º–ø—Ä–µ—Å—Å –Ω–∞ –ª–æ–±",
        ],
    },
    "—Å—ã—Ä–æ—Å—Ç—å": {
        "emoji": "üíß",
        "tips": [
            "üëü –°–º–µ–Ω–Ω–∞—è –æ–±—É–≤—å –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç",
            "üåÇ –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–æ–Ω—Ç –≤ —Ä—é–∫–∑–∞–∫",
            "üå¨Ô∏è –ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–π—Ç–µ –ø–æ–º–µ—â–µ–Ω–∏—è",
            "üß• –ª—ë–≥–∫–∞—è –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞—è –∫—É—Ä—Ç–∫–∞",
        ],
    },
    "–ø–æ–ª–Ω–∞—è –ª—É–Ω–∞": {
        "emoji": "üåï",
        "tips": [
            "üìù –ó–∞–ø–∏—à–∏—Ç–µ —è—Ä–∫–∏–µ –∏–¥–µ–∏",
            "üßò –ú—è–≥–∫–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
            "üåô –ü–æ–ª—é–±—É–π—Ç–µ—Å—å –ª—É–Ω–æ–π –±–µ–∑ –≥–∞–¥–∂–µ—Ç–æ–≤",
            "üìö –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Å–ø–æ–∫–æ–π–Ω—É—é –∫–Ω–∏–≥—É",
        ],
    },
    "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç": {
        "emoji": "‚ú®",
        "tips": [
            "üî≠ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –Ω–µ–±–æ –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ",
            "üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∑–∞–∫–∞—Ç–∞",
            "ü§î –ü–æ–¥—É–º–∞–π—Ç–µ –æ –±–µ—Å–∫—Ä–∞–π–Ω–∏—Ö –ø—Ä–æ—Å—Ç–æ—Ä–∞—Ö",
            "‚ú® –ù–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å –º–≥–Ω–æ–≤–µ–Ω–∏–µ–º",
        ],
    },
}

def gpt_blurb(culprit: str) -> Tuple[str, List[str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (summary, tips) –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤–∏–Ω–æ–≤–Ω–∏–∫–∞.
    –ï—Å–ª–∏ –µ—Å—Ç—å OPENAI_KEY –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ OpenAI ‚Äî –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å 1 —Å—Ç—Ä–æ–∫—É + 3 —Å–æ–≤–µ—Ç–∞,
    –∏–Ω–∞—á–µ ‚Äî –≤–æ–∑—å–º—ë–º 2 –ª—é–±—ã—Ö —Å–æ–≤–µ—Ç–∞ –∏–∑ CULPRITS[culprit].
    """
    # –í–æ–∑—å–º—ë–º –ø—É–ª —Å–æ–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º ¬´–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç¬ª –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç
    entry = CULPRITS.get(culprit, CULPRITS["–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç"])
    tips_pool = entry["tips"]
    # –ë–∞–∑–æ–≤—ã–π summary
    summary = f"–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}! üòâ"

    # –ë–µ–∑ OpenAI ‚Äî –±–µ—Ä—ë–º –ø—Ä–æ—Å—Ç–æ –¥–≤–∞ —Å–æ–≤–µ—Ç–∞
    if not OPENAI_KEY or OpenAI is None:
        count = min(2, len(tips_pool))
        return summary, random.sample(tips_pool, count)

    # –ò–Ω–∞—á–µ ‚Äî –≥–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GPT
    prompt = (
        f"–û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞: ¬´–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}!¬ª. "
        "–ü–æ—Å–ª–µ —Ç–æ—á–∫–∏ ‚Äî –ø–æ–∑–∏—Ç–∏–≤ ‚â§12 —Å–ª–æ–≤. –ó–∞—Ç–µ–º 3 bullet-—Å–æ–≤–µ—Ç–∞ ‚â§12 —Å–ª–æ–≤ —Å —ç–º–æ–¥–∑–∏."
    )
    try:
        client = OpenAI(api_key=OPENAI_KEY)
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.6,
            messages=[{"role": "user", "content": prompt}],
        )
        text = resp.choices[0].message.content.strip().splitlines()
        lines = [l.strip() for l in text if l.strip()]
        # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî summary
        summary = lines[0]
        # —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ —Ç—Ä—ë—Ö ‚Äî —Å–æ–≤–µ—Ç—ã
        tips = [l.lstrip("-‚Ä¢ ").strip() for l in lines[1:4]]
        # –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –º–µ–Ω—å—à–µ 2 —Å–æ–≤–µ—Ç–æ–≤, –¥–æ–ø–æ–ª–Ω—è–µ–º –∏–∑ –ø—É–ª–∞
        if len(tips) < 2:
            extras = random.sample(tips_pool, min(2, len(tips_pool)))
            tips = (tips + extras)[:2]
        return summary, tips
    except Exception:
        # –ø—Ä–∏ —Å–±–æ–µ OpenAI –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–µ—Ä–Ω—ë–º –ø–∞—Ä—É —Å–æ–≤–µ—Ç–æ–≤ –∏–∑ –ø—É–ª–∞
        count = min(2, len(tips_pool))
        return summary, random.sample(tips_pool, count)
