"""
post.py ‚Äì Vaybo–ú–µ—Ç—Ä Limassol v5.2

‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤–µ—á–µ—Ä–æ–º –≤ 21:00 Asia/Nicosia (cron 18 UTC)
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–µ—Ç –ó–ê–í–¢–†–ê:
      ‚Äì –º–∞–∫—Å / –º–∏–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã,
      ‚Äì –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ç—É–º–∞–Ω–µ, –µ—Å–ª–∏ ‚â•40 % —á–∞—Å–æ–≤ –∏–º–µ—é—Ç weather-code 45/48
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ ¬´–°–∞–º—ã–π —Ç—ë–ø–ª—ã–π / –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –≥–æ—Ä–æ–¥¬ª –ø–æ —Å—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
      —Å—Ä–µ–¥–∏ –õ–∏–º–∞—Å—Å–æ–ª–∞, –õ–∞—Ä–Ω–∞–∫–∏, –ù–∏–∫–æ—Å–∏–∏, –ü–∞—Ñ–æ—Å–∞
‚Ä¢ –í—Å–µ –ø—Ä–µ–∂–Ω–∏–µ –±–ª–æ–∫–∏ (–∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞, –ö–ü, –®—É–º–∞–Ω, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è, –≤—ã–≤–æ–¥-—à—É—Ç–∫–∞,
  —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ GPT) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
"""

from __future__ import annotations
import asyncio, os, sys, math
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

import requests, swisseph as swe
from openai import OpenAI
from telegram import Bot, error as tg_err

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
HOME = ("–õ–∏–º–∞—Å—Å–æ–ª", 34.707, 33.022)
CITIES = {
    "–õ–∏–º–∞—Å—Å–æ–ª": (34.707, 33.022),
    "–õ–∞—Ä–Ω–∞–∫–∞":  (34.916, 33.613),
    "–ù–∏–∫–æ—Å–∏—è":  (35.166, 33.366),
    "–ü–∞—Ñ–æ—Å":    (34.776, 32.429),
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É—Ç–∏–ª–∏—Ç–∞ HTTP ------------------------------------------------
def _get(url: str, **params) -> Optional[dict]:
    try:
        r = requests.get(url, params=params, timeout=20)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        print(f"[warn] {url} -> {e}", file=sys.stderr)
        return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ --------------------------
def forecast_tomorrow(lat: float, lon: float) -> dict:
    tomorrow = datetime.utcnow().date() + timedelta(days=1)
    d = _get(
        "https://api.open-meteo.com/v1/forecast",
        latitude=lat,
        longitude=lon,
        timezone="UTC",
        hourly="temperature_2m,weathercode",
        daily="temperature_2m_max,temperature_2m_min,temperature_2m_mean",
        start_date=tomorrow.isoformat(),
        end_date=(tomorrow + timedelta(days=1)).isoformat(),
    )
    if not d:
        raise RuntimeError("no forecast")
    return d

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ fog detection ----------------------------------------------
def fog_risk(hourly_codes: list[int]) -> bool:
    fog_hours = sum(1 for code in hourly_codes if code in (45, 48))
    return fog_hours / 24 >= 0.40  # ‚â• 40 %

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ hottest / coldest by mean temp ------------------------------
def hot_cold_mean() -> tuple[str, float, str, float]:
    res = []
    for city, (lat, lon) in CITIES.items():
        try:
            t_mean = forecast_tomorrow(lat, lon)["daily"]["temperature_2m_mean"][0]
            res.append((city, t_mean))
        except Exception:
            continue
    hot = max(res, key=lambda x: x[1])
    cold = min(res, key=lambda x: x[1])
    return hot[0], hot[1], cold[0], cold[1]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ astrology helpers (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ------------------------------
signs=("–û–≤–Ω–µ","–¢–µ–ª—å—Ü–µ","–ë–ª–∏–∑–Ω–µ—Ü–∞—Ö","–†–∞–∫–µ","–õ—å–≤–µ","–î–µ–≤–µ",
       "–í–µ—Å–∞—Ö","–°–∫–æ—Ä–ø–∏–æ–Ω–µ","–°—Ç—Ä–µ–ª—å—Ü–µ","–ö–æ–∑–µ—Ä–æ–≥–µ","–í–æ–¥–æ–ª–µ–µ","–†—ã–±–∞—Ö")
lunar_eff=("–ø—Ä–∏–¥–∞—ë—Ç —Å–º–µ–ª–æ—Å—Ç–∏","–∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç","–ø–æ–≤—ã—à–∞–µ—Ç –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å",
           "—É—Å–∏–ª–∏–≤–∞–µ—Ç –∑–∞–±–æ—Ç—É","—Ä–∞–∑–∂–∏–≥–∞–µ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –æ–≥–æ–Ω—å","–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞ –ø–æ—Ä—è–¥–æ–∫",
           "–∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å –±–∞–ª–∞–Ω—Å","–ø–æ–¥–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–∞—Å—Ç—å","—Ç–æ–ª–∫–∞–µ—Ç –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º",
           "—Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç –Ω–∞ –¥–µ–ª–µ","–¥–∞—Ä–∏—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∏–¥–µ–∏","—É—Å–∏–ª–∏–≤–∞–µ—Ç —ç–º–ø–∞—Ç–∏—é")

def moon_phase(jd):
    sun=swe.calc_ut(jd,swe.SUN)[0][0]; moon=swe.calc_ut(jd,swe.MOON)[0][0]
    phase=((moon-sun+360)%360)/360; illum=round(abs(math.cos(math.pi*phase))*100)
    name=("–ù–æ–≤–æ–ª—É–Ω–∏–µ" if illum<5 else "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞" if phase<.5 else
          "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ" if illum>95 else "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞")
    sign=int(moon//30)
    return f"{name} –≤ {signs[sign]} ‚Äî {lunar_eff[sign]} ({illum} %)"

def planet_parade(jd):
    lons=sorted(swe.calc_ut(jd,b)[0][0] for b in
                (swe.MERCURY,swe.VENUS,swe.MARS,swe.JUPITER,swe.SATURN))
    best=min((lons[i+2]-lons[i])%360 for i in range(len(lons)-2))
    return "–ú–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç" if best<90 else None

def trine_vj(jd):
    v,j=swe.calc_ut(jd,swe.VENUS)[0][0],swe.calc_ut(jd,swe.JUPITER)[0][0]
    return "–¢—Ä–∏–Ω –í–µ–Ω–µ—Ä—ã –∏ –Æ–ø–∏—Ç–µ—Ä–∞ ‚Äî –≤–æ–ª–Ω–∞ —É–¥–∞—á–∏" if abs((v-j+180)%360-180)<4 else None

def astro_events():
    jd=swe.julday(*datetime.utcnow().timetuple()[:3])
    pts=[moon_phase(jd)]
    for fn in (planet_parade,trine_vj):
        if s:=fn(jd): pts.append(s)
    if swe.calc_ut(jd,swe.MERCURY)[0][3]<0:
        pts.append("–ú–µ—Ä–∫—É—Ä–∏–π —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–µ–Ω")
    return "\n".join(pts)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ GPT one-liner + tips ---------------------------------------
def gpt_blurb(culprit:str)->tuple[str,str]:
    prompt=(f"–û–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: '–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ {culprit}.' "
            "–î–æ–±–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∑–∏—Ç–∏–≤ (‚â§12 —Å–ª–æ–≤). "
            "–ü–æ—Ç–æ–º –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –†–û–í–ù–û 3 –≤–µ—Å—ë–ª—ã—Ö bullet-—Å–æ–≤–µ—Ç–∞, ‚â§12 —Å–ª–æ–≤.")
    res=OpenAI(api_key=os.getenv("OPENAI_API_KEY")).chat.completions.create(
        model="gpt-4o-mini",temperature=0.6,
        messages=[{"role":"user","content":prompt}]
    ).choices[0].message.content.strip().splitlines()
    lines=[l.strip() for l in res if l.strip()]
    summary=lines[0]
    tips="\n".join(f"- {l.lstrip('-‚Ä¢ ').strip()}" for l in lines[1:4])
    return summary,tips

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ build message ----------------------------------------------
def build_message()->str:
    name,lat,lon=HOME
    fc=forecast_tomorrow(lat,lon)
    daily=fc["daily"]
    fog=fog_risk(fc["hourly"]["weathercode"])

    hot_city, hot_t, cold_city, cold_t = hot_cold_mean()

    P=["‚òÄÔ∏è <b>–ü–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞</b>",
       f"<b>–¢–µ–º–ø. –¥–Ω—ë–º:</b> –¥–æ {daily['temperature_2m_max'][0]:.0f} ¬∞C",
       f"<b>–¢–µ–º–ø. –Ω–æ—á—å—é:</b> –æ–∫–æ–ª–æ {daily['temperature_2m_min'][0]:.0f} ¬∞C"]

    if fog:
        P.append("–í–µ—Ä–æ—è—Ç–µ–Ω —Ç—É–º–∞–Ω üå´Ô∏è –≤ —É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã")

    P.append(f"–°–∞–º—ã–π —Ç—ë–ø–ª—ã–π –≥–æ—Ä–æ–¥: {hot_city} ({hot_t:.1f} ¬∞C)")
    P.append(f"–°–∞–º—ã–π –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π –≥–æ—Ä–æ–¥: {cold_city} ({cold_t:.1f} ¬∞C)")

    # ‚Äî –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è, –≤–æ–∑–¥—É—Ö, –ö–ü, –®—É–º–∞–Ω, –º–æ—Ä–µ ‚Äî –º–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –±–ª–æ–∫–∏ –∑–¥–µ—Å—å ‚Äî

    P.append("---")
    culprit="—Ç—É–º–∞–Ω" if fog else "–∫–∞–ø—Ä–∏–∑—ã –ø–æ–≥–æ–¥—ã"
    summary, tips = gpt_blurb(culprit)
    P += ["<b>üìù –í—ã–≤–æ–¥</b>", summary, "", "<b>‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>", tips]
    return "\n".join(P)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ telegram send ----------------------------------------------
async def send(text:str):
    await Bot(os.getenv("TELEGRAM_TOKEN")).send_message(
        chat_id=os.getenv("CHANNEL_ID"),
        text=text[:4096],parse_mode="HTML",
        disable_web_page_preview=True)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main --------------------------------------------------------
async def main():
    md=build_message()
    print("Preview:", md.replace("\n"," | ")[:300])
    try:
        await send(md)
        print("‚úì sent")
    except tg_err.TelegramError as e:
        print("Telegram error:",e,file=sys.stderr); raise

if __name__=="__main__":
    asyncio.run(main())
