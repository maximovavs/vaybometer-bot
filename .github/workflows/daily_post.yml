#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
post.py ‚Äì Vaybo–ú–µ—Ç—Ä Limassol v6.1  (21:00 Asia/Nicosia ‚Üí –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞)
"""

from __future__ import annotations
import asyncio, os, sys, math
from datetime import datetime, timedelta
from typing import Optional

import requests, swisseph as swe
from openai import OpenAI
from telegram import Bot, error as tg_err

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≥–µ–æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
HOME = ("–õ–∏–º–∞—Å—Å–æ–ª", 34.707, 33.022)
CITIES = {
    "–õ–∏–º–∞—Å—Å–æ–ª": (34.707, 33.022),
    "–õ–∞—Ä–Ω–∞–∫–∞":  (34.916, 33.613),
    "–ù–∏–∫–æ—Å–∏—è":  (35.166, 33.366),
    "–ü–∞—Ñ–æ—Å":    (34.776, 32.429),
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HTTP helper ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _get(url: str, **params) -> Optional[dict]:
    try:
        r = requests.get(url, params=params, timeout=20)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        print(f"[warn] {url} ‚Üí {e}", file=sys.stderr)
        return None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ forecast helper (Open-Meteo) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def forecast_tomorrow(lat: float, lon: float) -> dict:
    tomorrow = datetime.utcnow().date() + timedelta(days=1)
    return _get(
        "https://api.open-meteo.com/v1/forecast",
        latitude=lat, longitude=lon, timezone="UTC",
        hourly="temperature_2m,weathercode,cloud_cover,surface_pressure",
        daily="temperature_2m_max,temperature_2m_min,temperature_2m_mean,"
              "precipitation_probability_max",
        start_date=tomorrow.isoformat(),
        end_date=(tomorrow + timedelta(days=1)).isoformat(),
    )


def fog_risk(codes: list[int]) -> bool:
    return sum(1 for c in codes if c in (45, 48)) / 24 >= 0.40


def hot_cold_mean() -> tuple[str, float, str, float]:
    res = []
    for city, (lat, lon) in CITIES.items():
        d = forecast_tomorrow(lat, lon)
        t_mean = d["daily"]["temperature_2m_mean"][0]
        res.append((city, t_mean))
    hot = max(res, key=lambda x: x[1])
    cold = min(res, key=lambda x: x[1])
    return hot[0], hot[1], cold[0], cold[1]


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–æ–ø-API (–≤–æ–∑–¥—É—Ö/pollen/SST/Kp/–®—É–º–∞–Ω) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_air():
    k = os.getenv("AIRVISUAL_KEY")
    if not k:
        return None
    return _get("https://api.airvisual.com/v2/nearest_city",
                lat=HOME[1], lon=HOME[2], key=k)


def pm10_openmeteo():
    d = _get("https://air-quality-api.open-meteo.com/v1/air-quality",
             latitude=HOME[1], longitude=HOME[2],
             hourly="pm10", timezone="UTC")
    try:
        return round(float(d["hourly"]["pm10"][0]), 1)
    except Exception:
        return None


def get_pollen():
    key = os.getenv("TOMORROW_KEY")
    if not key:
        return None
    d = _get("https://api.tomorrow.io/v4/timelines",
             apikey=key,
             location=f"{HOME[1]},{HOME[2]}",
             fields="treeIndex,grassIndex,weedIndex",
             timesteps="1d")
    try:
        return d["data"]["timelines"][0]["intervals"][0]["values"]
    except Exception:
        return None


def get_sst():
    d = _get("https://marine-api.open-meteo.com/v1/marine",
             latitude=HOME[1], longitude=HOME[2],
             hourly="sea_surface_temperature",
             timezone="UTC")
    try:
        return round(float(d["hourly"]["sea_surface_temperature"][0]), 1)
    except Exception:
        return None


def get_kp():
    d = _get("https://services.swpc.noaa.gov/products/noaa-planetary-k-index.json")
    try:
        return float(d[-1][1])
    except Exception:
        return None


def get_schumann():
    d = _get("https://api.glcoherence.org/v1/earth")
    if d:
      return {"freq": d["frequency_1"], "amp": d["amplitude_1"]}
    return {"msg": "–¥–∞—Ç—á–∏–∫–∏ –º–æ–ª—á–∞—Ç —Ç—Ä–µ—Ç–∏–π –¥–µ–Ω—å ‚Äî —É—à–ª–∏ –≤ —Ä–µ—Ç—Ä–∏—Ç"}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ astrology helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SIGNS = ("–û–≤–Ω–µ","–¢–µ–ª—å—Ü–µ","–ë–ª–∏–∑–Ω–µ—Ü–∞—Ö","–†–∞–∫–µ","–õ—å–≤–µ","–î–µ–≤–µ",
         "–í–µ—Å–∞—Ö","–°–∫–æ—Ä–ø–∏–æ–Ω–µ","–°—Ç—Ä–µ–ª—å—Ü–µ","–ö–æ–∑–µ—Ä–æ–≥–µ","–í–æ–¥–æ–ª–µ–µ","–†—ã–±–∞—Ö")
EFFECT = ("–ø—Ä–∏–¥–∞—ë—Ç —Å–º–µ–ª–æ—Å—Ç–∏","–∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç","–ø–æ–≤—ã—à–∞–µ—Ç –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å",
          "—É—Å–∏–ª–∏–≤–∞–µ—Ç –∑–∞–±–æ—Ç—É","—Ä–∞–∑–∂–∏–≥–∞–µ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –æ–≥–æ–Ω—å","–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞ –ø–æ—Ä—è–¥–æ–∫",
          "–∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å –±–∞–ª–∞–Ω—Å","–ø–æ–¥–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–∞—Å—Ç—å","—Ç–æ–ª–∫–∞–µ—Ç –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º",
          "—Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç –Ω–∞ –¥–µ–ª–µ","–¥–∞—Ä–∏—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∏–¥–µ–∏","—É—Å–∏–ª–∏–≤–∞–µ—Ç —ç–º–ø–∞—Ç–∏—é")


def moon_phase(jd):
    sun = swe.calc_ut(jd, swe.SUN)[0][0]
    moon = swe.calc_ut(jd, swe.MOON)[0][0]
    phase = ((moon - sun + 360) % 360) / 360
    illum = round(abs(math.cos(math.pi * phase))*100)
    name = ("–ù–æ–≤–æ–ª—É–Ω–∏–µ" if illum<5 else "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞" if phase<.5 else
            "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ" if illum>95 else "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞")
    sign = int(moon // 30)
    return f"{name} –≤ {SIGNS[sign]} ‚Äî {EFFECT[sign]} ({illum} %)"


def planet_parade(jd):
    lons = sorted(swe.calc_ut(jd,b)[0][0] for b in
                  (swe.MERCURY,swe.VENUS,swe.MARS,swe.JUPITER,swe.SATURN))
    best = min((lons[i+2]-lons[i])%360 for i in range(len(lons)-2))
    return "–ú–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç" if best < 90 else None


def trine_vj(jd):
    v = swe.calc_ut(jd,swe.VENUS)[0][0]
    j = swe.calc_ut(jd,swe.JUPITER)[0][0]
    return "–¢—Ä–∏–Ω –í–µ–Ω–µ—Ä—ã –∏ –Æ–ø–∏—Ç–µ—Ä–∞ ‚Äî –≤–æ–ª–Ω–∞ —É–¥–∞—á–∏" if abs((v-j+180)%360-180)<4 else None


def astro_events():
    jd = swe.julday(*datetime.utcnow().timetuple()[:3])
    ev = [moon_phase(jd)]
    for fn in (planet_parade, trine_vj):
        if (s := fn(jd)):
            ev.append(s)
    return "\n".join(ev)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ GPT –≤—ã–≤–æ–¥ + —Å–æ–≤–µ—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def gpt_blurb(culprit:str):
    prompt = ("–û–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: '–ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –≤–∏–Ω–∏—Ç–µ "
              f"{culprit}.' –î–æ–±–∞–≤—å –ø–æ–∑–∏—Ç–∏–≤ ‚â§12 —Å–ª–æ–≤. –ü–æ—Ç–æ–º –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ —Ä–æ–≤–Ω–æ "
              "3 –≤–µ—Å—ë–ª—ã—Ö bullet-—Å–æ–≤–µ—Ç–∞ ‚â§12 —Å–ª–æ–≤.")
    res = OpenAI(api_key=os.getenv("OPENAI_API_KEY")).chat.completions.create(
        model="gpt-4o-mini", temperature=0.6,
        messages=[{"role":"user","content":prompt}]
    ).choices[0].message.content.strip().splitlines()
    lines=[l.strip() for l in res if l.strip()]
    summary=lines[0]
    tips="\n".join(f"- {l.lstrip('-‚Ä¢ ').strip()}" for l in lines[1:4])
    return summary, tips


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main builder ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_md() -> str:
    _, lat, lon = HOME
    fc  = forecast_tomorrow(lat, lon);  daily = fc["daily"];  hr = fc["hourly"]
    fog = fog_risk(hr["weathercode"])

    hot_city, hot_t, cold_city, cold_t = hot_cold_mean()
    press = round(hr["surface_pressure"][0])

    P=[
        "‚òÄÔ∏è <b>–ü–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞</b>",
        f"<b>–¢–µ–º–ø. –¥–Ω—ë–º:</b> –¥–æ {daily['temperature_2m_max'][0]:.0f} ¬∞C",
        f"<b>–¢–µ–º–ø. –Ω–æ—á—å—é:</b> –æ–∫–æ–ª–æ {daily['temperature_2m_min'][0]:.0f} ¬∞C",
        f"–°–∞–º—ã–π —Ç—ë–ø–ª—ã–π –≥–æ—Ä–æ–¥: {hot_city} ({hot_t:.1f} ¬∞C)",
        f"–°–∞–º—ã–π –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π: {cold_city} ({cold_t:.1f} ¬∞C)",
    ]
    if fog:
        P.append("–í–µ—Ä–æ—è—Ç–µ–Ω —Ç—É–º–∞–Ω üå´Ô∏è –≤ —É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã")

    # ==== EXTRA BLOCKS BEGIN ==================================================
    # 1. AQI
    if (air := get_air()):
        pol  = air["data"]["current"]["pollution"]
        pm25 = pol.get("p2") or round(pol["aqius"]*0.25,1)
        pm10 = pol.get("p1") or pm10_openmeteo() or "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        lvl  = ("—Ö–æ—Ä–æ—à–∏–π" if pol["aqius"]<=50 else
                "—É–º–µ—Ä–µ–Ω–Ω—ã–π" if pol["aqius"]<=100 else "–≤—Ä–µ–¥–Ω—ã–π")
        P += ["",
              "üå¨Ô∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞</b>",
              f"<b>AQI:</b> {pol['aqius']}  |  <b>PM2.5:</b> {pm25} ¬µg/m¬≥  |  "
              f"<b>PM10:</b> {pm10} ¬µg/m¬≥",
              f"–í–æ–∑–¥—É—Ö {lvl}."]
    # 2. Pollen
    if (poll := get_pollen()):
        scale=lambda v: ["–Ω–µ—Ç","–Ω–∏–∑–∫–∏–π","—É–º–µ—Ä–µ–Ω","–≤—ã—Å–æ–∫","—ç–∫—Å—Ç—Ä–∏–º"][int(round(v))]
        P+=["",
            "üåø <b>–ü—ã–ª—å—Ü–∞</b>",
            f"–î–µ—Ä–µ–≤—å—è ‚Äî {scale(poll['treeIndex'])} | "
            f"–¢—Ä–∞–≤—ã ‚Äî {scale(poll['grassIndex'])} | "
            f"–ê–º–±—Ä–æ–∑–∏—è ‚Äî {scale(poll['weedIndex'])}"]
    # 3. KP
    if (kp := get_kp()) is not None:
        state=("–±—É—Ä—è (G1)" if kp>=5 else "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π" if kp>=4 else "—Å–ø–æ–∫–æ–π–Ω—ã–π")
        P+=["",
            "üåå <b>–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>",
            f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {state} (Kp {kp:.1f})"]
    # 4. –®—É–º–∞–Ω
    sch=get_schumann()
    P+=["",
        "üìà <b>–†–µ–∑–æ–Ω–∞–Ω—Å –®—É–º–∞–Ω–∞</b>",
        (f"{sch['freq']:.1f} –ì—Ü, –∞–º–ø–ª–∏—Ç—É–¥–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞"
         if 'freq' in sch else sch['msg'])]
    # 5. SST
    if (sst := get_sst()):
        P+=["",
            "üåä <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã –≤ –º–æ—Ä–µ</b>",
            f"<b>–°–µ–π—á–∞—Å:</b> {sst} ¬∞C"]
    # 6. Astro
    P+=["",
        "üîÆ <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è</b>",
        astro_events()]
    # ==== EXTRA BLOCKS END ====================================================

    P.append("---")

    culprit=("—Ç—É–º–∞–Ω" if fog else
             "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ" if press<1007 else
             "–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏" if (kp:=get_kp()) and kp>=5 else
             "–º–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç")
    summary,tips = gpt_blurb(culprit)

    P += ["<b>üìù –í—ã–≤–æ–¥</b>", summary, "",
          "<b>‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>", tips]
    return "\n".join(P)


async def send(text:str):
    await Bot(os.getenv("TELEGRAM_TOKEN")).send_message(
        chat_id=os.getenv("CHANNEL_ID"), text=text[:4096],
        parse_mode="HTML", disable_web_page_preview=True)


async def main():
    md=build_md(); print("Preview:", md.replace("\n"," | ")[:350])
    await send(md); print("‚úì sent")


if __name__=="__main__":
    asyncio.run(main())
