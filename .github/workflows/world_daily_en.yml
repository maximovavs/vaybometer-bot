name: world-daily-en

on:
  schedule:
    - cron: "15 7 * * *"     # 07:15 UTC
  workflow_dispatch:
    inputs:
      send_to_test:
        type: boolean
        description: "Send to TEST channel instead of MAIN"
        default: false

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          # jinja2 –Ω—É–∂–Ω–æ –¥–ª—è —à–∞–±–ª–æ–Ω–∞; –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–æ—Ç–∞—â–∏–º –∏ –±–∞–∑–æ–≤—ã–µ –ª–∏–±—ã
          pip install -r requirements.txt jinja2 requests pendulum astral pandas

      - name: Show versions
        run: |
          set -euo pipefail
          python -V
          pip list | sort | sed -n '1,120p'
          python - <<'PY'
          import pkgutil
          mods = ('pendulum','jinja2','requests','pandas','astral')
          print("\n".join(f"{m}: "+("OK" if pkgutil.find_loader(m) else "MISSING") for m in mods))
          PY

      - name: Collect daily (capture full log; do not fail step)
        id: collect
        env:
          YT_API_KEY:            ${{ secrets.YT_API_KEY }}
          YT_CHANNEL_ID:         ${{ secrets.YT_CHANNEL_ID }}
          YOUTUBE_PLAYLIST_IDS:  ${{ secrets.YOUTUBE_PLAYLIST_IDS }}
          FALLBACK_NATURE_LIST:  ${{ secrets.FALLBACK_NATURE_LIST }}
          PYTHONUNBUFFERED: "1"
        run: |
          set -euo pipefail
          echo "---- world_en dir before ----"; ls -la world_en || true
          # –ü–∏—à–µ–º –ò –≤ —Ñ–∞–π–ª, –ò –≤ job log; —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
          set +e
          python -u world_en/world_collect.py 2>&1 | tee world_en/collect.log
          EC=${PIPESTATUS[0]}
          set -e
          echo "exit_code=${EC}" >> "$GITHUB_OUTPUT"
          echo "Collector exit code: ${EC}"

      - name: Validate daily.json (MUST exist)
        id: validate
        run: |
          set -euo pipefail
          if [ -s world_en/daily.json ]; then
            echo "ok=true"  >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "ok=false" >> "$GITHUB_OUTPUT"
          echo "Error: world_en/daily.json is missing ‚Äî collector failed."
          echo "---- collector log (head) ----"; head -n 120 world_en/collect.log || true
          echo "---- collector log (tail) ----"; tail -n 120 world_en/collect.log || true
          exit 1

      - name: Decide target channel (MAIN/TEST)
        id: decide
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.send_to_test }}" = "true" ]; then
            echo "to_test=true"  >> "$GITHUB_OUTPUT"
            CHOSEN=true
          else
            echo "to_test=false" >> "$GITHUB_OUTPUT"
            CHOSEN=false
          fi
          echo "Chosen target (to_test): ${CHOSEN}"

      - name: Render from template
        if: steps.validate.outputs.ok == 'true'
        run: |
          set -euo pipefail
          python world_en/render.py world_en/templates/daily_en.j2 world_en/daily.json > world_en/message.txt

      - name: Ensure message exists (only when we plan to send)
        if: steps.validate.outputs.ok == 'true'
        run: |
          set -euo pipefail
          test -s world_en/message.txt

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: world-daily-en-artifacts
          path: |
            world_en/collect.log
            world_en/daily.json
            world_en/message.txt
          if-no-files-found: warn
          retention-days: 7

      # ===== MAIN channel =====
      - name: Send text (MAIN)
        if: steps.validate.outputs.ok == 'true' && steps.decide.outputs.to_test != 'true'
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (MAIN, only if real daily.json)
        if: steps.validate.outputs.ok == 'true' && steps.decide.outputs.to_test != 'true'
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          mapfile -t L < <(python - <<'PY'
          import json
          d=json.load(open("world_en/daily.json",encoding="utf-8"))
          print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL",""));
          title=d.get("NATURE_TITLE","Nature Break"); snip=d.get("NATURE_SNIPPET","60 seconds of calm");
          print(f"üåä <b>{title}</b>\n<i>{snip}</i>")
          PY
          )
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" -F photo="${THUMB}" \
              -F parse_mode="HTML" -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" -d text="$URL" -d disable_web_page_preview=false
          fi

      # ===== TEST channel =====
      - name: Send text (TEST)
        if: steps.validate.outputs.ok == 'true' && steps.decide.outputs.to_test == 'true'
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (TEST, only if real daily.json)
        if: steps.validate.outputs.ok == 'true' && steps.decide.outputs.to_test == 'true'
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          mapfile -t L < <(python - <<'PY'
          import json
          d=json.load(open("world_en/daily.json",encoding="utf-8"))
          print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL",""));
          title=d.get("NATURE_TITLE","Nature Break"); snip=d.get("NATURE_SNIPPET","60 seconds of calm");
          print(f"üåä <b>{title}</b>\n<i>{snip}</i>")
          PY
          )
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" -F photo="${THUMB}" \
              -F parse_mode="HTML" -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" -d text="$URL" -d disable_web_page_preview=false
          fi
