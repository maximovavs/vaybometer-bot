name: world-daily-en

on:
  schedule:
    - cron: "15 7 * * *"    # 07:15 UTC
  workflow_dispatch:
    inputs:
      send_to_test:
        type: boolean
        description: "Send to TEST channel instead of main"
        default: false

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          set -Eeuo pipefail
          python -m pip install --upgrade pip
          pip install pendulum requests jinja2 pytz astral pandas "python-telegram-bot>=20,<21" || true

      - name: Show versions
        run: |
          python - <<'PY'
          import pkgutil, sys
          mods = ("pendulum","requests","jinja2","pytz","astral","pandas","telegram")
          for m in mods:
              print(f"{m}: {'OK' if pkgutil.find_loader(m) else 'MISSING'}")
          print("sys.path[0]:", sys.path[0])
          PY

      - name: Collect daily (make sure daily.json is produced)
        env:
          YT_API_KEY:            ${{ secrets.YT_API_KEY }}
          YT_CHANNEL_ID:         ${{ secrets.YT_CHANNEL_ID }}
          YOUTUBE_PLAYLIST_IDS:  ${{ secrets.YOUTUBE_PLAYLIST_IDS }}
          FALLBACK_NATURE_LIST:  ${{ secrets.FALLBACK_NATURE_LIST }}
          TELEGRAM_BOT_TOKEN_EN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TELEGRAM_CHAT_ID_EN:   ${{ secrets.TELEGRAM_CHAT_ID_EN }}
          PYTHONUNBUFFERED:      "1"
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p world_en
          : > world_en/collect.log || true
          : > world_en/collect.run.log || true
          : > world_en/collect.wrap.log || true

          {
            echo "=== Collect start UTC: $(date -u '+%Y-%m-%d %H:%M:%S') ==="
            echo "PWD: $(pwd)"
            echo "Python: $(python -V)"
            echo "---- world_en dir (before) ----"
            ls -al world_en || true
            echo "-- running collector (introspection mode) --"
          } >> world_en/collect.wrap.log

          # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –∏ –≤—ã–∑–≤–∞—Ç—å –≤—Å–µ —Ä–∞–∑—É–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏,
          # —á—Ç–æ–±—ã –æ–Ω —Å–æ–∑–¥–∞–ª world_en/daily.json (–∫–∞–∫ –±—ã –æ–Ω –Ω–∏ –Ω–∞–∑—ã–≤–∞–ª—Å—è –≤–Ω—É—Ç—Ä–∏).
          set +e
          python -X faulthandler -u - <<'PY' 2>&1 | tee -a world_en/collect.run.log
          import importlib, inspect, json, os, pathlib, sys, traceback
          base = pathlib.Path("world_en")
          out  = base/"daily.json"
          ok   = False
          try:
              m = importlib.import_module("world_en.world_collect")
              print("[introspect] imported world_en.world_collect from", getattr(m, "__file__", "?"), flush=True)
          except Exception:
              print("[introspect] cannot import world_en.world_collect")
              traceback.print_exc()
              sys.exit(1)

          def out_exists():
              return out.exists() and out.stat().st_size > 0

          # –Ø–≤–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º–∏
          candidates = [
              ("collect_daily",   [str(out)]), ("collect_daily",   []),
              ("main",            [str(out)]), ("main",            []),
              ("build_daily",     [str(out)]), ("build_daily",     []),
              ("run",             [str(out)]), ("run",             []),
              ("collect",         [str(out)]), ("collect",         []),
          ]

          for name, args in candidates:
              fn = getattr(m, name, None)
              if not callable(fn):
                  continue
              print(f"[introspect] trying {name}{tuple(args)}", flush=True)
              try:
                  fn(*args)
              except TypeError as e:
                  print(f"[introspect] {name} signature mismatch: {e}")
                  continue
              except SystemExit as e:
                  print(f"[introspect] {name} SystemExit: {e.code}")
              except Exception:
                  traceback.print_exc()
              if out_exists():
                  ok = True
                  print(f"[introspect] {name} produced {out}")
                  break

          # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø—Ä–æ–±—É–µ–º –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
          if not ok:
              for name, fn in inspect.getmembers(m, inspect.isfunction):
                  if any(k in name.lower() for k in ("daily", "collect", "build", "make", "generate")):
                      print(f"[introspect] generic try {name}()", flush=True)
                      try:
                          fn()
                      except Exception:
                          traceback.print_exc()
                      if out_exists():
                          ok = True
                          print(f"[introspect] {name} produced {out}")
                          break

          # –ï—Å–ª–∏ –º–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ–º –µ–≥–æ
          if not ok:
              for key in ("DATA","daily","context","CTX"):
                  d = getattr(m, key, None)
                  if isinstance(d, dict):
                      print(f"[introspect] found dict {key}, writing {out}")
                      json.dump(d, open(out, "w", encoding="utf-8"), ensure_ascii=False, indent=2)
                      ok = out_exists()
                      break

          print("[introspect] result:", "OK" if ok else "FAILED", flush=True)
          sys.exit(0 if ok else 1)
          PY
          ec=${PIPESTATUS[0]}
          set -e

          {
            echo "collector exit code: $ec"
            echo "---- search daily.json ----"
            ls -al world_en || true
            echo "=== Collect end ==="
          } >> world_en/collect.wrap.log

          if [ $ec -ne 0 ]; then
            echo "Collector did not produce daily.json" >&2
            exit 1
          fi

      - name: Validate daily.json (MUST exist)
        shell: bash
        run: |
          set -Eeuo pipefail
          if [ -s world_en/daily.json ]; then
            echo "daily.json found"
          else
            echo "Error: world_en/daily.json is missing ‚Äî collector failed."
            echo "---- collect.log (tail) ----";        tail -n 200 world_en/collect.log         || echo "(no collect.log)"
            echo "---- collect.run.log (tail) ----";   tail -n 200 world_en/collect.run.log     || echo "(no collect.run.log)"
            echo "---- collect.wrap.log (tail) ----";  tail -n 200 world_en/collect.wrap.log    || echo "(no collect.wrap.log)"
            exit 1
          fi

      - name: Render
        run: |
          set -Eeuo pipefail
          python world_en/render.py world_en/templates/daily_en.j2 world_en/daily.json > world_en/message.txt
          test -s world_en/message.txt

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: world-daily-en-artifacts
          path: |
            world_en/collect.log
            world_en/collect.run.log
            world_en/collect.wrap.log
            world_en/daily.json
            world_en/message.txt
          if-no-files-found: ignore
          retention-days: 7

      # ===== MAIN channel =====
      - name: Send text (MAIN)
        if: ${{ inputs.send_to_test != true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -Eeuo pipefail
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (MAIN, only if daily.json has data)
        if: ${{ inputs.send_to_test != true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -Eeuo pipefail
          readarray -t L < <(python - <<'PY'
          import json; d=json.load(open('world_en/daily.json',encoding='utf-8'))
          print(d.get('NATURE_THUMB','')); print(d.get('NATURE_URL',''));
          title=d.get('NATURE_TITLE','Nature Break'); snip=d.get('NATURE_SNIPPET','60 seconds of calm')
          print(f"üåä <b>{title}</b>\n<i>{snip}</i>")
          PY
          )
          THUMB="${L[0]:-}"; URL="${L[1]:-}"; CAPTION="${L[*]:2}"
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" -F photo="${THUMB}" \
              -F parse_mode="HTML" -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" -d text="$URL" -d disable_web_page_preview=false
          fi

      # ===== TEST channel =====
      - name: Send text (TEST)
        if: ${{ inputs.send_to_test == true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -Eeuo pipefail
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (TEST, only if daily.json has data)
        if: ${{ inputs.send_to_test == true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -Eeuo pipefail
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          readarray -t L < <(python - <<'PY'
          import json; d=json.load(open('world_en/daily.json',encoding='utf-8'))
          print(d.get('NATURE_THUMB','')); print(d.get('NATURE_URL',''));
          title=d.get('NATURE_TITLE','Nature Break'); snip=d.get('NATURE_SNIPPET','60 seconds of calm')
          print(f"üåä <b>{title}</b>\n<i>{snip}</i>")
          PY
          )
          THUMB="${L[0]:-}"; URL="${L[1]:-}"; CAPTION="${L[*]:2}"
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" -F photo="${THUMB}" \
              -F parse_mode="HTML" -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" -d text="$URL" -d disable_web_page_preview=false
          fi
