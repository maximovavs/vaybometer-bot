name: world-daily-en

on:
  schedule:
    - cron: "15 7 * * *"   # 07:15 UTC
  workflow_dispatch:
    inputs:
      send_to_test:
        type: boolean
        description: "Send to TEST channel instead of main"
        default: false

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          # –í requirements –Ω–µ—Ç jinja2 ‚Äî —Å—Ç–∞–≤–∏–º —è–≤–Ω–æ
          pip install -r requirements.txt jinja2

      - name: Show versions
        run: |
          set -euo pipefail
          python - <<'PY'
          import pkgutil
          for m in ("pendulum","jinja2","requests","pandas","astral"):
              print(f"{m:12s}:", "OK" if pkgutil.find_loader(m) else "MISSING")
          PY

      - name: Collect daily (capture log)
        id: collect
        env:
          YT_API_KEY:            ${{ secrets.YT_API_KEY }}
          YT_CHANNEL_ID:         ${{ secrets.YT_CHANNEL_ID }}
          YOUTUBE_PLAYLIST_IDS:  ${{ secrets.YOUTUBE_PLAYLIST_IDS }}
          FALLBACK_NATURE_LIST:  ${{ secrets.FALLBACK_NATURE_LIST }}
          PYTHONUNBUFFERED: "1"
        run: |
          set -euo pipefail
          ( python -u world_en/world_collect.py ) > world_en/collect.log 2>&1 || true
          echo "---- world_en dir ----"; ls -la world_en || true
          echo "---- collector log head ----"; head -n 80 world_en/collect.log || true

      - name: Validate daily.json (existence only)
        id: validate
        run: |
          set -euo pipefail
          if [ -s world_en/daily.json ]; then
            echo "ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "ok=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Render (normal or SMART FALLBACK)
        run: |
          set -euo pipefail
          if [ "${{ steps.validate.outputs.ok }}" = "true" ]; then
            python world_en/render.py world_en/templates/daily_en.j2 world_en/daily.json > world_en/message.txt
          else
            # --------- –£–ú–ù–´–ô –§–û–õ–ë–≠–ö: —Å–æ–±–∏—Ä–∞–µ–º –≤—Å—ë, —á—Ç–æ –º–æ–∂–Ω–æ, –ø—Ä—è–º–æ —Ç—É—Ç ---------
            python - <<'PY' > world_en/message.txt
            import json, math, os, sys
            from pathlib import Path
            from datetime import datetime, timezone
            import requests
            import pendulum

            def kp_world_like():
                # NOAA closed 3-hour slot; fallback to air.get_kp()
                try:
                    url = "https://services.swpc.noaa.gov/products/noaa-planetary-k-index.json"
                    data = requests.get(url, timeout=20).json()
                    rows=[]
                    for r in data[1:]:
                        try:
                            ts = pendulum.parse(r[0]).in_tz("UTC")
                            val = float(r[1])
                            rows.append((ts,val))
                        except Exception:
                            pass
                    if not rows: raise RuntimeError("empty NOAA rows")
                    now = pendulum.now("UTC")
                    end = now.replace(minute=0, second=0, microsecond=0)
                    end = end.subtract(hours=end.hour % 3)
                    start = end.subtract(hours=3)
                    last=None
                    for ts,val in reversed(rows):
                        if start <= ts < end:
                            last=(ts,val); break
                    if not last: last = rows[-1]
                    v = round(float(last[1]),1)
                    age = max(0, int((now-end).total_seconds()//60))
                    def note(x):
                        if x < 3:  return "quiet"
                        if x < 5:  return "active"
                        return "storm"
                    return {"kp": v, "note": note(v), "age_min": age}
                except Exception:
                    try:
                        from air import get_kp
                        tup = get_kp() or ()
                        kp = float(tup[0]) if tup and isinstance(tup[0],(int,float)) else None
                        note = tup[1] if len(tup)>1 else None
                        return {"kp": kp, "note": note}
                    except Exception:
                        return {}

            def solar_wind():
                try:
                    from air import get_solar_wind
                    d = get_solar_wind() or {}
                    v = d.get("speed_kms"); n = d.get("density"); st = d.get("status")
                    out=[]
                    if isinstance(v,(int,float)): out.append(f"{v:.0f} km/s")
                    if isinstance(n,(int,float)): out.append(f"{n:.1f} cm‚Åª¬≥")
                    return {"text": (", ".join(out) + (f" ‚Äî {st}" if out and st else "")) or None}
                except Exception:
                    return {}

            def schumann_live():
                # try module ‚Üí fall back to local json (last record)
                try:
                    import schumann
                    if hasattr(schumann, "get_schumann"):
                        p = schumann.get_schumann() or {}
                        f = p.get("freq"); a = p.get("amp")
                        st = p.get("status") or ""
                        if isinstance(f,(int,float)) or isinstance(a,(int,float)) or st:
                            bits=[]
                            if isinstance(f,(int,float)): bits.append(f"{f:.2f} Hz")
                            if isinstance(a,(int,float)): bits.append(f"{a:.2f} pT")
                            if st: bits.append(st)
                            return {"text": " / ".join(bits)}
                except Exception:
                    pass
                for path in ("schumann_hourly.json","world_en/schumann_hourly.json","data/schumann_hourly.json"):
                    try:
                        p = Path(path)
                        if p.exists():
                            arr = json.loads(p.read_text("utf-8"))
                            if isinstance(arr,list) and arr:
                                last = arr[-1]
                                f = last.get("freq"); a = last.get("amp")
                                bits=[]
                                if isinstance(f,(int,float)): bits.append(f"{f:.2f} Hz")
                                if isinstance(a,(int,float)): bits.append(f"{a:.2f} pT")
                                return {"text": " / ".join(bits) if bits else None}
                    except Exception:
                        pass
                return {}

            def quake_max_24h():
                try:
                    u = "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson"
                    j = requests.get(u, timeout=20).json()
                    feats = j.get("features", [])
                    if not feats: return {}
                    best = max(feats, key=lambda f: (f.get("properties",{}).get("mag") or 0))
                    prop = best.get("properties",{})
                    mag = prop.get("mag")
                    place = (prop.get("place") or "").replace(" of", " of")
                    tms = prop.get("time")
                    when = pendulum.from_timestamp(tms/1000, tz="UTC").format("HH:mm") if isinstance(tms,(int,float)) else ""
                    depth = best.get("geometry",{}).get("coordinates",[None,None,None])[2]
                    parts=[]
                    if isinstance(mag,(int,float)): parts.append(f"M{mag:.1f}")
                    if isinstance(depth,(int,float)): parts.append(f"depth {depth:.0f} km")
                    if when: parts.append(when + " UTC")
                    if place: parts.append(place)
                    return {"text": ", ".join(parts)}
                except Exception:
                    return {}

            def sunrise_tidbit():
                try:
                    from astral.sun import sun
                    from astral import LocationInfo
                    loc = LocationInfo("Reykjavik","IS","Atlantic/Reykjavik",64.1466,-21.9426)
                    s = sun(loc.observer, date=datetime.now(timezone.utc).date(), tzinfo="UTC")
                    t = s["sunrise"].strftime("%H:%M")
                    return {"text": f"Sunrise ‚Äî Reykjavik, IS, {t} UTC"}
                except Exception:
                    return {}

            # --- assemble
            now = datetime.now(timezone.utc).strftime("%a, %Y-%m-%d (%H:%M UTC)")
            lines=[]
            lines.append(f"üåç World Vibe Snapshot ‚Ä¢ {now}\n")
            lines.append("Cosmic Weather")

            kp = kp_world_like()
            if kp.get("kp") is not None:
                age = kp.get("age_min")
                age_txt = (f", {age//60}h ago" if isinstance(age,int) and age>=180 else (f", {age} min ago" if isinstance(age,int) else ""))
                lines.append(f"- Geomagnetic (Kp):  {kp['kp']:.1f} ‚Äî {kp.get('note') or 'status'}{age_txt}")
            else:
                lines.append("- Geomagnetic (Kp):  ‚Äî")

            sch = schumann_live().get("text")
            lines.append(f"- Schumann: {sch}" if sch else "- Schumann: baseline (7.83 Hz)")

            sw = solar_wind().get("text")
            lines.append(f"- Solar wind: {sw}" if sw else "- Solar wind: ‚Äî")

            lines.append("Earth Live")
            lines.append("‚Ä¢ üî• Hottest: ‚Äî   üßä Coldest: ‚Äî")

            q = quake_max_24h().get("text")
            lines.append(f"‚Ä¢ üåé Strongest quake 24h: {q}" if q else "‚Ä¢ üåé Strongest quake 24h: ‚Äî")

            sun = sunrise_tidbit().get("text")
            lines.append(f"‚Ä¢ üüß Sunlight tidbit: {sun}" if sun else "‚Ä¢ üüß Sunlight tidbit: ‚Äî")

            lines.append("")
            lines.append("Vibe Tip  üîÜ  (Kp ‚Ä¢ sec)")
            lines.append("")
            lines.append("PS: Weather-sensitive? Save & share üåø")
            lines.append("#DailyCalm #CosmicWeather")
            print("\n".join(lines))
            PY
          fi
          test -s world_en/message.txt

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: world-daily-en-artifacts
          path: |
            world_en/collect.log
            world_en/daily.json
            world_en/message.txt
          if-no-files-found: ignore
          retention-days: 7

      # ========== MAIN ==========
      - name: Send text (MAIN)
        if: ${{ inputs.send_to_test != true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (MAIN, only if real daily)
        if: steps.validate.outputs.ok == 'true' && inputs.send_to_test != true
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          mapfile -t L < <(python -c 'import json; d=json.load(open("world_en/daily.json",encoding="utf-8")); print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL","")); title=d.get("NATURE_TITLE","Nature Break"); snip=d.get("NATURE_SNIPPET","60 seconds of calm"); print(f"üåä <b>{title}</b>\n<i>{snip}</i>")')
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" -F photo="${THUMB}" \
              -F parse_mode="HTML" -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" -d text="$URL" -d disable_web_page_preview=false
          else
            echo "No nature URL ‚Äî skipping card."
          fi

      # ========== TEST ==========
      - name: Send text (TEST)
        if: ${{ inputs.send_to_test == true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (TEST, only if real daily)
        if: steps.validate.outputs.ok == 'true' && inputs.send_to_test == true
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          mapfile -t L < <(python -c 'import json; d=json.load(open("world_en/daily.json",encoding="utf-8")); print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL","")); title=d.get("NATURE_TITLE","Nature Break"); snip=d.get("NATURE_SNIPPET","60 seconds of calm"); print(f"üåä <b>{title}</b>\n<i>{snip}</i>")')
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" -F photo="${THUMB}" \
              -F parse_mode="HTML" -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" -d text="$URL" -d disable_web_page_preview=false
          else
            echo "No nature URL ‚Äî skipping card."
          fi
