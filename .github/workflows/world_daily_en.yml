name: world-daily-en

on:
  schedule:
    - cron: "15 7 * * *"   # 07:15 UTC
  workflow_dispatch:
    inputs:
      send_to_test:
        type: boolean
        description: "Send to TEST channel instead of main"
        default: false

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          # jinja2 –¥–ª—è —à–∞–±–ª–æ–Ω–∞ (–≤ requirements –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å)
          pip install -r requirements.txt jinja2

      - name: Show versions
        run: |
          set -euo pipefail
          python - <<'PY'
          import pkgutil, sys
          mods=('pendulum','jinja2','requests','pandas','astral')
          for m in mods:
              print(f"{m}: {'OK' if pkgutil.find_loader(m) else 'MISSING'}")
          PY

      - name: Collect daily (capture full log, do not fail pipeline)
        run: |
          set -euo pipefail
          python -u world_en/world_collect.py > world_en/collect.log 2>&1 || true
          echo "---- world_en dir ----"; ls -la world_en || true

      - name: Validate daily.json (MUST exist)
        id: validate
        run: |
          set -euo pipefail
          if [ ! -s world_en/daily.json ]; then
            echo "::error::world_en/daily.json is missing ‚Äî collector failed."
            echo "---- collector log (head) ----"
            sed -n '1,200p' world_en/collect.log || true
            exit 1
          fi
          echo "ok=true" >> "$GITHUB_OUTPUT"

      - name: Render from template
        run: |
          set -euo pipefail
          python world_en/render.py world_en/templates/daily_en.j2 world_en/daily.json > world_en/message.txt
          test -s world_en/message.txt

      - name: Decide target channel (MAIN/TEST)
        id: decide
        run: |
          set -euo pipefail
          val="false"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.send_to_test }}" = "true" ]; then
            val="true"
          fi
          echo "to_test=$val" >> "$GITHUB_OUTPUT"
          echo "Chosen target (to_test): $val"

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: world-daily-en-artifacts
          path: |
            world_en/collect.log
            world_en/daily.json
            world_en/message.txt
          if-no-files-found: ignore
          retention-days: 7

      # ===== MAIN channel =====
      - name: Send text (MAIN)
        if: steps.decide.outputs.to_test != 'true'
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          RESP=$(curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
                   -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
                   --data-urlencode text@"world_en/message.txt")
          echo "$RESP"
          echo "$RESP" | python - <<'PY'
          import sys,json
          try:
              j=json.loads(sys.stdin.read())
              print("Telegram ok:", j.get("ok"))
              if j.get("ok"):
                  res=j["result"]; mid=res.get("message_id")
                  chat=res.get("chat",{}); uname=chat.get("username"); cid=str(chat.get("id",""))
                  url=None
                  if uname:
                      url=f"https://t.me/{uname}/{mid}"
                  elif cid.startswith("-100"):
                      url=f"https://t.me/c/{cid[4:]}/{mid}"
                  if url: print("Message URL:", url)
          except Exception as e:
              print("Parse error:", e)
          PY

      - name: Send Nature card (MAIN, only if real daily.json)
        if: steps.decide.outputs.to_test != 'true' && steps.validate.outputs.ok == 'true'
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          mapfile -t L < <(python - <<'PY'
          import json
          d=json.load(open("world_en/daily.json",encoding="utf-8"))
          print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL",""))
          title=d.get("NATURE_TITLE","Nature Break"); snip=d.get("NATURE_SNIPPET","60 seconds of calm")
          print(f"üåä <b>{title}</b>\n<i>{snip}</i>")
          PY
          )
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" -F photo="${THUMB}" \
              -F parse_mode="HTML" -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" -d text="$URL" -d disable_web_page_preview=false
          else
            echo "No nature URL ‚Äî skipping card."
          fi

      # ===== TEST channel =====
      - name: Send text (TEST)
        if: steps.decide.outputs.to_test == 'true'
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          RESP=$(curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
                   -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
                   --data-urlencode text@"world_en/message.txt")
          echo "$RESP"
          echo "$RESP" | python - <<'PY'
          import sys,json
          try:
              j=json.loads(sys.stdin.read())
              print("Telegram ok:", j.get("ok"))
              if j.get("ok"):
                  res=j["result"]; mid=res.get("message_id")
                  chat=res.get("chat",{}); cid=str(chat.get("id",""))
                  url=f"https://t.me/c/{cid[4:]}/{mid}" if cid.startswith("-100") else None
                  if url: print("Message URL:", url)
          except Exception as e:
              print("Parse error:", e)
          PY

      - name: Send Nature card (TEST, only if real daily.json)
        if: steps.decide.outputs.to_test == 'true' && steps.validate.outputs.ok == 'true'
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          mapfile -t L < <(python - <<'PY'
          import json
          d=json.load(open("world_en/daily.json",encoding="utf-8"))
          print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL",""))
          title=d.get("NATURE_TITLE","Nature Break"); snip=d.get("NATURE_SNIPPET","60 seconds of calm")
          print(f"üåä <b>{title}</b>\n<i>{snip}</i>")
          PY
          )
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" -F photo="${THUMB}" \
              -F parse_mode="HTML" -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" -d text="$URL" -d disable_web_page_preview=false
          else
            echo "No nature URL ‚Äî skipping card."
          fi
