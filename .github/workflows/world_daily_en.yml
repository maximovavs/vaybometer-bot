name: world-daily-en

on:
  schedule:
    - cron: "15 7 * * *" # 07:15 UTC
  workflow_dispatch:
    inputs:
      send_to_test:
        type: boolean
        description: "Send to TEST channel instead of main"
        default: false
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/world_daily_en.yml"
      - "world_en/**"
      - "requirements.txt"

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          set -Eeuo pipefail
          python -V
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install jinja2

      - name: Show versions
        run: |
          set -Eeuo pipefail
          python - <<'PY'
          import pkgutil
          mods = ('pendulum','jinja2','requests','pandas','astral')
          for m in mods:
              print(f"{m}: {'OK' if pkgutil.find_loader(m) else 'MISSING'}")
          PY

      - name: Collect daily (capture full log; do not fail step)
        id: collect
        env:
          YT_API_KEY:            ${{ secrets.YT_API_KEY }}
          YT_CHANNEL_ID:         ${{ secrets.YT_CHANNEL_ID }}
          YOUTUBE_PLAYLIST_IDS:  ${{ secrets.YOUTUBE_PLAYLIST_IDS }}
          FALLBACK_NATURE_LIST:  ${{ secrets.FALLBACK_NATURE_LIST }}
          PYTHONUNBUFFERED: "1"
        run: |
          set -Eeuo pipefail
          mkdir -p world_en
          # –≤–µ–¥—ë–º –ø–æ–ª–Ω—ã–π –ª–æ–≥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ python
          ( python -u world_en/world_collect.py |& tee world_en/collect.log ); code=$?
          echo "=== world_en dir ==="; ls -la world_en || true
          echo "=== collector log (head) ==="; head -n 120 world_en/collect.log || true
          exit $code

      - name: Validate daily.json (MUST exist)
        id: validate
        run: |
          set -Eeuo pipefail
          if [ -s world_en/daily.json ]; then
            echo "ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "ok=false" >> "$GITHUB_OUTPUT"
            echo "Error: world_en/daily.json is missing ‚Äî collector failed."
            echo "---- collector log (head) ----"; head -n 200 world_en/collect.log || true
            echo "---- collector log (tail) ----"; tail -n 200 world_en/collect.log || true
            exit 1
          fi

      - name: Render from template
        run: |
          set -Eeuo pipefail
          python world_en/render.py world_en/templates/daily_en.j2 world_en/daily.json > world_en/message.txt
          test -s world_en/message.txt

      - name: Decide target channel (MAIN/TEST)
        id: target
        run: |
          set -Eeuo pipefail
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.send_to_test }}" = "true" ]; then
            echo "to_test=true"  >> "$GITHUB_OUTPUT"
          else
            echo "to_test=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: world-daily-en-artifacts
          path: |
            world_en/collect.log
            world_en/daily.json
            world_en/message.txt
          if-no-files-found: warn
          retention-days: 7

      # ===== MAIN channel =====
      - name: Send text (MAIN)
        if: steps.target.outputs.to_test == 'false'
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -Eeuo pipefail
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (MAIN, only if real daily.json)
        if: steps.target.outputs.to_test == 'false' && steps.validate.outputs.ok == 'true'
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -Eeuo pipefail
          mapfile -t L < <(python -c 'import json,sys; d=json.load(open("world_en/daily.json",encoding="utf-8")); \
          print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL","")); \
          title=d.get("NATURE_TITLE","Nature Break"); snip=d.get("NATURE_SNIPPET","60 seconds of calm"); \
          print(f"üåä <b>{title}</b>\n<i>{snip}</i>")')
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" -F photo="${THUMB}" \
              -F parse_mode="HTML" -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" -d text="$URL" -d disable_web_page_preview=false
          else
            echo "No nature URL ‚Äî skipping card."
          fi

      # ===== TEST channel =====
      - name: Send text (TEST)
        if: steps.target.outputs.to_test == 'true'
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -Eeuo pipefail
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (TEST, only if real daily.json)
        if: steps.target.outputs.to_test == 'true' && steps.validate.outputs.ok == 'true'
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -Eeuo pipefail
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          mapfile -t L < <(python -c 'import json,sys; d=json.load(open("world_en/daily.json",encoding="utf-8")); \
          print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL","")); \
          title=d.get("NATURE_TITLE","Nature Break"); snip=d.get("NATURE_SNIPPET","60 seconds of calm"); \
          print(f"üåä <b>{title}</b>\n<i>{snip}</i>")')
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" -F photo="${THUMB}" \
              -F parse_mode="HTML" -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" -d text="$URL" -d disable_web_page_preview=false
          else
            echo "No nature URL ‚Äî skipping card."
          fi