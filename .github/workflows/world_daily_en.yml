name: world-daily-en

on:
  schedule:
    - cron: "15 7 * * *" # 07:15 UTC daily
  workflow_dispatch:
    inputs:
      send_to_test:
        type: boolean
        description: "Send to TEST channel instead of main"
        default: false

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          set -Eeuo pipefail
          python -m pip install --upgrade pip
          pip install pendulum requests jinja2 pytz astral pandas "python-telegram-bot>=20,<21" || true

      - name: Show versions
        run: |
          python - <<'PY'
          import pkgutil, sys
          mods = ("pendulum","requests","jinja2","pytz","astral","pandas","telegram")
          for m in mods:
              print(f"{m}: {'OK' if pkgutil.find_loader(m) else 'MISSING'}")
          print("sys.path[0]:", sys.path[0])
          PY

      - name: Collect daily (import/runpy with logs)
        env:
          YT_API_KEY:            ${{ secrets.YT_API_KEY }}
          YT_CHANNEL_ID:         ${{ secrets.YT_CHANNEL_ID }}
          YOUTUBE_PLAYLIST_IDS:  ${{ secrets.YOUTUBE_PLAYLIST_IDS }}
          FALLBACK_NATURE_LIST:  ${{ secrets.FALLBACK_NATURE_LIST }}
          TELEGRAM_BOT_TOKEN_EN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TELEGRAM_CHAT_ID_EN:   ${{ secrets.TELEGRAM_CHAT_ID_EN }}
          PYTHONUNBUFFERED:      "1"
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p world_en
          : > world_en/collect.log || true
          : > world_en/collect.run.log || true
          : > world_en/collect.wrap.log || true

          {
            echo "=== Collect start UTC: $(date -u '+%Y-%m-%d %H:%M:%S') ==="
            echo "PWD: $(pwd)"
            echo "Python: $(python -V)"
            echo "---- world_en dir (before) ----"
            ls -al world_en || true
            echo "-- running collector (import + runpy) --"
          } >> world_en/collect.wrap.log

          set +e
          python -X faulthandler -u - <<'PY' 2>&1 | tee -a world_en/collect.run.log
          import runpy, importlib, sys, traceback, pathlib, json, inspect
          out = pathlib.Path('world_en/daily.json')
          def out_ok(): return out.exists() and out.stat().st_size > 0

          # try as script
          try:
              print("Wrapper: run world_en/world_collect.py via runpy", flush=True)
              runpy.run_path('world_en/world_collect.py', run_name='__main__')
              print("Wrapper: runpy finished", flush=True)
          except SystemExit as e:
              print("Wrapper: SystemExit", e.code, flush=True)
          except Exception:
              traceback.print_exc()

          # import & probe functions
          if not out_ok():
              try:
                  m = importlib.import_module('world_en.world_collect')
                  print("Wrapper: imported", getattr(m,'__file__','?'), flush=True)
              except Exception:
                  traceback.print_exc()
                  sys.exit(1)

              def try_call(name, *args):
                  f = getattr(m, name, None)
                  if callable(f):
                      try:
                          f(*args)
                      except TypeError as e:
                          print(f"[introspect] {name} signature mismatch: {e}")
                      except SystemExit as e:
                          print(f"[introspect] {name} SystemExit {e.code}")
                      except Exception:
                          traceback.print_exc()

              for nm in ("collect_daily","main","build_daily","run","collect"):
                  for args in (("world_en/daily.json",), tuple()):
                      try_call(nm, *args)
                      if out_ok(): break
                  if out_ok(): break

              if not out_ok():
                  for nm, fn in inspect.getmembers(m, inspect.isfunction):
                      if any(k in nm.lower() for k in ("daily","collect","build","make","generate")):
                          try_call(nm)
                          if out_ok(): break

              if not out_ok():
                  for key in ("DATA","daily","context","CTX"):
                      d = getattr(m, key, None)
                      if isinstance(d, dict):
                          json.dump(d, open(out,"w",encoding="utf-8"), ensure_ascii=False, indent=2)
                          break

          print("Wrapper: daily.json exists?", "YES" if out_ok() else "NO")
          sys.exit(0)
          PY
          ec=$?
          set -e

          {
            echo "collector exit code: $ec"
            echo "---- search daily.json ----"
            ls -al world_en || true
            echo "=== Collect end ==="
          } >> world_en/collect.wrap.log

      - name: "Fallback: create minimal daily.json if missing"
        shell: bash
        run: |
          set -Eeuo pipefail
          if [ ! -s world_en/daily.json ]; then
            echo "Fallback: creating minimal world_en/daily.json"
            WEEKDAY=$(date -u +%A)
            DATESTR=$(date -u +%Y-%m-%d)
            cat > world_en/daily.json <<JSON
{
  "WEEKDAY": "${WEEKDAY}",
  "DATE": "${DATESTR}",
  "KP_SHORT": "-",
  "KP_TREND_EMOJI": "·",
  "KP_NOTE": "-",
  "SCHUMANN_STATUS": "-",
  "SCHUMANN_AMP": "-",
  "SOLAR_WIND_SPEED": "-",
  "SOLAR_WIND_DENSITY": "-",
  "SOLAR_NOTE": "-",
  "HOTTEST_PLACE": "-",
  "HOTTEST_TEMP": "-",
  "COLDEST_PLACE": "-",
  "COLDEST_TEMP": "-",
  "QUAKE_MAG": "-",
  "QUAKE_REGION": "-",
  "QUAKE_DEPTH": "-",
  "QUAKE_TIME": "-",
  "SUN_TIDBIT_LABEL": "-",
  "SUN_TIDBIT_PLACE": "-",
  "SUN_TIDBIT_TIME": "-",
  "fx_line": "",
  "VIBE_EMOJI": "🌍",
  "TIP_TEXT": "—",
  "TIP_SECS": "",
  "TIP_SEC": "",
  "AURORA_HINT": "",
  "NATURE_THUMB": "",
  "NATURE_URL": "",
  "NATURE_TITLE": "Nature Break",
  "NATURE_SNIPPET": "60 seconds of calm"
}
JSON
          fi

      - name: Validate daily.json (MUST exist)
        run: |
          set -Eeuo pipefail
          if [ -s world_en/daily.json ]; then
            echo "daily.json found"
          else
            echo "Error: world_en/daily.json is missing"
            echo "---- collect.log (tail) ----";        tail -n 200 world_en/collect.log         || echo "(no collect.log)"
            echo "---- collect.run.log (tail) ----";   tail -n 200 world_en/collect.run.log     || echo "(no collect.run.log)"
            echo "---- collect.wrap.log (tail) ----";  tail -n 200 world_en/collect.wrap.log    || echo "(no collect.wrap.log)"
            exit 1
          fi

      - name: Normalize daily.json keys
        run: |
          python - <<'PY'
          import json
          p="world_en/daily.json"
          d=json.load(open(p,encoding="utf-8"))
          if "TIP_SECS" not in d and "TIP_SEC" in d:
              d["TIP_SECS"]=d["TIP_SEC"]
          for k in ["WEEKDAY","DATE","KP_SHORT","KP_TREND_EMOJI","KP_NOTE","SCHUMANN_STATUS",
                    "SCHUMANN_AMP","SOLAR_WIND_SPEED","SOLAR_WIND_DENSITY","SOLAR_NOTE",
                    "HOTTEST_PLACE","HOTTEST_TEMP","COLDEST_PLACE","COLDEST_TEMP",
                    "QUAKE_MAG","QUAKE_REGION","QUAKE_DEPTH","QUAKE_TIME",
                    "SUN_TIDBIT_LABEL","SUN_TIDBIT_PLACE","SUN_TIDBIT_TIME",
                    "fx_line","VIBE_EMOJI","TIP_SECS","AURORA_HINT"]:
              d.setdefault(k, "—" if k!="fx_line" else "")
          json.dump(d, open(p,"w",encoding="utf-8"), ensure_ascii=False, indent=2)
          PY

      - name: Render
        run: |
          set -Eeuo pipefail
          python world_en/render.py world_en/templates/daily_en.j2 world_en/daily.json > world_en/message.txt
          test -s world_en/message.txt

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: world-daily-en-artifacts
          path: |
            world_en/collect.log
            world_en/collect.run.log
            world_en/collect.wrap.log
            world_en/daily.json
            world_en/message.txt
          if-no-files-found: ignore
          retention-days: 7

      - name: Send text (MAIN)
        if: ${{ github.event_name != 'workflow_dispatch' || (github.event_name == 'workflow_dispatch' && inputs.send_to_test != true) }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -Eeuo pipefail
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send text (TEST)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.send_to_test == true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -Eeuo pipefail
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"
