name: world-daily-en

on:
  schedule:
    - cron: "15 7 * * *"   # 07:15 UTC
  workflow_dispatch:
    inputs:
      send_to_test:
        type: boolean
        description: "Send to TEST channel instead of main"
        default: false

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt

      - name: Install deps (from requirements.txt)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî jinja2 (–µ—Å–ª–∏ –≤—ã—Ä–µ–∂–µ—à—å –∏–∑ requirements.txt)
          python - <<'PY'
          import importlib, sys
          need = ["pendulum","jinja2","requests","pandas","astral"]
          print("Python:", sys.version.split()[0])
          for m in need:
              try:
                  importlib.import_module(m)
                  print(f"{m}: OK")
              except Exception as e:
                  print(f"{m}: MISSING -> installing‚Ä¶ ({e})")
                  import subprocess, sys
                  subprocess.check_call([sys.executable, "-m", "pip", "install", m])
          PY

      - name: Collect daily (with fallbacks)
        env:
          YT_API_KEY:            ${{ secrets.YT_API_KEY }}
          YT_CHANNEL_ID:         ${{ secrets.YT_CHANNEL_ID }}
          YOUTUBE_PLAYLIST_IDS:  ${{ secrets.YOUTUBE_PLAYLIST_IDS }}
          FALLBACK_NATURE_LIST:  ${{ secrets.FALLBACK_NATURE_LIST }}
        run: |
          set -euo pipefail
          echo "== Try collector with explicit --out (if supported) =="
          python world_en/world_collect.py --out world_en/daily.json || true

          echo "== Fallback: run as-is =="
          if [ ! -f world_en/daily.json ]; then
            python world_en/world_collect.py || true
          fi

          echo "---- ls repo root ----"; ls -la || true
          echo "---- ls world_en ----"; ls -la world_en || true

          echo "== Probe any daily*.json =="
          python - <<'PY'
          import json, glob, shutil, os
          # 1) –µ—Å–ª–∏ –µ—Å—Ç—å –ª—é–±–æ–π daily*.json ‚Äî –∫–æ–ø–∏—Ä—É–µ–º –≤ —Ü–µ–ª–µ–≤–æ–µ –∏–º—è
          candidates = ["world_en/daily.json"] + sorted(glob.glob("world_en/daily*.json"))
          picked = None
          for p in candidates:
              if os.path.exists(p) and os.path.getsize(p) > 0:
                  picked = p
                  break
          if picked and picked != "world_en/daily.json":
              shutil.copy(picked, "world_en/daily.json")
              print("Copied", picked, "-> world_en/daily.json")

          # 2) –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ–ª–±—ç–∫
          if not os.path.exists("world_en/daily.json"):
              stub = {
                  "NATURE_THUMB": "",
                  "NATURE_URL": "",
                  "NATURE_TITLE": "Nature Break",
                  "NATURE_SNIPPET": "60 seconds of calm"
              }
              with open("world_en/daily.json", "w", encoding="utf-8") as f:
                  json.dump(stub, f, ensure_ascii=False)
              print("Wrote fallback stub world_en/daily.json")
          print("Final daily exists:", os.path.exists("world_en/daily.json"))
          PY

          # 3) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–∏–Ω–∞—á–µ —Å—Ç–æ–ø–∏–º job)
          test -f world_en/daily.json

      - name: Render
        run: |
          set -euo pipefail
          python world_en/render.py world_en/templates/daily_en.j2 world_en/daily.json > world_en/message.txt
          echo "---- message preview ----"
          head -n 40 world_en/message.txt || true

      - name: Ensure daily.json exists
        run: test -f world_en/daily.json

      # ========== MAIN channel ==========
      - name: Send text (MAIN)
        if: ${{ inputs.send_to_test != true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (MAIN)
        if: ${{ inputs.send_to_test != true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          readarray -t L < <(python - <<'PY'
          import json
          d=json.load(open('world_en/daily.json',encoding='utf-8'))
          print(d.get('NATURE_THUMB',''))
          print(d.get('NATURE_URL',''))
          title=d.get('NATURE_TITLE','Nature Break')
          snip =d.get('NATURE_SNIPPET','60 seconds of calm')
          print(f"üåä <b>{title}</b>\n<i>{snip}</i>")
          PY
          )
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"

          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" \
              -F photo="${THUMB}" \
              -F parse_mode="HTML" \
              -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" \
              -d text="$URL" \
              -d disable_web_page_preview=false
          else
            echo "No nature URL in daily.json ‚Äî skipping card."
          fi

      # ========== TEST channel ==========
      - name: Send text (TEST)
        if: ${{ inputs.send_to_test == true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (TEST)
        if: ${{ inputs.send_to_test == true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          readarray -t L < <(python - <<'PY'
          import json
          d=json.load(open('world_en/daily.json',encoding='utf-8'))
          print(d.get('NATURE_THUMB',''))
          print(d.get('NATURE_URL',''))
          title=d.get('NATURE_TITLE','Nature Break')
          snip =d.get('NATURE_SNIPPET','60 seconds of calm')
          print(f"üåä <b>{title}</b>\n<i>{snip}</i>")
          PY
          )
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"

          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" \
              -F photo="${THUMB}" \
              -F parse_mode="HTML" \
              -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" \
              -d text="$URL" \
              -d disable_web_page_preview=false
          else
            echo "No nature URL in daily.json ‚Äî skipping card."
          fi
