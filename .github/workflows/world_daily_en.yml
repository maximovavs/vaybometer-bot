name: world-daily-en

on:
  workflow_dispatch:
    inputs:
      send_to:
        description: "Куда отправлять сообщение"
        type: choice
        options: [MAIN, TEST, NONE]
        default: MAIN

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - name: Set up job
        run: echo "Start $GITHUB_WORKFLOW on $GITHUB_REF"

      - name: Run actions/checkout@v4
        uses: actions/checkout@v4

      - name: Run actions/setup-python@v5
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -V
          python -m pip install -U pip wheel
          python -m pip install -U requests pandas jinja2 astral pendulum

      - name: Show versions
        run: |
          set -Eeuo pipefail
          python - <<'PY'
          import pkgutil
          mods = ('pendulum','jinja2','requests','pandas','astral')
          for m in mods:
              print(f"{m}: {'OK' if pkgutil.find_loader(m) else 'MISSING'}")
          PY

      # Показываем, какие секреты заданы (значения не печатаем).
      - name: Preflight (secrets)
        env:
          YT_API_KEY:            ${{ secrets.YT_API_KEY }}
          YT_CHANNEL_ID:         ${{ secrets.YT_CHANNEL_ID }}
          YOUTUBE_PLAYLIST_IDS:  ${{ secrets.YOUTUBE_PLAYLIST_IDS }}
          FALLBACK_NATURE_LIST:  ${{ secrets.FALLBACK_NATURE_LIST }}
          TG_TOKEN:              ${{ secrets.TG_TOKEN }}
          TG_CHAT_MAIN:          ${{ secrets.TG_CHAT_MAIN }}
          TG_CHAT_TEST:          ${{ secrets.TG_CHAT_TEST }}
        run: |
          set -Eeuo pipefail
          for v in YT_API_KEY YT_CHANNEL_ID YOUTUBE_PLAYLIST_IDS FALLBACK_NATURE_LIST TG_TOKEN TG_CHAT_MAIN TG_CHAT_TEST; do
            if [ -n "${!v:-}" ]; then echo "$v=SET"; else echo "$v=MISSING"; fi
          done

      # Обёртка вокруг сборщика: всегда пишет подробный лог и НЕ роняет шаг.
      - name: Collect daily (capture full log; do not fail step)
        id: collect
        env:
          YT_API_KEY:            ${{ secrets.YT_API_KEY }}
          YT_CHANNEL_ID:         ${{ secrets.YT_CHANNEL_ID }}
          YOUTUBE_PLAYLIST_IDS:  ${{ secrets.YOUTUBE_PLAYLIST_IDS }}
          FALLBACK_NATURE_LIST:  ${{ secrets.FALLBACK_NATURE_LIST }}
          PYTHONUNBUFFERED: "1"
        run: |
          set -uo pipefail
          mkdir -p world_en
          {
            echo "=== Collect start UTC: $(date -u '+%Y-%m-%d %H:%M:%S') ==="
            echo "PWD: $(pwd)"
            echo "Python: $(python -V)"
            echo "---- world_en dir (before) ----"; ls -la world_en || true
            echo "-- running collector --"
            # Лог самого сборщика:
            python -u world_en/world_collect.py |& tee world_en/collect.log
            code=${PIPESTATUS[0]}
            echo "collector exit code: $code"
            echo "---- world_en dir (after) ----"; ls -la world_en || true
            if [ -s world_en/daily.json ]; then
              echo "daily.json exists and is non-empty."
            else
              echo "NO daily.json produced."
            fi
            echo "=== Collect end ==="
          } |& tee world_en/collect.wrap.log
          # Не роняем шаг: проверка будет отдельным шагом
          true

      # Если daily.json отсутствует — падаем и печатаем оба лога.
      - name: Validate daily.json (MUST exist)
        id: validate
        run: |
          set -Eeuo pipefail
          if [ -s world_en/daily.json ]; then
            echo "ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "ok=false" >> "$GITHUB_OUTPUT"
            echo "Error: world_en/daily.json is missing — collector failed."
            echo "---- collector log (head) ----"; head -n 200 world_en/collect.log || true
            echo "---- collector log (tail) ----"; tail -n 200 world_en/collect.log || true
            echo "---- wrapper log (head) ----";  head -n 200 world_en/collect.wrap.log || true
            echo "---- wrapper log (tail) ----";  tail -n 200 world_en/collect.wrap.log || true
            exit 1
          fi

      # Рендер сообщения из шаблона и daily.json
      - name: Render from template
        run: |
          set -Eeuo pipefail
          python world_en/render.py world_en/templates/daily_en.j2 world_en/daily.json > world_en/message.txt
          test -s world_en/message.txt

      # Решаем, куда отправлять: MAIN / TEST / NONE
      - name: Decide target channel (MAIN/TEST)
        id: decide
        run: |
          case "${{ github.event.inputs.send_to }}" in
            TEST) echo "to=TEST"  >> "$GITHUB_OUTPUT" ;;
            NONE) echo "to=NONE"  >> "$GITHUB_OUTPUT" ;;
            *)    echo "to=MAIN"  >> "$GITHUB_OUTPUT" ;;
          esac
          echo "Chosen: $(cat $GITHUB_OUTPUT)"

      # На всякий — выкладываем артефакты (логи + результат)
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: world-daily-en-artifacts
          path: |
            world_en/collect.wrap.log
            world_en/collect.log
            world_en/daily.json
            world_en/message.txt
          if-no-files-found: warn
          retention-days: 7

      # Отправка в канал MAIN
      - name: Send text (MAIN)
        if: steps.decide.outputs.to == 'MAIN'
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT:  ${{ secrets.TG_CHAT_MAIN }}
        run: |
          set -Eeuo pipefail
          test -n "$TG_TOKEN" && test -n "$TG_CHAT"
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      # Отправка в канал TEST
      - name: Send text (TEST)
        if: steps.decide.outputs.to == 'TEST'
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT:  ${{ secrets.TG_CHAT_TEST }}
        run: |
          set -Eeuo pipefail
          test -n "$TG_TOKEN" && test -n "$TG_CHAT"
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"