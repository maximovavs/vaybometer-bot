name: world-daily-en

on:
  schedule:
    - cron: "15 7 * * *"   # 07:15 UTC
  workflow_dispatch:
    inputs:
      send_to_test:
        type: boolean
        description: "Send to TEST channel instead of main"
        default: false

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Show versions
        run: |
          set -euo pipefail
          python - <<'PY'
          import pkgutil, sys
          mods = ("pendulum","jinja2","requests","pandas","astral")
          for m in mods:
              print(f"{m:12s}:", "OK" if pkgutil.find_loader(m) else "MISSING")
          PY

      - name: Collect daily (with log)
        id: collect
        env:
          YT_API_KEY:            ${{ secrets.YT_API_KEY }}
          YT_CHANNEL_ID:         ${{ secrets.YT_CHANNEL_ID }}
          YOUTUBE_PLAYLIST_IDS:  ${{ secrets.YOUTUBE_PLAYLIST_IDS }}
          FALLBACK_NATURE_LIST:  ${{ secrets.FALLBACK_NATURE_LIST }}
          PYTHONUNBUFFERED: "1"
        run: |
          set -euo pipefail
          # –ü–∏—à–µ–º stdout/stderr –≤ –ª–æ–≥, –Ω–æ –Ω–µ —Ä–æ–Ω—è–µ–º —à–∞–≥ ‚Äî –¥–∞–ª—å—à–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–µ—à–∏—Ç, —Å–ª–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç.
          ( python -u world_en/world_collect.py ) > world_en/collect.log 2>&1 || true
          echo "---- collector log head ----"
          head -n 80 world_en/collect.log || true
          echo "---- world_en dir ----"
          ls -la world_en || true

      - name: Validate daily.json
        id: validate
        run: |
          set -euo pipefail
          if [ ! -f world_en/daily.json ]; then
            echo "ok=false" >> "$GITHUB_OUTPUT"
            echo "reason=no_file" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          python - <<'PY'
          import json, os, sys
          d=json.load(open('world_en/daily.json',encoding='utf-8'))
          # –ú–∏–Ω–∏-–Ω–∞–±–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π, —á—Ç–æ–±—ã –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–µ–ª ¬´–∂–∏–≤—ã–º¬ª
          req = {
            "KP": (int,float),
            "EARTH_HOTTEST_CITY": str,
            "EARTH_HOTTEST_TEMP_C": (int,float),
            "EARTH_COLDEST_CITY": str,
            "EARTH_COLDEST_TEMP_C": (int,float),
          }
          def filled(v): return not (v is None or v=="" or v==[] or v=={})
          ok = all( (k in d) and filled(d[k]) for k in req.keys() )
          with open(os.environ["GITHUB_OUTPUT"],"a") as f:
              f.write(f"ok={'true' if ok else 'false'}\n")
          if not ok:
              print("Validation failed. Keys present:", [k for k in d.keys()])
          PY

      - name: Render
        if: steps.validate.outputs.ok == 'true'
        run: |
          set -euo pipefail
          python world_en/render.py world_en/templates/daily_en.j2 world_en/daily.json > world_en/message.txt
          test -s world_en/message.txt

      # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤—Å–µ–≥–¥–∞ ‚Äî –¥–ª—è –¥–µ–±–∞–≥–∞
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: world-daily-en-artifacts
          path: |
            world_en/collect.log
            world_en/daily.json
            world_en/message.txt
          if-no-files-found: ignore
          retention-days: 7

      # ========== MAIN ==========
      - name: Send text (MAIN)
        if: steps.validate.outputs.ok == 'true' && inputs.send_to_test != true
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (MAIN)
        if: steps.validate.outputs.ok == 'true' && inputs.send_to_test != true
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          mapfile -t L < <(python -c 'import json; d=json.load(open("world_en/daily.json",encoding="utf-8")); print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL","")); title=d.get("NATURE_TITLE","Nature Break"); snip=d.get("NATURE_SNIPPET","60 seconds of calm"); print(f"üåä <b>{title}</b>\n<i>{snip}</i>")')
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" \
              -F photo="${THUMB}" \
              -F parse_mode="HTML" \
              -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" \
              -d text="$URL" \
              -d disable_web_page_preview=false
          else
            echo "No nature URL in daily.json ‚Äî skipping card."
          fi

      # ========== TEST ==========
      - name: Send text (TEST)
        if: steps.validate.outputs.ok == 'true' && inputs.send_to_test == true
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (TEST)
        if: steps.validate.outputs.ok == 'true' && inputs.send_to_test == true
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          mapfile -t L < <(python -c 'import json; d=json.load(open("world_en/daily.json",encoding="utf-8")); print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL","")); title=d.get("NATURE_TITLE","Nature Break"); snip=d.get("NATURE_SNIPPET","60 seconds of calm"); print(f"üåä <b>{title}</b>\n<i>{snip}</i>")')
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" \
              -F photo="${THUMB}" \
              -F parse_mode="HTML" \
              -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" \
              -d text="$URL" \
              -d disable_web_page_preview=false
          else
            echo "No nature URL in daily.json ‚Äî skipping card."
          fi
