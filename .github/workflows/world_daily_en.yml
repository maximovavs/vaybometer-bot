name: world-daily-en

on:
  schedule:
    - cron: "15 7 * * *"   # 07:15 UTC
  workflow_dispatch:
    inputs:
      send_to_test:
        type: boolean
        description: "Send to TEST channel instead of main"
        default: false

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          # jinja2 нужно для рендера, в requirements его может не быть
          pip install -r requirements.txt jinja2

      - name: Show versions
        run: |
          set -euo pipefail
          python - <<'PY'
          import pkgutil
          mods=('pendulum','jinja2','requests','pandas','astral')
          for m in mods:
              ok = 'OK' if pkgutil.find_loader(m) else 'MISSING'
              print(f'{m}: {ok}')
          PY

      # ─────────────────── СБОРКА ДАННЫХ ───────────────────
      - name: Collect daily (capture full log, do not fail pipeline)
        id: collect
        env:
          YT_API_KEY:            ${{ secrets.YT_API_KEY }}
          YT_CHANNEL_ID:         ${{ secrets.YT_CHANNEL_ID }}
          YOUTUBE_PLAYLIST_IDS:  ${{ secrets.YOUTUBE_PLAYLIST_IDS }}
          FALLBACK_NATURE_LIST:  ${{ secrets.FALLBACK_NATURE_LIST }}
          PYTHONUNBUFFERED: "1"
          PYTHONFAULTHANDLER: "1"
        run: |
          set +e
          # Пишем stdout+stderr одновременно и в консоль, и в файл
          python -X faulthandler -u world_en/world_collect.py 2>&1 | tee world_en/collect.log
          echo "exit_code=$?" >> "$GITHUB_OUTPUT"
          set -e
          echo "---- world_en dir ----"; ls -la world_en || true
          echo "---- collector log head ----"; head -n 80 world_en/collect.log || true

      - name: Validate daily.json (existence only)
        id: validate
        run: |
          set -euo pipefail
          if [ -s world_en/daily.json ]; then
            echo "ok=true"  >> "$GITHUB_OUTPUT"
          else
            echo "ok=false" >> "$GITHUB_OUTPUT"
          fi

      # ─────────────────── РЕНДЕР ШАБЛОНА ───────────────────
      - name: Render from template
        if: steps.validate.outputs.ok == 'true'
        run: |
          set -euo pipefail
          python world_en/render.py world_en/templates/daily_en.j2 world_en/daily.json > world_en/message.txt

      # ─────────────────── ФОЛБЭК ТОЛЬКО ДЛЯ TEST ───────────────────
      - name: Fallback — build message.txt (TEST only)
        if: steps.validate.outputs.ok != 'true' && inputs.send_to_test == true
        shell: python
        run: |
          from pathlib import Path
          Path("world_en/message.txt").write_text(
              "World Vibe Snapshot (fallback)\n\n"
              "Collector failed, this is a test-only fallback message.",
              "utf-8"
          )

      - name: Ensure message exists (only when we plan to send)
        if: (steps.validate.outputs.ok == 'true' && inputs.send_to_test != true) || inputs.send_to_test == true
        run: |
          set -euo pipefail
          test -s world_en/message.txt

      # ─────────────────── АРТЕФАКТЫ ───────────────────
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: world-daily-en-artifacts
          path: |
            world_en/collect.log
            world_en/daily.json
            world_en/message.txt
          if-no-files-found: ignore
          retention-days: 7

      # ===== MAIN channel (только если есть настоящий daily.json) =====
      - name: Send text (MAIN)
        if: steps.validate.outputs.ok == 'true' && inputs.send_to_test != true
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (MAIN)
        if: steps.validate.outputs.ok == 'true' && inputs.send_to_test != true
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          mapfile -t L < <(python -c 'import json; d=json.load(open("world_en/daily.json",encoding="utf-8")); \
          print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL","")); \
          title=d.get("NATURE_TITLE","Nature Break"); snip=d.get("NATURE_SNIPPET","60 seconds of calm"); \
          print(f"🌊 <b>{title}</b>\n<i>{snip}</i>")')
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" -F photo="${THUMB}" \
              -F parse_mode="HTML" -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"▶️ Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" -d text="$URL" -d disable_web_page_preview=false
          else
            echo "No nature URL — skipping card."
          fi

      # ===== TEST channel =====
      - name: Send text (TEST)
        if: ${{ inputs.send_to_test == true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (TEST)
        if: inputs.send_to_test == true
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          if [ -s world_en/daily.json ]; then
            mapfile -t L < <(python -c 'import json; d=json.load(open("world_en/daily.json",encoding="utf-8")); \
            print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL","")); \
            title=d.get("NATURE_TITLE","Nature Break"); snip=d.get("NATURE_SNIPPET","60 seconds of calm"); \
            print(f"🌊 <b>{title}</b>\n<i>{snip}</i>")')
            THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"
            if [ -n "$THUMB" ] && [ -n "$URL" ]; then
              curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
                -F chat_id="${TG_CHAT}" -F photo="${THUMB}" \
                -F parse_mode="HTML" -F caption="$CAPTION" \
                -F reply_markup='{"inline_keyboard":[[{"text":"▶️ Watch on YouTube","url":"'"$URL"'"}]]}'
            elif [ -n "$URL" ]; then
              curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
                -d chat_id="${TG_CHAT}" -d text="$URL" -d disable_web_page_preview=false
            else
              echo "No nature URL — skipping card."
            fi
          else
            echo "No daily.json (TEST) — skipping nature card."
          fi