name: world-daily-en

on:
  schedule:
    - cron: "0 16 * * *"   # каждый день 16:00 UTC
  workflow_dispatch:
    inputs:
      send_to_test:
        type: boolean
        description: "Send to TEST channel instead of main"
        default: false

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install requests jinja2 pytz astral python-telegram-bot

      - name: Show versions
        run: |
          set -euo pipefail
          python -V
          pip list | grep -E 'requests|jinja2|pytz|astral|telegram' || true

      # ================== СБОР С ГЛУБОКИМ ЛОГОМ ==================
      - name: Collect daily (deep debug)
        env:
          YT_API_KEY:           ${{ secrets.YT_API_KEY }}
          YT_CHANNEL_ID:        ${{ secrets.YT_CHANNEL_ID }}
          YOUTUBE_PLAYLIST_IDS: ${{ secrets.YOUTUBE_PLAYLIST_IDS }}
          FALLBACK_NATURE_LIST: ${{ secrets.FALLBACK_NATURE_LIST }}
          OWM_KEY:              ${{ secrets.OWM_KEY }}
          AIRVISUAL_KEY:        ${{ secrets.AIRVISUAL_KEY }}
          TOMORROW_KEY:         ${{ secrets.TOMORROW_KEY }}
          OPENAI_API_KEY:       ${{ secrets.OPENAI_API_KEY }}
          GROQ_API_KEY:         ${{ secrets.GROQ_API_KEY }}
          GEMINI_API_KEY:       ${{ secrets.GEMINI_API_KEY }}
        run: |
          set -Eeuo pipefail
          mkdir -p world_en

          {
          echo "=== Collect start UTC: $(date -u '+%F %T') ==="
          echo "PWD: $(pwd)"
          python -V
          echo "---- world_en dir (before) ----"
          ls -la world_en || true

          echo "-- running collector --"
          python - <<'PY'
import os, sys, importlib.util, runpy, traceback
print("---- sys.path head ----"); print(sys.path[:3])
WL = ["YT_API_KEY","YT_CHANNEL_ID","YOUTUBE_PLAYLIST_IDS","FALLBACK_NATURE_LIST","OWM_KEY","AIRVISUAL_KEY","TOMORROW_KEY"]
print("ENV present:", [k for k in WL if os.getenv(k)])

# Снимок настроек (без значений)
try:
    spec = importlib.util.spec_from_file_location("settings_world_en","world_en/settings_world_en.py")
    m = importlib.util.module_from_spec(spec); spec.loader.exec_module(m)
    keys = [k for k in dir(m) if k.isupper()]
    print("settings keys:", keys[:10], "…")
except Exception as e:
    print("settings import failed:", e)

# Запускаем сам сборщик
try:
    runpy.run_path('world_en/world_collect.py', run_name='__main__')
    print("collector returned control")
except SystemExit as e:
    print("SystemExit:", e.code)
except Exception:
    traceback.print_exc()
PY

          echo "---- search daily.json ----"
          find . -maxdepth 2 -type f -name daily.json -print || true

          echo "---- world_en dir (after) ----"
          ls -la world_en || true
          echo "=== Collect end ==="
          } 2>&1 | tee world_en/collect.log

      - name: Validate daily.json (MUST exist)
        run: |
          set -Eeuo pipefail
          if [ -s world_en/daily.json ]; then
            echo "daily.json present"
          else
            echo "Error: world_en/daily.json is missing — collector failed."
            echo "---- collect.log (tail) ----"; tail -n 200 world_en/collect.log || true
            exit 1
          fi

      - name: Render from template
        run: |
          python world_en/render.py world_en/templates/daily_en.j2 world_en/daily.json > world_en/message.txt

      - name: Ensure message exists (only when we plan to send)
        run: test -s world_en/message.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: world-daily-en-artifacts
          path: |
            world_en/collect.log
            world_en/daily.json
            world_en/message.txt
          if-no-files-found: warn
          retention-days: 7

      # ================== ОТПРАВКА В ТЕЛЕГРАМ ==================
      - name: Send text (MAIN)
        if: ${{ inputs.send_to_test != true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send text (TEST)
        if: ${{ inputs.send_to_test == true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"