name: world-daily-en

on:
  schedule:
    - cron: "15 7 * * *"   # 07:15 UTC
  workflow_dispatch:
    inputs:
      send_to_test:
        type: boolean
        description: "Send to TEST channel instead of main"
        default: false

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt jinja2

      - name: Show versions
        run: |
          set -euo pipefail
          python -c "import pkgutil; mods=('pendulum','jinja2','requests','pandas','astral'); \
          print('\n'.join(f'{m}: ' + ('OK' if pkgutil.find_loader(m) else 'MISSING') for m in mods))"

            - name: Collect daily (capture full log; do not fail step)
        id: collect
        env:
          YT_API_KEY:            ${{ secrets.YT_API_KEY }}
          YT_CHANNEL_ID:         ${{ secrets.YT_CHANNEL_ID }}
          YOUTUBE_PLAYLIST_IDS:  ${{ secrets.YOUTUBE_PLAYLIST_IDS }}
          FALLBACK_NATURE_LIST:  ${{ secrets.FALLBACK_NATURE_LIST }}
          PYTHONUNBUFFERED: "1"
          PYTHONFAULTHANDLER: "1"
        run: |
          set -Eeuo pipefail
          mkdir -p world_en
          {
            echo "=== Collect start UTC: $(date -u '+%Y-%m-%d %H:%M:%S') ==="
            echo "PWD: $PWD"
            echo "Python: $(python -V)"
            echo "---- world_en dir before ----"; ls -la world_en || true

            # –ù–µ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –≤—ã–≤–æ–¥ —Å–∞–º–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞: –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ runpy
            # –∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
            set +e
            python - <<'PY' > world_en/collect.log 2>&1
            import os, sys, runpy, traceback, pathlib, json
            import faulthandler; faulthandler.enable()
            
            print("ENV sanity:",
                  {k: bool(os.getenv(k)) for k in ("YT_API_KEY","YT_CHANNEL_ID","YOUTUBE_PLAYLIST_IDS","FALLBACK_NATURE_LIST")},
                  flush=True)
            
            # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            os.environ.setdefault("PYTHONWARNINGS","default")
            
            try:
                print(">>> run world_en/world_collect.py via runpy.run_path", flush=True)
                runpy.run_path("world_en/world_collect.py", run_name="__main__")
                print("<<< collector finished (no exception)", flush=True)
            except SystemExit as e:
                print(f"SystemExit: {e.code}", flush=True)
            except Exception:
                print("Collector raised exception:", flush=True)
                traceback.print_exc()
            
            p = pathlib.Path("world_en/daily.json")
            print("daily.json exists:", p.exists(), "size:", (p.stat().st_size if p.exists() else 0), flush=True)
            print("List *.json nearby:",
                  [str(x) for x in pathlib.Path(".").glob("**/daily.json")][:5],
                  flush=True)
            PY
                        EC=$?
            set -e

            echo "collector exit code captured by wrapper: $EC"
            echo "---- world_en dir after ----"; ls -la world_en || true

            # –ï—Å–ª–∏ daily.json –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ –≤ world_en ‚Äî –Ω–∞–π–¥—ë–º –∏ –ø–µ—Ä–µ–Ω–µ—Å—ë–º
            FOUND="$(find . -maxdepth 3 -type f -name 'daily.json' -print | head -n1 || true)"
            if [ -n "$FOUND" ] && [ "$FOUND" != "./world_en/daily.json" ]; then
              echo "Found stray daily.json at: $FOUND"
              cp -f "$FOUND" world_en/daily.json || true
            fi

            if [ -s world_en/daily.json ]; then
              echo "daily.json size: $(stat -c%s world_en/daily.json) bytes"
            else
              echo "NO daily.json produced."
            fi

            echo "---- collector log (head) ----"; head -n 200 world_en/collect.log || true
            echo "---- collector log (tail) ----"; tail -n 200 world_en/collect.log || true
            echo "=== Collect end ==="
          } 2>&1 | tee world_en/collect.wrap.log


      - name: Validate daily.json (MUST exist)
        id: validate
        run: |
          set -euo pipefail
          if [ -s world_en/daily.json ]; then
            echo "ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "ok=false" >> "$GITHUB_OUTPUT"
            echo "Error: world_en/daily.json is missing ‚Äî collector failed."
            echo "---- wrapper log (head) ----"; head -n 200 world_en/collect.wrap.log || true
            echo "---- wrapper log (tail) ----"; tail -n 200 world_en/collect.wrap.log || true
            exit 1
          fi

      - name: Decide target channel (MAIN/TEST)
        id: target
        run: |
          set -euo pipefail
          TO_TEST=false
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.send_to_test }}" = "true" ]; then
            TO_TEST=true
          fi
          echo "to_test=${TO_TEST}" >> "$GITHUB_OUTPUT"
          echo "Chosen target (to_test): ${TO_TEST}"

      - name: Render from template
        if: ${{ steps.validate.outputs.ok == 'true' }}
        run: |
          set -euo pipefail
          python world_en/render.py world_en/templates/daily_en.j2 world_en/daily.json > world_en/message.txt
          test -s world_en/message.txt

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: world-daily-en-artifacts
          path: |
            world_en/collect.wrap.log
            world_en/collect.log
            world_en/daily.json
            world_en/message.txt
          if-no-files-found: warn
          retention-days: 7

      # ===== MAIN channel =====
      - name: Send text (MAIN)
        if: ${{ steps.validate.outputs.ok == 'true' && steps.target.outputs.to_test != 'true' }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (MAIN, only if real daily.json)
        if: ${{ steps.validate.outputs.ok == 'true' && steps.target.outputs.to_test != 'true' }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          mapfile -t L < <(python -c 'import json; d=json.load(open("world_en/daily.json",encoding="utf-8")); \
          print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL","")); \
          t=d.get("NATURE_TITLE","Nature Break"); s=d.get("NATURE_SNIPPET","60 seconds of calm"); \
          print(f"üåä <b>{t}</b>\n<i>{s}</i>")')
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" -F photo="${THUMB}" \
              -F parse_mode="HTML" -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" -d text="$URL" -d disable_web_page_preview=false
          else
            echo "No nature URL ‚Äî skipping card."
          fi

      # ===== TEST channel =====
      - name: Send text (TEST)
        if: ${{ steps.validate.outputs.ok == 'true' && steps.target.outputs.to_test == 'true' }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (TEST, only if real daily.json)
        if: ${{ steps.validate.outputs.ok == 'true' && steps.target.outputs.to_test == 'true' }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          mapfile -t L < <(python -c 'import json; d=json.load(open("world_en/daily.json",encoding="utf-8")); \
          print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL","")); \
          t=d.get("NATURE_TITLE","Nature Break"); s=d.get("NATURE_SNIPPET","60 seconds of calm"); \
          print(f"üåä <b>{t}</b>\n<i>{s}</i>")')
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" -F photo="${THUMB}" \
              -F parse_mode="HTML" -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" -d text="$URL" -d disable_web_page_preview=false
          else
            echo "No nature URL ‚Äî skipping card."
          fi
