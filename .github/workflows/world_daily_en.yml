name: world-daily-en

on:
  schedule:
    - cron: "0 16 * * *"           # каждый день 16:00 UTC
  workflow_dispatch:
    inputs:
      send_to_test:
        type: boolean
        description: "Send to TEST channel instead of main"
        default: false

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install \
            pendulum requests jinja2 pytz astral pandas \
            "python-telegram-bot>=20,<21"

      - name: Show versions
        run: |
          python - <<'PY'
          import pkgutil
          mods = ("pendulum","requests","jinja2","pytz","astral","pandas","telegram")
          for m in mods:
              print(f"{m}: {'OK' if pkgutil.find_loader(m) else 'MISSING'}")
          try:
              import telegram
              print("python-telegram-bot:", getattr(telegram, "__version__", "?"))
          except Exception as e:
              print("telegram import error:", e)
          PY

      - name: Collect daily (capture full log; do not fail step)
        env:
          YT_API_KEY:             ${{ secrets.YT_API_KEY }}
          YT_CHANNEL_ID:          ${{ secrets.YT_CHANNEL_ID }}
          YOUTUBE_PLAYLIST_IDS:   ${{ secrets.YOUTUBE_PLAYLIST_IDS }}
          FALLBACK_NATURE_LIST:   ${{ secrets.FALLBACK_NATURE_LIST }}
          # Доп. ключи, если твой коллектор их использует:
          AIRVISUAL_KEY:          ${{ secrets.AIRVISUAL_KEY }}
          OWM_KEY:                ${{ secrets.OWM_KEY }}
          TOMORROW_KEY:           ${{ secrets.TOMORROW_KEY }}
          OPENAI_API_KEY:         ${{ secrets.OPENAI_API_KEY }}
          GROQ_API_KEY:           ${{ secrets.GROQ_API_KEY }}
          GEMINI_API_KEY:         ${{ secrets.GEMINI_API_KEY }}
          PYTHONUNBUFFERED:       "1"
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "=== Collect start UTC: $(date -u '+%Y-%m-%d %H:%M:%S') ===" | tee world_en/collect.wrap.log
          echo "PWD: $(pwd)" | tee -a world_en/collect.wrap.log
          echo "Python: $(python -V)" | tee -a world_en/collect.wrap.log
          echo "---- world_en dir (before) ----" | tee -a world_en/collect.wrap.log
          ls -al world_en | tee -a world_en/collect.wrap.log

          echo "-- running collector --" | tee -a world_en/collect.wrap.log
          # stdout/stderr процесса пишем отдельно, чтобы не мешать собственному collect.log скрипта
          python world_en/world_collect.py > world_en/collect.run.log 2>&1 || true

          echo "---- search daily.json ----" | tee -a world_en/collect.wrap.log
          ls -al world_en | tee -a world_en/collect.wrap.log
          echo "=== Collect end ===" | tee -a world_en/collect.wrap.log

      - name: Validate daily.json (MUST exist)
        shell: bash
        run: |
          set -Eeuo pipefail
          if [ -s world_en/daily.json ]; then
            echo "daily.json found"
          else
            echo "Error: world_en/daily.json is missing — collector failed."
            echo "---- collect.log (tail) ----";      tail -n 200 world_en/collect.log       || true
            echo "---- collect.run.log (tail) ----"; tail -n 200 world_en/collect.run.log   || true
            echo "---- collect.wrap.log (tail) ----"; tail -n 200 world_en/collect.wrap.log || true
            exit 1
          fi

      - name: Render from template
        run: python world_en/render.py world_en/templates/daily_en.j2 world_en/daily.json > world_en/message.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: world-daily-en-artifacts
          path: |
            world_en/collect.wrap.log
            world_en/collect.run.log
            world_en/collect.log
            world_en/daily.json
            world_en/message.txt
          retention-days: 7

      # ========= MAIN channel =========
      - name: Send text (MAIN)
        if: ${{ inputs.send_to_test != true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      # ========= TEST channel =========
      - name: Send text (TEST)
        if: ${{ inputs.send_to_test == true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"