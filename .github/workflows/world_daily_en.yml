name: world-daily-en

on:
  schedule:
    - cron: "0 16 * * *"   # каждый день 16:00 UTC
  workflow_dispatch:
    inputs:
      send_to_test:
        type: boolean
        description: "Send to TEST channel instead of main"
        default: false

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install requests jinja2 pytz astral

      - name: Show versions
        run: |
          python -V
          pip list | grep -E 'requests|jinja2|pytz|astral' || true

      # ---------- Сбор данных с подробным логом ----------
      - name: Collect daily (debug)
        env:
          YT_API_KEY:           ${{ secrets.YT_API_KEY }}
          YT_CHANNEL_ID:        ${{ secrets.YT_CHANNEL_ID }}
          YOUTUBE_PLAYLIST_IDS: ${{ secrets.YOUTUBE_PLAYLIST_IDS }}
          FALLBACK_NATURE_LIST: ${{ secrets.FALLBACK_NATURE_LIST }}
          OWM_KEY:              ${{ secrets.OWM_KEY }}
          AIRVISUAL_KEY:        ${{ secrets.AIRVISUAL_KEY }}
          TOMORROW_KEY:         ${{ secrets.TOMORROW_KEY }}
          OPENAI_API_KEY:       ${{ secrets.OPENAI_API_KEY }}
          GROQ_API_KEY:         ${{ secrets.GROQ_API_KEY }}
          GEMINI_API_KEY:       ${{ secrets.GEMINI_API_KEY }}
        run: |
          set -Eeuo pipefail
          mkdir -p world_en
          {
            echo "=== Collect start UTC: $(date -u '+%F %T') ==="
            echo "PWD: $(pwd)"
            echo "Python: $(python -V)"
            echo "---- world_en dir (before) ----"
            ls -la world_en || true

            echo "-- running collector --"
            # если в world_collect.py есть собственный лог, он появится как world_en/collect.log
            python world_en/world_collect.py || true

            echo "---- search daily.json ----"
            find world_en -maxdepth 1 -type f -name "daily.json" -print || true

            echo "---- world_en dir (after) ----"
            ls -la world_en || true
            echo "=== Collect end ==="
          } 2>&1 | tee world_en/collect.wrap.log

      - name: Validate daily.json (MUST exist)
        run: |
          set -Eeuo pipefail
          if [ -s world_en/daily.json ]; then
            echo "daily.json present"
          else
            echo "Error: world_en/daily.json is missing — collector failed."
            echo "---- collect.wrap.log (tail) ----"
            tail -n 200 world_en/collect.wrap.log || true
            echo "---- collect.log (tail) ----"
            tail -n 200 world_en/collect.log || true
            exit 1
          fi

      - name: Render from template
        run: |
          python world_en/render.py world_en/templates/daily_en.j2 world_en/daily.json > world_en/message.txt

      - name: Ensure message exists
        run: test -s world_en/message.txt

      # Загружаем артефакты ВСЕГДА, даже при провале предыдущих шагов
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: world-daily-en-artifacts
          path: |
            world_en/collect.wrap.log
            world_en/collect.log
            world_en/daily.json
            world_en/message.txt
          if-no-files-found: warn
          retention-days: 7

      # ---------- Отправка в Telegram ----------
      - name: Send text (MAIN)
        if: ${{ inputs.send_to_test != true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send text (TEST)
        if: ${{ inputs.send_to_test == true }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"