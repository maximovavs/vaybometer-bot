name: world-daily-en

on:
  schedule:
    - cron: "15 7 * * *"   # 07:15 UTC
  workflow_dispatch:
    inputs:
      send_to_test:
        type: boolean
        description: "Send to TEST channel instead of main"
        default: false

jobs:
  run:
    runs-on: ubuntu-latest
    concurrency:
      group: world-daily-en
      cancel-in-progress: true
    defaults:
      run:
        shell: bash
    env:
      TZ: UTC
      PYTHONPATH: ${{ github.workspace }}
      PYTHONUNBUFFERED: "1"
      PYTHONFAULTHANDLER: "1"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install deps (requirements + jinja2)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt jinja2

      - name: Show versions
        run: |
          set -euo pipefail
          python -V
          pip -V
          python -c 'import pkgutil; mods=("pendulum","jinja2","requests","pandas","astral"); \
print("\n".join(f"{m} "+("OK" if pkgutil.find_loader(m) else "MISSING") for m in mods))'

      - name: Collect daily
        env:
          YT_API_KEY:            ${{ secrets.YT_API_KEY }}
          YT_CHANNEL_ID:         ${{ secrets.YT_CHANNEL_ID }}
          YOUTUBE_PLAYLIST_IDS:  ${{ secrets.YOUTUBE_PLAYLIST_IDS }}
          FALLBACK_NATURE_LIST:  ${{ secrets.FALLBACK_NATURE_LIST }}
        run: |
          set -euo pipefail

          echo "== Try collector with explicit --out (if supported) =="
          ( python world_en/world_collect.py --out world_en/daily.json ) || true

          echo "== Fallback: run as-is =="
          ( python world_en/world_collect.py ) || true

          echo "---- ls repo root ----"; ls -la || true
          echo "---- ls world_en ----"; ls -la world_en || true

          echo "== Probe any daily*.json =="
          find . -maxdepth 3 -type f -iname 'daily*.json' -ls || true

          # Normalize to world_en/daily.json
          if [ ! -f world_en/daily.json ]; then
            if   [ -f ./daily.json ]; then mv ./daily.json world_en/daily.json
            elif [ -f world_en/daily_en.json ]; then mv world_en/daily_en.json world_en/daily.json
            elif [ -f world/daily.json ]; then mv world/daily.json world_en/daily.json
            fi
          fi

          # Safe stub (only if still missing)
          if [ ! -f world_en/daily.json ]; then
            echo "No daily.json found ‚Äî generating a safe stub from Jinja template."
            python -c 'from jinja2 import Environment, FileSystemLoader, meta; import json,io,sys; \
env=Environment(loader=FileSystemLoader("world_en/templates")); \
src=io.open("world_en/templates/daily_en.j2","r",encoding="utf-8").read(); \
ast=env.parse(src); vars_=sorted(meta.find_undeclared_variables(ast)); \
def df(k): \
  kl=k.lower(); \
  return [] if any(x in kl for x in ("list","items","rows","cities","lines")) else \
         (0 if any(x in kl for x in ("count","num","kp","aqi","uvi","speed","value","temp","tmax","tmin")) else ""); \
data={k:df(k) for k in vars_}; \
data.setdefault("NATURE_THUMB",""); data.setdefault("NATURE_URL",""); \
data.setdefault("NATURE_TITLE","Nature Break"); data.setdefault("NATURE_SNIPPET","60 seconds of calm"); \
io.open("world_en/daily.json","w",encoding="utf-8").write(json.dumps(data,ensure_ascii=False,indent=2))'
          fi

          test -f world_en/daily.json || { echo "ERROR: world_en/daily.json missing"; exit 1; }

      - name: Render
        run: |
          set -euo pipefail
          python world_en/render.py world_en/templates/daily_en.j2 world_en/daily.json > world_en/message.txt
          test -s world_en/message.txt || { echo "Empty message.txt"; exit 1; }

      - name: Ensure daily.json exists
        run: test -f world_en/daily.json || { echo "daily.json missing"; exit 1; }

      # ========== MAIN channel ==========
      - name: Send text (MAIN)
        if: ${{ github.event.inputs.send_to_test != 'true' }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (MAIN)
        if: ${{ github.event.inputs.send_to_test != 'true' }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_EN }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID_EN }}
        run: |
          set -euo pipefail
          readarray -t L < <(python -c 'import json,io; d=json.load(io.open("world_en/daily.json",encoding="utf-8")); \
print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL","")); \
title=d.get("NATURE_TITLE","Nature Break"); snip=d.get("NATURE_SNIPPET","60 seconds of calm"); \
print(f"üåä <b>{title}</b>\n<i>{snip}</i>")')
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"

          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" \
              -F photo="${THUMB}" \
              -F parse_mode="HTML" \
              -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" \
              -d text="$URL" \
              -d disable_web_page_preview=false
          else
            echo "No nature URL in daily.json ‚Äî skipping card."
          fi

      # ========== TEST channel ==========
      - name: Send text (TEST)
        if: ${{ github.event.inputs.send_to_test == 'true' }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" -d parse_mode="HTML" \
            --data-urlencode text@"world_en/message.txt"

      - name: Send Nature card (TEST)
        if: ${{ github.event.inputs.send_to_test == 'true' }}
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_TEST }}
          TG_CHAT:  ${{ secrets.CHANNEL_ID_TEST }}
        run: |
          set -euo pipefail
          readarray -t L < <(python -c 'import json,io; d=json.load(io.open("world_en/daily.json",encoding="utf-8")); \
print(d.get("NATURE_THUMB","")); print(d.get("NATURE_URL","")); \
title=d.get("NATURE_TITLE","Nature Break"); snip=d.get("NATURE_SNIPPET","60 seconds of calm"); \
print(f"üåä <b>{title}</b>\n<i>{snip}</i>")')
          THUMB="${L[0]}"; URL="${L[1]}"; CAPTION="${L[*]:2}"

          if [ -z "${TG_CHAT}" ]; then echo "TEST chat id is empty"; exit 1; fi
          if [ -n "$THUMB" ] && [ -n "$URL" ]; then
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendPhoto" \
              -F chat_id="${TG_CHAT}" \
              -F photo="${THUMB}" \
              -F parse_mode="HTML" \
              -F caption="$CAPTION" \
              -F reply_markup='{"inline_keyboard":[[{"text":"‚ñ∂Ô∏è Watch on YouTube","url":"'"$URL"'"}]]}'
          elif [ -n "$URL" ]; then
            curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
              -d chat_id="${TG_CHAT}" \
              -d text="$URL" \
              -d disable_web_page_preview=false
          else
            echo "No nature URL in daily.json ‚Äî skipping card."
          fi

      - name: Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: world-daily-en-debug
          path: |
            world_en/daily.json
            world_en/message.txt
            world_en/world_collect.py
            world_en/templates/daily_en.j2
            world_en/*.py
            *.log
          if-no-files-found: warn
