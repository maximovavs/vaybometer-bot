#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
gen_lunar_calendar.py
~~~~~~~~~~~~~~~~~~~~~
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª lunar_calendar.json –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞.

–î–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç:
  - phase:        –∏–∫–æ–Ω–∫–∞ –ª—É–Ω—ã + –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã + –∑–Ω–∞–∫ + (N% –æ—Å–≤–µ—â.)
  - advice:       –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
  - next_event:   –∫—Ä–∞—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ
  - favorable_days:   —Å–ø–∏—Å–æ–∫ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
  - unfavorable_days: —Å–ø–∏—Å–æ–∫ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
"""

import json
import math
import random
from pathlib import Path
import pendulum
import swisseph as swe
import datetime as dt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—á—ë—Ç–∞
SYNODIC_MONTH = 29.530588853

# –ò–∫–æ–Ω–∫–∏ —Ñ–∞–∑
MOON_ICONS = "üåëüåíüåìüåîüåïüåñüåóüåò"

# –ó–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ (–¥–ª—è –õ—É–Ω—ã)
SIGNS = [
    "–û–≤–Ω–µ", "–¢–µ–ª—å—Ü–µ", "–ë–ª–∏–∑–Ω–µ—Ü–∞—Ö", "–†–∞–∫–µ", "–õ—å–≤–µ", "–î–µ–≤–µ",
    "–í–µ—Å–∞—Ö", "–°–∫–æ—Ä–ø–∏–æ–Ω–µ", "–°—Ç—Ä–µ–ª—å—Ü–µ", "–ö–æ–∑–µ—Ä–æ–≥–µ", "–í–æ–¥–æ–ª–µ–µ", "–†—ã–±–∞—Ö",
]

# –ó–∞–≥–ª—É—à–µ—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
DAY_ACTIONS = [
    "–ù–∞—á–Ω–∏—Ç–µ —É—Ç—Ä–æ —Å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ üßò",
    "–í—ã–ø–µ–π—Ç–µ —á–∞—à–µ—á–∫—É –ª—é–±–∏–º–æ–≥–æ –∫–æ—Ñ–µ ‚òï",
    "–°–¥–µ–ª–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –ø—Ä–æ–≥—É–ª–∫—É –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ üö∂",
    "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ 5-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –¥–ª—è —Ä–∞—Å—Ç—è–∂–∫–∏ ü§∏",
    "–ú–µ–¥–∏—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º üåô",
    "–ó–∞–ø–∏—à–∏—Ç–µ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã üôè",
    "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –±–µ–∑ —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º üìµ",
    "–ü–æ—Å–ª—É—à–∞–π—Ç–µ –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É üé∂",
    "–ü–æ—á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥—É –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ üìö",
    "–í—ã–ø–µ–π—Ç–µ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è üíß",
]

def compute_phase_info(d: pendulum.Date) -> dict:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∞–∑—É –õ—É–Ω—ã –Ω–∞ –¥–∞—Ç—É d:
    ‚Ä¢ percent ‚Äî –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å
    ‚Ä¢ icon ‚Äî –∏–∫–æ–Ω–∫–∞ (bar)
    ‚Ä¢ name ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã
    ‚Ä¢ sign ‚Äî –∑–Ω–∞–∫ –ó–æ–¥–∏–∞–∫–∞
    """
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ UTC –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    utc = dt.datetime(d.year, d.month, d.day, tzinfo=dt.timezone.utc)
    jd = swe.julday(utc.year, utc.month, utc.day, utc.hour + utc.minute/60)
    sun_lon = swe.calc_ut(jd, swe.SUN)[0]
    moon_lon = swe.calc_ut(jd, swe.MOON)[0]
    phase_frac = ((moon_lon - sun_lon + 360) % 360) / 360  # 0‚Ä¶1
    illum = round(abs(math.cos(math.pi * phase_frac)) * 100)
    icon = MOON_ICONS[int(phase_frac * 8) % 8]

    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã
    if illum < 5:
        name = "–ù–æ–≤–æ–ª—É–Ω–∏–µ"
    elif illum > 95:
        name = "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    elif phase_frac < 0.5:
        name = "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞"
    else:
        name = "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞"

    sign = SIGNS[int(moon_lon // 30) % 12]

    return {
        "icon":    icon,
        "name":    name,
        "sign":    sign,
        "illum":   illum,
        "text":    f"{icon} {name} –≤ {sign} ({illum}% –æ—Å–≤–µ—â.)",
    }

def find_next_event(d: pendulum.Date) -> str:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è:
    ‚Üí –ß–µ—Ä–µ–∑ 3 –¥–Ω—è —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–ª–Ω–µ—á–Ω–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ ‚Äî —É—Å–∏–ª–µ–Ω–∏–µ –∏–Ω—Ç—É–∏—Ü–∏–∏
    """
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∏–ª–∏ API
    return "‚Üí –ß–µ—Ä–µ–∑ 3 –¥–Ω—è —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–ª–Ω–µ—á–Ω–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ ‚Äî —É—Å–∏–ª–µ–Ω–∏–µ –∏–Ω—Ç—É–∏—Ü–∏–∏"

def generate_calendar(year: int, month: int) -> dict[str, dict]:
    start = pendulum.date(year, month, 1)
    end = start.end_of('month')
    result: dict[str, dict] = {}
    d = start
    # –ü—Ä–∏–º–µ—Ä –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π (–∫–∞–∂–¥—ã–π 5-–π)
    while d <= end:
        info = compute_phase_info(d)
        # –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç: —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ –∑–∞–≥–ª—É—à–µ–∫
        advice = random.choice(DAY_ACTIONS)

        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞: –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π –±–µ—Ä—ë–º –≤—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫‚Äì—Å—Ä–µ–¥–∞
        fav = [i for i in range(1, end.day + 1)
               if pendulum.date(year, month, i).weekday() in (0, 1, 2)]
        # –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ ‚Äî –≤—ã—Ö–æ–¥–Ω—ã–µ
        unfav = [i for i in range(1, end.day + 1)
                 if pendulum.date(year, month, i).weekday() in (5, 6)]

        result[d.to_date_string()] = {
            "phase":           info["text"],
            "advice":          advice,
            "next_event":      find_next_event(d),
            "favorable_days":   fav,
            "unfavorable_days": unfav,
        }
        d = d.add(days=1)
    return result

def main():
    today = pendulum.today()
    data = generate_calendar(today.year, today.month)
    out = Path(__file__).parent / "lunar_calendar.json"
    out.write_text(json.dumps(data, ensure_ascii=False, indent=2))
    print(f"‚úÖ –§–∞–π–ª {out.name} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {today.format('MMMM YYYY')}")

if __name__ == "__main__":
    main()
