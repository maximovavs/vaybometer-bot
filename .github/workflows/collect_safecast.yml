name: Collect SafeCast (Cyprus)

on:
  schedule:
    # каждые 6 часов (UTC)
    - cron: "0 */6 * * *"
  workflow_dispatch:
    inputs:
      lat:
        description: "Широта (по умолчанию Лимассол)"
        type: string
        required: false
        default: "34.707"
      lon:
        description: "Долгота (по умолчанию Лимассол)"
        type: string
        required: false
        default: "33.022"
      distance_km:
        description: "Радиус выборки, км"
        type: string
        required: false
        default: "50"
      since_hours:
        description: "Глубина истории, часов"
        type: string
        required: false
        default: "48"
      region:
        description: "Метка региона в выходном JSON"
        type: string
        required: false
        default: "Cyprus"
      file:
        description: "Путь к выходному файлу"
        type: string
        required: false
        default: "data/safecast_cy.json"
      dry_run:
        description: "Только собрать, без коммита"
        type: boolean
        required: false
        default: false

permissions:
  contents: write

concurrency:
  group: safecast-cyprus
  cancel-in-progress: false

jobs:
  collect:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install requests
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Fetch SafeCast
        env:
          SC_LAT:         ${{ inputs.lat || '34.707' }}
          SC_LON:         ${{ inputs.lon || '33.022' }}
          SC_DISTANCE_KM: ${{ inputs.distance_km || '50' }}
          SC_SINCE_HOURS: ${{ inputs.since_hours || '48' }}
          SC_REGION:      ${{ inputs.region || 'Cyprus' }}
          SC_FILE:        ${{ inputs.file || 'data/safecast_cy.json' }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$SC_FILE")"

          python - <<'PY'
          import os, sys, time, json, urllib.request, urllib.parse
          from datetime import datetime, timedelta, timezone

          LAT  = float(os.getenv("SC_LAT", "34.707"))
          LON  = float(os.getenv("SC_LON", "33.022"))
          DIST = float(os.getenv("SC_DISTANCE_KM", "50"))
          HRS  = int(float(os.getenv("SC_SINCE_HOURS","48")))
          OUT  = os.getenv("SC_FILE","data/safecast_cy.json")
          REG  = os.getenv("SC_REGION") or None

          def fetch_json_with_retry(url, tries=4, backoff=3, timeout=30):
              last = None
              for i in range(tries):
                  try:
                      with urllib.request.urlopen(url, timeout=timeout) as r:
                          return json.loads(r.read().decode("utf-8"))
                  except Exception as e:
                      last = e
                      time.sleep(backoff * (i+1))
              raise last

          qs = {
            "latitude": LAT,
            "longitude": LON,
            "distance": DIST * 1000.0,  # метры
            "order": "captured_at",
            "direction": "desc",
            "captured_after": (datetime.now(timezone.utc) - timedelta(hours=HRS)).strftime("%Y-%m-%dT%H:%M:%SZ"),
          }
          url = "https://api.safecast.org/measurements.json?" + urllib.parse.urlencode(qs)
          try:
              raw = fetch_json_with_retry(url)
          except Exception as e:
              print("ERROR: fetch:", e, file=sys.stderr)
              raw = []

          def norm_unit(v, u):
              try:
                  val = float(v)
              except Exception:
                  return None
              u = (u or "").replace("μ","µ").strip().lower()
              if u in ("µsv/h","usv/h"):
                  return val
              if u == "nsv/h":
                  return val/1000.0
              return None

          latest = None
          for m in (raw if isinstance(raw,list) else []):
              usvh = norm_unit(m.get("value"), m.get("unit"))
              if usvh is None:
                  continue
              ts_s = m.get("captured_at")
              try:
                  ts = int(datetime.fromisoformat(ts_s.replace("Z","+00:00")).timestamp()) if ts_s else int(time.time())
              except Exception:
                  ts = int(time.time())
              rec = {
                  "ts": ts,
                  "uSv_h": round(usvh, 6),
                  "cpm": m.get("cpm"),
                  "id":  m.get("id"),
                  "src": "safecast",
                  "region": REG
              }
              if latest is None or rec["ts"] > latest["ts"]:
                  latest = rec

          items = []
          if os.path.exists(OUT):
              try:
                  items = json.load(open(OUT, "r", encoding="utf-8"))
              except Exception:
                  items = []

          if latest:
              if not items or items[-1].get("ts") != latest["ts"] or items[-1].get("uSv_h") != latest["uSv_h"]:
                  items.append(latest)
                  items = items[-5000:]
                  json.dump(items, open(OUT, "w", encoding="utf-8"), ensure_ascii=False, separators=(",", ": "))
                  print("collect: ok →", OUT, "last:", latest)
              else:
                  print("collect: no change, keep last:", items[-1])
          else:
              print("collect: no valid µSv/h in time window")

          PY

      - name: Commit & push (if changed)
        if: ${{ inputs.dry_run != true }}
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -N ${{ inputs.file || 'data/safecast_cy.json' }} >/dev/null 2>&1 || true
          if ! git diff --quiet -- ${{ inputs.file || 'data/safecast_cy.json' }}; then
            git add ${{ inputs.file || 'data/safecast_cy.json' }}
            git commit -m "safecast(CY): update ${{ inputs.file || 'data/safecast_cy.json' }}"
            git pull --rebase --autostash || true
            git push
          else
            echo "No changes."
          fi
