name: Monthly VayboMeter Calendar

# ────────── 1. Триггеры ────────────────────────────────────────────────
on:
  schedule:
    # каждый день 10:00 UTC
    - cron: '0 10 * * *'
  workflow_dispatch:
    inputs:
      force_run:
        description: "Запустить вручную (сгенерировать текущий месяц)"
        required: false
        default:  "false"

# для push lunar_calendar.json
permissions:
  contents: write

jobs:
  monthly:
    runs-on: ubuntu-latest

    steps:
    # ── 2) Checkout ────────────────────────────────────────────────────
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: true

    # ── 3) Решаем: генерировать ли календарь и какой месяц ────────────
    - name: 🔍 Decide month / need-run
      id: decide
      shell: bash
      run: |
        # По-умолчанию ничего не делаем
        run=no
        target_month=

        # 3.1 авто-режим: если завтра первое → генерим СЛЕДУЮЩИЙ месяц
        if [[ $(date -d 'tomorrow' +%d) == "01" ]]; then
          run=yes
          target_month=$(date -d 'tomorrow' +%Y-%m)   # YYYY-MM следующего
        fi

        # 3.2 ручной запуск с force_run=true → генерим ТЕКУЩИЙ месяц
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && \
              "${{ github.event.inputs.force_run }}" == "true" ]]; then
          run=yes
          target_month=$(date '+%Y-%m')               # текущий
        fi

        echo "run_calendar=$run"     >> $GITHUB_OUTPUT
        echo "target_month=$target_month" >> $GITHUB_OUTPUT
        # экспорт в env для последующих if:
        echo "RUN_CALENDAR=$run"     >> $GITHUB_ENV
        echo "TARGET_MONTH=$target_month" >> $GITHUB_ENV

    # ── 4) Python ──────────────────────────────────────────────────────
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # ── 5) Установка зависимостей (только при run=yes) ────────────────
    - name: 📦 Install dependencies
      if: env.RUN_CALENDAR == 'yes'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # ── 6) Генерация календаря ────────────────────────────────────────
    - name: 🌙 Generate lunar_calendar.json
      if: env.RUN_CALENDAR == 'yes'
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python gen_lunar_calendar.py "$TARGET_MONTH"

    # ── 7) Commit & push (если файл изменился) ────────────────────────
    - name: ✏️ Commit & push
      if: env.RUN_CALENDAR == 'yes'
      run: |
        git config user.name  "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git add lunar_calendar.json
        if git diff --cached --quiet; then
          echo "✅ lunar_calendar.json уже актуален."
        else
          git commit -m "chore: update lunar_calendar.json"
          # если пуш не проходит из-за fast-forward, подтягиваем и повторяем
          if ! git push; then
            git pull --rebase --autostash
            git push
          fi
        fi

    # ── 8) Отправка отчёта в Telegram ────────────────────────────────
    - name: 📨 Send monthly calendar summary
      if: env.RUN_CALENDAR == 'yes'
      env:
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        CHANNEL_ID:     ${{ secrets.CHANNEL_ID }}
      run: |
        python send_monthly_calendar.py
