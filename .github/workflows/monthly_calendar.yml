name: Monthly VayboMeter Calendar

# ────────── 1. Триггеры ─────────────────────────────────────────────────
on:
  schedule:
    - cron: '0 1 * * *'      # ежедневно 01:00 UTC
  workflow_dispatch:
    inputs:
      force_run:
        description: "Пропустить проверку «последний день» и запустить всё"
        required: false
        default: "false"

# Репо-токен нужен на push
permissions:
  contents: write

jobs:
  monthly:
    runs-on: ubuntu-latest

    steps:

    # ────────── 2. Checkout ────────────────────────────────────────────
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: true

    # ────────── 3. Проверка «последний день?» ─────────────────────────
    - name: 🗓️ Check last day of month
      id: check_last_day
      run: |
        tomorrow=$(date -d "tomorrow" '+%d')
        if [[ "$tomorrow" == "01" ]]; then
          echo "is_last=true" >> $GITHUB_OUTPUT
        else
          echo "is_last=false" >> $GITHUB_OUTPUT
        fi
        echo "Tomorrow: $tomorrow"

    # Если запуск вручную с force_run=true → переписываем флаг
    - name: ⏭️ Override last-day check if requested
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.force_run == 'true' }}
      run: echo "is_last=true" >> $GITHUB_OUTPUT
      id: force

    # Удобная переменная-условие
    - name: 🏷️ Set run-condition variable
      run: |
        RAW="${{ steps.force.outputs.is_last || steps.check_last_day.outputs.is_last }}"
        echo "RUN_CALENDAR=$RAW" >> $GITHUB_ENV

    # ────────── 4. Setup Python (всегда, быстро) ──────────────────────
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # ────────── 5. Install deps ← только если нужно ───────────────────
    - name: 📦 Install dependencies
      if: env.RUN_CALENDAR == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # ────────── 6. Сгенерировать JSON ────────────────────────────────
    - name: 🌙 Generate lunar_calendar.json
      if: env.RUN_CALENDAR == 'true'
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python gen_lunar_calendar.py

    # ────────── 7. Commit & push (робастно) ───────────────────────────
    - name: ✏️ Commit & push calendar (robust)
      if: env.RUN_CALENDAR == 'true'
      run: |
        git config user.name  "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git add lunar_calendar.json
        if git diff --cached --quiet; then
          echo "✅ lunar_calendar.json is already up-to-date."
        else
          git commit -m "chore: update lunar_calendar.json"
          # попробуем пуш; если неудача → pull --rebase и пуш снова
          if ! git push; then
            git pull --rebase
            git push
          fi
        fi

    # ────────── 8. Отправить отчёт в Telegram ─────────────────────────
    - name: 📨 Send monthly calendar summary
      if: env.RUN_CALENDAR == 'true'
      env:
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        CHANNEL_ID:     ${{ secrets.CHANNEL_ID }}
      run: |
        python send_monthly_calendar.py