# .github/workflows/monthly_calendar.yml
name: Monthly Lunar Calendar

# –ó–∞–ø—É—Å–∫ –≤—Ä—É—á–Ω—É—é –∏–∑ Actions ‚Üí Run workflow
on:
  workflow_dispatch:

# –ß—Ç–æ–±—ã –∏–º–µ—Ç—å –ø—Ä–∞–≤–æ –ø—É—à–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π lunar_calendar.json
permissions:
  contents: write

jobs:
  monthly:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v3
        with:
          # —Å–æ—Ö—Ä–∞–Ω–∏–º –∫—Ä–µ–¥—ã –¥–ª—è –ø—É—à–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é
          persist-credentials: true
          fetch-depth: 0

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üåô Generate lunar_calendar.json
        run: python gen_lunar_calendar.py

      - name: ‚úèÔ∏è Commit lunar_calendar.json if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add lunar_calendar.json
          if git diff --cached --quiet; then
            echo "‚úÖ lunar_calendar.json up to date, nothing to commit."
          else
            git commit -m "chore: –æ–±–Ω–æ–≤–∏—Ç—å lunar_calendar.json"
            git push
          fi

      - name: üì§ Send monthly summary to Telegram
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHANNEL_ID:     ${{ secrets.CHANNEL_ID }}
        run: |
          python - << 'EOF'
import json, pendulum, os, requests

# 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
with open('lunar_calendar.json', encoding='utf-8') as f:
    data = json.load(f)

# 2. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
month_name = pendulum.today().format('MMMM YYYY')
lines = [f"üåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {month_name}</b>"]

# 3. –ü—Ä–æ–±–µ–∂–∞—Ç—å—Å—è –ø–æ –≤—Å–µ–º –¥–∞—Ç–∞–º
for date_str, rec in data.items():
    d = pendulum.parse(date_str)
    # –î–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "1 –∏—é–Ω—è"
    day_label = d.format('D MMMM')
    # –§–∞–∑–∞ –∏ –ø–µ—Ä–≤—ã–π —Å–æ–≤–µ—Ç
    phase = rec.get('phase','')
    adv = rec.get('advice',[])
    tip = adv[0] if adv else ''
    lines.append(f"{day_label} ‚Äî {phase}: {tip}")

# 4. –î–æ–±–∞–≤–∏—Ç—å –æ–±—â–∏–µ —Å–ø–∏—Å–∫–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π
any_rec = next(iter(data.values()))
fav = any_rec.get('favorable_days', {})
lines.append("‚Äî‚Äî‚Äî")
lines.append(f"‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞ (–æ–±—â–∏–µ): {', '.join(map(str,fav.get('general',[])))}")
lines.append(f"‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∏: {', '.join(map(str,fav.get('haircut',[])))}")
lines.append(f"‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: {', '.join(map(str,fav.get('travel',[])))}")

# 5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
text = "\n".join(lines)
resp = requests.post(
    f"https://api.telegram.org/bot{os.environ['TELEGRAM_TOKEN']}/sendMessage",
    json={
      "chat_id": os.environ['CHANNEL_ID'],
      "text": text,
      "parse_mode": "HTML",
      "disable_web_page_preview": True
    }
)
print("Telegram response:", resp.status_code, resp.text)
EOF
