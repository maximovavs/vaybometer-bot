name: Collect Schumann Data

on:
  schedule:
    - cron: '0 * * * *'  # –ö–∞–∂–¥—ã–π —á–∞—Å
  workflow_dispatch:

jobs:
  schumann:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v3

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üì¶ Install dependencies
        run: |
          pip install -r requirements.txt
          pip install beautifulsoup4 requests

      - name: üöÄ Fetch Schumann point
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.CHANNEL_ID }}
        run: |
          python - <<EOF
          import json
          import time
          import requests
          import re
          from pathlib import Path
          from bs4 import BeautifulSoup

          def send_telegram_message(token, chat_id, message):
              if not token or not chat_id:
                  print("Telegram token or chat_id missing")
                  return
              try:
                  url = f"https://api.telegram.org/bot{token}/sendMessage"
                  data = {"chat_id": chat_id, "text": message}
                  response = requests.post(url, data=data)
                  response.raise_for_status()
                  print("Telegram notification sent")
              except Exception as e:
                  print(f"Failed to send Telegram notification: {e}")

          def _fetch_schumann_data(url, attempts=5, backoff=2.0, timeout=45):
              for i in range(attempts):
                  try:
                      response = requests.get(url, timeout=timeout, headers={"User-Agent": "VayboMeter/1.0"})
                      response.raise_for_status()
                      data = response.text
                      print(f"Raw response from {url} (first 200 chars): {data[:200]}...")
                      if data:
                          print(f"Success: Got data from {url}")
                          return data
                      print(f"Retry {i+1}/{attempts} for {url} after {backoff**i}s")
                      time.sleep(backoff**i)
                  except Exception as e:
                      print(f"Retry {i+1}/{attempts} failed for {url}: {e}")
                      time.sleep(backoff**i)
              print(f"All attempts failed for {url}")
              return ""

          try:
              # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
              freq = None
              amp = None

              # –ü—Ä–æ–±—É–µ–º JSON API
              urls = [
                  "https://api.glcoherence.org/v1/earth",
                  "https://api.codetabs.com/v1/proxy?quest=https://api.glcoherence.org/v1/earth",
                  "https://thingproxy.freeboard.io/fetch/https://api.glcoherence.org/v1/earth",
                  "https://api.allorigins.win/raw?url=https://api.glcoherence.org/v1/earth"
              ]
              for url in urls:
                  raw_data = _fetch_schumann_data(url)
                  if raw_data:
                      try:
                          data = json.loads(raw_data) if raw_data.strip().startswith('{') else {}
                          freq = data.get("data", {}).get("sr1", {}).get("frequency_1") or data.get("frequency")
                          amp = data.get("data", {}).get("sr1", {}).get("amplitude_1") or data.get("amplitude")
                          if freq and amp:
                              break
                      except json.JSONDecodeError:
                          print(f"JSON decode failed for {url}")

              # –ü–∞—Ä—Å–∏–Ω–≥ sosrff.tsu.ru
              if not (freq and amp):
                  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü—É
                  for page in ["https://sosrff.tsu.ru", "http://sosrff.tsu.ru/?page=sc"]:
                      raw_html = _fetch_schumann_data(page)
                      if raw_html:
                          soup = BeautifulSoup(raw_html, "html.parser")
                          # –ü–æ–∏—Å–∫ JSON –≤ <script>
                          scripts = soup.find_all("script", type="text/javascript")
                          for script in scripts:
                              script_text = script.text.strip()
                              print(f"Analyzing script on {page}: {script_text[:200]}...")
                              # –ò—â–µ–º JSON —Å frequency –∏ amplitude
                              json_match = re.search(r"\{.*?\bfrequency\s*:\s*(\d+\.?\d*)\s*,\s*amplitude\s*:\s*(\d+\.?\d*)\s*}", script_text, re.DOTALL)
                              if json_match:
                                  freq = json_match.group(1)
                                  amp = json_match.group(2)
                                  print(f"Found in JSON on {page}: freq={freq}, amp={amp}")
                                  break
                          if freq and amp:
                              break
                          # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ JSON, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
                          all_text = " ".join(soup.stripped_strings)
                          print(f"Searching text on {page}: {all_text[:200]}...")
                          freq_match = re.search(r"(\d+\.?\d*)\s*Hz", all_text)
                          amp_match = re.search(r"(\d+\.?\d*)\s*nT", all_text)
                          freq = freq_match.group(1) if freq_match else None
                          amp = amp_match.group(1) if amp_match else None
                          print(f"Parsed from {page}: freq={freq}, amp={amp}")
                          if freq and amp:
                              break

              # –ü–∞—Ä—Å–∏–Ω–≥ HeartMath
              if not (freq and amp):
                  raw_html = _fetch_schumann_data("https://www.heartmath.org/gci/gci-data/")
                  if raw_html:
                      soup = BeautifulSoup(raw_html, "html.parser")
                      all_text = " ".join(soup.stripped_strings)
                      print(f"Searching text on HeartMath: {all_text[:200]}...")
                      freq_match = re.search(r"(\d+\.?\d*)\s*Hz", all_text)
                      amp_match = re.search(r"(\d+\.?\d*)\s*nT", all_text)
                      freq = freq_match.group(1) if freq_match else None
                      amp = amp_match.group(1) if amp_match else None
                      print(f"Parsed from HeartMath: freq={freq}, amp={amp}")

              if not (freq and amp):
                  # Fallback –Ω–∞ –∫—ç—à
                  cache = Path("schumann_hourly.json")
                  if cache.exists():
                      arr = json.loads(cache.read_text())
                      if arr:
                          last = arr[-1]
                          freq, amp = last["freq"], last["amp"]
                          print("Using cached data:", last)
                      else:
                          print("Cache exists but is empty")
                  else:
                      print("No cache file found")

              if freq and amp:
                  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É
                  rec = {"ts": int(time.time()), "freq": float(freq), "amp": float(amp)}
                  cache = Path("schumann_hourly.json")
                  arr = json.loads(cache.read_text()) if cache.exists() else []
                  arr.append(rec)
                  cutoff = int(time.time()) - 7*24*3600
                  arr = [r for r in arr if r["ts"] >= cutoff]
                  cache.write_text(json.dumps(arr, ensure_ascii=False))
                  print("Saved Schumann point:", rec)
                  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–Ω–æ–º–∞–ª–∏—è—Ö
                  if float(freq) > 8.0 or float(amp) > 100.0:
                      send_telegram_message(
                          "${{ env.TELEGRAM_TOKEN }}",
                          "${{ env.TELEGRAM_CHAT_ID }}",
                          f"üö® High Schumann! Freq: {freq} Hz, Amp: {amp}"
                      )
              else:
                  print("No valid freq/amp data received, even from cache")
          except Exception as e:
              print(f"Error fetching Schumann data: {e}")
              send_telegram_message(
                  "${{ env.TELEGRAM_TOKEN }}",
                  "${{ env.TELEGRAM_CHAT_ID }}",
                  f"‚ö†Ô∏è Schumann script error: {e}"
              )
          EOF

      - name: üóÇÔ∏è Commit cache
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "schumann: add hourly point"
          file_pattern: "schumann_hourly.json"