name: Collect Schumann Data

on:
  schedule:
    # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π —á–∞—Å —Ä–æ–≤–Ω–æ
    - cron: '0 * * * *'
  workflow_dispatch: # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å GitHub

jobs:
  schumann:
    runs-on: ubuntu-latest

    steps:
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      - name: üì• Checkout repo
        uses: actions/checkout@v3

      # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Python 3.11
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt
      - name: üì¶ Install dependencies
        run: |
          pip install -r requirements.txt
          pip install beautifulsoup4  # –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω sosrff.tsu.ru)

      # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞ –®—É–º–∞–Ω–∞
      - name: üöÄ Fetch Schumann point
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python - <<EOF
          import json
          import time
          import requests
          from pathlib import Path
          from utils import _get
          from telegram import Bot
          from bs4 import BeautifulSoup

          def _fetch_schumann_data(url, attempts=5, backoff=2.0, timeout=45):
              for i in range(attempts):
                  try:
                      # –ò—Å–ø–æ–ª—å–∑—É–µ–º requests –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è timeout
                      response = requests.get(url, timeout=timeout, headers={"User-Agent": "VayboMeter/1.0"})
                      response.raise_for_status()
                      data = response.json() if url.endswith('.json') else response.text
                      print(f"Raw response from {url}: {data[:200]}...")
                      if data:
                          print(f"Success: Got data from {url}")
                          return data
                      print(f"Retry {i+1}/{attempts} for {url} after {backoff**i}s")
                      time.sleep(backoff**i)
                  except Exception as e:
                      print(f"Retry {i+1}/{attempts} failed for {url}: {e}")
                      time.sleep(backoff**i)
              print(f"All attempts failed for {url}")
              return {}

          try:
              # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ URL
              urls = [
                  "https://api.glcoherence.org/v1/earth",
                  "https://api.codetabs.com/v1/proxy?quest=https://api.glcoherence.org/v1/earth",
                  "https://thingproxy.freeboard.io/fetch/https://api.glcoherence.org/v1/earth",
                  "https://api.allorigins.win/raw?url=https://api.glcoherence.org/v1/earth"
              ]
              data = {}
              freq = None
              amp = None

              # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON API
              for url in urls:
                  data = _fetch_schumann_data(url)
                  if isinstance(data, dict):
                      freq = data.get("data", {}).get("sr1", {}).get("frequency_1") or data.get("frequency")
                      amp = data.get("data", {}).get("sr1", {}).get("amplitude_1") or data.get("amplitude")
                      if freq and amp:
                          break

              # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –ø–∞—Ä—Å–∏–Ω–≥ HTML —Å sosrff.tsu.ru
              if not (freq and amp):
                  try:
                      html = _fetch_schumann_data("https://sosrff.tsu.ru/?page_id=258")
                      if html and isinstance(html, str):
                          soup = BeautifulSoup(html, "html.parser")
                          # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ (–Ω—É–∂–µ–Ω —Ç–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞)
                          freq_elem = soup.select_one("selector-for-frequency")  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                          amp_elem = soup.select_one("selector-for-amplitude")  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                          freq = freq_elem.text.strip() if freq_elem else None
                          amp = amp_elem.text.strip() if amp_elem else None
                          print(f"Parsed from sosrff.tsu.ru: freq={freq}, amp={amp}")
                  except Exception as e:
                      print(f"Failed to parse sosrff.tsu.ru: {e}")

              if not (freq and amp):
                  # Fallback –Ω–∞ –∫—ç—à
                  cache = Path("schumann_hourly.json")
                  if cache.exists():
                      arr = json.loads(cache.read_text())
                      if arr:
                          last = arr[-1]
                          freq, amp = last["freq"], last["amp"]
                          print("Using cached data:", last)
                      else:
                          print("Cache exists but is empty")
                  else:
                      print("No cache file found")
                      # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–±–æ–µ
                      if "${{ env.TELEGRAM_BOT_TOKEN }}" and "${{ env.TELEGRAM_CHAT_ID }}":
                          try:
                              bot = Bot(token="${{ env.TELEGRAM_BOT_TOKEN }}")
                              bot.send_message(
                                  chat_id="${{ env.TELEGRAM_CHAT_ID }}",
                                  text="‚ö†Ô∏è Schumann API failed: No data from any URL or cache."
                              )
                          except Exception as e:
                              print(f"Failed to send Telegram notification: {e}")

              if freq and amp:
                  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É
                  rec = {"ts": int(time.time()), "freq": float(freq), "amp": float(amp)}
                  cache = Path("schumann_hourly.json")
                  arr = json.loads(cache.read_text()) if cache.exists() else []
                  arr.append(rec)
                  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 7 –¥–Ω—è–º–∏
                  cutoff = int(time.time()) - 7*24*3600
                  arr = [r for r in arr if r["ts"] >= cutoff]
                  cache.write_text(json.dumps(arr, ensure_ascii=False))
                  print("Saved Schumann point:", rec)
                  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
                  if "${{ env.TELEGRAM_BOT_TOKEN }}" and "${{ env.TELEGRAM_CHAT_ID }}":
                      if float(freq) > 8.0 or float(amp) > 100.0:
                          try:
                              bot = Bot(token="${{ env.TELEGRAM_BOT_TOKEN }}")
                              bot.send_message(
                                  chat_id="${{ env.TELEGRAM_CHAT_ID }}",
                                  text=f"üö® High Schumann! Freq: {freq} Hz, Amp: {amp}"
                              )
                          except Exception as e:
                              print(f"Failed to send Telegram notification: {e}")
              else:
                  print("No valid freq/amp data received, even from cache")
          except Exception as e:
              print(f"Error fetching Schumann data: {e}")
              if "${{ env.TELEGRAM_BOT_TOKEN }}" and "${{ env.TELEGRAM_CHAT_ID }}":
                  try:
                      bot = Bot(token="${{ env.TELEGRAM_BOT_TOKEN }}")
                      bot.send_message(
                          chat_id="${{ env.TELEGRAM_CHAT_ID }}",
                          text=f"‚ö†Ô∏è Schumann script error: {e}"
                      )
                  except Exception as e:
                      print(f"Failed to send Telegram notification: {e}")
          EOF

      # –ö–æ–º–º–∏—Ç–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª –∫—ç—à–∞
      - name: üóÇÔ∏è Commit cache
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "schumann: add hourly point"
          file_pattern: "schumann_hourly.json"
