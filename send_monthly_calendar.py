#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–µ—Å—è—á–Ω—ã–π –∞—Å—Ç—Ä–æ–∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ Telegram-–∫–∞–Ω–∞–ª
"""

import os, json, html, asyncio
from pathlib import Path
from collections import OrderedDict, defaultdict
import pendulum
from telegram import Bot, error as tg_err

TOKEN   = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = int(os.getenv("CHANNEL_ID", "0"))
TZ      = pendulum.timezone("Asia/Nicosia")

EMOJI = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ":"üåë","–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø":"üåí","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåì","–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞":"üåî",
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":"üåï","–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞":"üåñ","–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåó","–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø":"üåò"
}

def fmt_range(ds, de):
    s, e = pendulum.parse(ds, tz=TZ), pendulum.parse(de, tz=TZ)
    if s.month != e.month:
        return f"{s.day} {s.format('MMM')}‚Äì{e.day} {e.format('MMM')}"
    return f"{s.day}‚Äì{e.day}\u00A0{s.format('MMM', locale='ru')}".lower()

def build_message(data: dict):
    ordered, voc_list = OrderedDict(), []
    for day, rec in data.items():
        name = rec["phase_name"]
        if name not in ordered:
            ordered[name] = {"emoji": EMOJI.get(name,""), "dates":[day], "desc":rec["long_desc"]}
        else:
            ordered[name]["dates"].append(day)

        v = rec["void_of_course"]
        if v["start"] and v["end"]:
            voc_list.append((v["start"], v["end"]))

    first_date = next(iter(data))
    month_ru   = pendulum.parse(first_date).format("MMMM YYYY", locale="ru").upper()
    out = [f"<b>üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {month_ru}</b>\n"]

    for seg in ordered.values():
        seg["dates"].sort()
        rng = fmt_range(seg["dates"][0], seg["dates"][-1])
        out.append(f"{seg['emoji']} <b>{rng}</b>")
        out.append(f"<i>{html.escape(seg['desc'])}</i>\n")

    any_day = next(iter(data.values()))
    fav, unf = any_day["favorable_days"], any_day["unfavorable_days"]
    def lst(L): return ", ".join(map(str,L)) if L else "‚Äî"

    out.append(f"‚úÖ <b>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏:</b> {lst(fav['general']['favorable'])}")
    out.append(f"‚ùå <b>–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ:</b> {lst(unf['general']['unfavorable'])}\n")

    icons = {"haircut":"‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∏","travel":"‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
             "shopping":"üõçÔ∏è –ü–æ–∫—É–ø–∫–∏","health":"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ"}
    for k,lbl in icons.items():
        out.append(f"{lbl}: {lst(fav[k]['favorable'])}")

    # --- –ø–æ—è—Å–Ω–µ–Ω–∏–µ + –ø–µ—Ä–µ—á–µ–Ω—å VoC ---
    out.append(
        "\n<i>Void-of-Course ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç—Ä–µ–∑–æ–∫, –∫–æ–≥–¥–∞ –õ—É–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ "
        "–∞—Å–ø–µ–∫—Ç—ã –≤ –∑–Ω–∞–∫–µ –∏ –µ—â—ë –Ω–µ –≤–æ—à–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π. –í —ç—Ç–æ –≤—Ä–µ–º—è —ç–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Å–µ—è–Ω–∞, "
        "–ø–æ—ç—Ç–æ–º—É —Å—Ç–∞—Ä—Ç –≤–∞–∂–Ω—ã—Ö –¥–µ–ª –ª—É—á—à–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏.</i>\n")
    if voc_list:
        out.append("üï≥Ô∏è <b>Void-of-Course –≤ –º–µ—Å—è—Ü–µ:</b>")
        for s,e in voc_list:
            st = pendulum.parse(s).format('DD.MM HH:mm')
            en = pendulum.parse(e).format('DD.MM HH:mm')
            out.append(f"‚Ä¢ {st} ‚Üí {en}")
    return "\n".join(out)

async def main():
    fn = Path("lunar_calendar.json")
    if not fn.exists():
        print("‚ùå lunar_calendar.json not found")
        return
    txt = build_message(json.loads(fn.read_text("utf-8")))
    bot = Bot(TOKEN)
    try:
        await bot.send_message(CHAT_ID, txt, parse_mode="HTML",
                               disable_web_page_preview=True)
        print("‚úÖ monthly post sent")
    except tg_err.TelegramError as e:
        print("‚ùå Telegram error:", e)

if __name__ == "__main__":
    asyncio.run(main())