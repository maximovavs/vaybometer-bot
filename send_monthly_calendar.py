#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
send_monthly_calendar.py (Cyprus-ready)

–ü–æ—Å—Ç–∏—Ç –º–µ—Å—è—á–Ω—ã–π –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ Telegram.
–†–∞–±–æ—Ç–∞–µ—Ç –∏ —Å –∫–∏–ø—Ä—Å–∫–∏–º–∏, –∏ —Å –∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.

–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞:
1) CHANNEL_ID_OVERRIDE (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
2) –ï—Å–ª–∏ TO_TEST ‚àà {1,true,yes,on} ‚Üí CHANNEL_ID_TEST
3) –ò–Ω–∞—á–µ ‚Üí CHANNEL_ID
–§–æ–ª–±—ç–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: *_KLG.

–¢–æ–∫–µ–Ω:
- TELEGRAM_TOKEN (–æ—Å–Ω–æ–≤–Ω–æ–π)
- fallback: TELEGRAM_TOKEN_KLG

–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç:
1) –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –º–µ—Å—è—Ü–∞
2) –§–∞–π–ª lunar_calendar.json –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
"""

from __future__ import annotations
import os
import json
from pathlib import Path
from typing import Any, Dict, List, Tuple

import requests
import pendulum

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ env / –∫–æ–Ω—Ñ–∏–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _envb(name: str) -> bool:
    return (os.getenv(name, "").strip().lower() in ("1", "true", "yes", "on"))

TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("TELEGRAM_TOKEN_KLG") or ""
if not TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω (–∏–ª–∏ TELEGRAM_TOKEN_KLG)")

OVERRIDE = (os.getenv("CHANNEL_ID_OVERRIDE") or "").strip()
TO_TEST  = _envb("TO_TEST")

CHAT = ""
if OVERRIDE:
    CHAT = OVERRIDE
else:
    if TO_TEST:
        CHAT = os.getenv("CHANNEL_ID_TEST", "")
        if not CHAT:
            # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å KLD
            CHAT = os.getenv("CHANNEL_ID_TEST_KLG", "")
    if not CHAT:
        CHAT = os.getenv("CHANNEL_ID", "") or os.getenv("CHANNEL_ID_KLG", "")

if not CHAT:
    raise RuntimeError("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω (–∏–ª–∏ CHANNEL_ID_KLG), –∞ —Ç–∞–∫–∂–µ –Ω–µ—Ç CHANNEL_ID_TEST –ø—Ä–∏ TO_TEST=1")

TZ = pendulum.timezone(os.getenv("TZ", "Asia/Nicosia"))
JSON_PATH = Path(os.getenv("LUNAR_JSON_PATH", "lunar_calendar.json"))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

RUS_MONTHS_NOM = {
    1: "—è–Ω–≤–∞—Ä—å", 2: "—Ñ–µ–≤—Ä–∞–ª—å", 3: "–º–∞—Ä—Ç", 4: "–∞–ø—Ä–µ–ª—å",
    5: "–º–∞–π", 6: "–∏—é–Ω—å", 7: "–∏—é–ª—å", 8: "–∞–≤–≥—É—Å—Ç",
    9: "—Å–µ–Ω—Ç—è–±—Ä—å", 10: "–æ–∫—Ç—è–±—Ä—å", 11: "–Ω–æ—è–±—Ä—å", 12: "–¥–µ–∫–∞–±—Ä—å",
}

PHASE_EMO = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ":"üåë","–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø":"üåí","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåì","–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞":"üåî",
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":"üåï","–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞":"üåñ","–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåó","–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø":"üåò",
}

def tg(method: str, **data: Any) -> Dict[str, Any]:
    url = f"https://api.telegram.org/bot{TOKEN}/{method}"
    r = requests.post(url, data=data, timeout=30)
    r.raise_for_status()
    return r.json()

def tg_send_message(chat_id: str, text: str, parse_mode: str = "HTML", disable_web_page_preview: bool = True):
    return tg("sendMessage", chat_id=chat_id, text=text, parse_mode=parse_mode,
              disable_web_page_preview=str(disable_web_page_preview).lower())

def tg_send_document(chat_id: str, file_path: Path, caption: str = ""):
    url = f"https://api.telegram.org/bot{TOKEN}/sendDocument"
    with file_path.open("rb") as f:
        files = {"document": (file_path.name, f, "application/json")}
        data = {"chat_id": chat_id, "caption": caption}
        r = requests.post(url, data=data, files=files, timeout=60)
        r.raise_for_status()
        return r.json()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _summarize_calendar(cal: Dict[str, Any]) -> str:
    days: Dict[str, Any] = cal.get("days", {})
    if not days:
        return "üåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b>\n–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    # –æ–ø—Ä–µ–¥–µ–ª–∏–º –º–µ—Å—è—Ü/–≥–æ–¥ –ø–æ –ª—é–±–æ–π –¥–∞—Ç–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    sample_date = sorted(days.keys())[0]
    dt = pendulum.parse(sample_date, tz=TZ)
    month_name = RUS_MONTHS_NOM.get(dt.month, f"{dt.month:02d}")
    year = dt.year

    # —Å–æ–±–µ—Ä—ë–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∑—ã –∏ –¥–∞—Ç—ã
    phase_dates: Dict[str, List[int]] = {k: [] for k in ("–ù–æ–≤–æ–ª—É–Ω–∏–µ","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å","–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ","–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å")}
    for dstr, rec in sorted(days.items()):
        ph = str(rec.get("phase_name") or "")
        if ph in phase_dates:
            phase_dates[ph].append(int(dstr[-2:]))

    # VoC —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    month_voc = cal.get("month_voc", []) or []
    voc_lines: List[str] = []
    for it in month_voc[:5]:
        s, e = it.get("start"), it.get("end")
        if s and e:
            voc_lines.append(f"‚Ä¢ {s}‚Äì{e}")

    lines: List[str] = []
    lines.append(f"üåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {month_name} {year}</b>")
    lines.append("")
    for name in ("–ù–æ–≤–æ–ª—É–Ω–∏–µ","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å","–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ","–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"):
        dates = phase_dates[name]
        if dates:
            emo = PHASE_EMO.get(name, "‚Ä¢")
            lines.append(f"{emo} <b>{name}:</b> " + ", ".join(str(x) for x in dates))
    if month_voc:
        lines.append("")
        lines.append(f"‚ö´Ô∏è <b>Void of Course</b> ‚Äî –≤—Å–µ–≥–æ: {len(month_voc)}")
        lines.extend(voc_lines)
    lines.append("")
    lines.append("–§–∞–π–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏.")
    return "\n".join(lines)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def main() -> None:
    if not JSON_PATH.exists():
        raise FileNotFoundError(f"{JSON_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ lunar_calendar.json")

    cal = json.loads(JSON_PATH.read_text(encoding="utf-8"))
    text = _summarize_calendar(cal)

    # 1) –¢–µ–∫—Å—Ç
    print(f"‚Üí Sending to chat: {CHAT}")
    tg_send_message(CHAT, text)

    # 2) –î–æ–∫—É–º–µ–Ω—Ç
    tg_send_document(CHAT, JSON_PATH, caption="lunar_calendar.json")

if __name__ == "__main__":
    main()