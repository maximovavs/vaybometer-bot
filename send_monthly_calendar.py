#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ß–∏—Ç–∞–µ—Ç lunar_calendar.json –∏ –ø—É–±–ª–∏–∫—É–µ—Ç ¬´–∫—Ä–∞—Å–∏–≤—ã–π¬ª –ø–æ—Å—Ç –Ω–∞ –º–µ—Å—è—Ü.
"""

import os, json, asyncio, html
from pathlib import Path
import pendulum
from telegram import Bot, error as tg_err

TOKEN   = os.getenv("TELEGRAM_TOKEN","")
CHAT_ID = int(os.getenv("CHANNEL_ID","0"))
TZ      = pendulum.timezone("Asia/Nicosia")

EMO   = { "–ù–æ–≤–æ–ª—É–Ω–∏–µ":"üåë","–†–∞—Å—Ç—É—â–∏–π":"üåí","–ü–µ—Ä–≤–∞—è":"üåì","–†–∞—Å—Ç—É—â–∞—è":"üåî",
          "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":"üåï","–£–±—ã–≤–∞—é—â–∞—è":"üåñ","–ü–æ—Å–ª–µ–¥–Ω—è—è":"üåó","–£–±—ã–≤–∞—é—â–∏–π":"üåò" }

def fmt_dates(lst):
    if len(lst)==1: return lst[0]
    return f"{lst[0]}‚Äì{lst[-1]}"

def build_message(data:dict)->str:
    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã
    days = sorted(data.keys())
    year_month = pendulum.parse(days[0]).in_tz(TZ).format("MMMM YYYY").upper()
    lines=[f"<b>üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {html.escape(year_month)}</b>"]
    # ‚îÄ‚îÄ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º
    seg=[]
    cur=None
    for d in days:
        name=data[d]["phase"].split()[1]   # –±–µ–∑ emoji
        if cur is None or cur["name"]!=name:
            cur={"name":name,"emoji":data[d]["phase"].split()[0],
                 "dates":[d],"desc":data[d]["long_desc"]}
            seg.append(cur)
        else:
            cur["dates"].append(d)
    # ‚îÄ‚îÄ –≤—ã–≤–æ–¥
    for s in seg:
        rng=fmt_dates([pendulum.parse(x).format('D MMM') for x in s["dates"]])
        lines.append("")
        lines.append(f"<b>{s['emoji']} {s['name']}</b> ‚Ä¢ {rng}")
        lines.append(f"{html.escape(s['desc'])}")
    lines.append("")
    # ‚îÄ‚îÄ –∫—Ä–∞—Ç–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö
    first=data[days[0]]
    fav=first["favorable_days"]; unf=first["unfavorable_days"]
    def cat(icon,key): 
        arr=fav.get(key,[])
        if not arr: return ""
        return f"{icon} <b>{key.capitalize()}:</b> {', '.join(map(str,arr))}"
    lines.append(f"‚úÖ <b>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏:</b> {', '.join(map(str,fav['general']))}")
    lines.append(f"‚ùå <b>–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ:</b> {', '.join(map(str,unf['general']))}")
    lines.append(cat("‚úÇÔ∏è","haircut"))
    lines.append(cat("‚úàÔ∏è","travel"))
    lines.append(cat("üõçÔ∏è","shopping"))
    lines.append(cat("‚ù§Ô∏è","health"))
    lines.append("")
    lines.append("<i>Void-of-Course</i> ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç—Ä–µ–∑–æ–∫, –∫–æ–≥–¥–∞ –õ—É–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã "
                 "–≤ –∑–Ω–∞–∫–µ –∏ –µ—â—ë –Ω–µ –≤–æ—à–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π. –í —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ —Å—Ç–∞—Ä—Ç—É—é—Ç –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞.")
    return "\n".join([l for l in lines if l.strip()])

async def main():
    if not Path("lunar_calendar.json").exists():
        print("No calendar.")
        return
    data=json.loads(Path("lunar_calendar.json").read_text('utf-8'))
    msg=build_message(data)
    try:
        await Bot(TOKEN).send_message(CHAT_ID,msg,parse_mode="HTML",disable_web_page_preview=True)
        print("‚úÖ posted")
    except tg_err.TelegramError as e:
        print("‚ùå Telegram error:",e)

if __name__=="__main__":
    asyncio.run(main())