#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –≤ Telegram."""

import os, json, asyncio
from pathlib import Path
from collections import OrderedDict

import pendulum
from telegram import Bot, error as tg_err

TOKEN   = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID = int(os.getenv("CHANNEL_ID", 0))
TZ      = pendulum.timezone("Asia/Nicosia")

ICON_PHASE = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ":"üåë","–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø":"üåí","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåì",
    "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞":"üåî","–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":"üåï","–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞":"üåñ",
    "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåó","–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø":"üåò",
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def header(first_date:str)->str:
    month_year = pendulum.parse(first_date).in_tz(TZ).format("MMMM YYYY").upper()
    return f"üåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {month_year}</b> (Asia/Nicosia)"

def group_by_phase(data:dict)->list[dict]:
    segs, last=None, None
    segs=[]
    for dstr, rec in data.items():
        name = rec["phase"].split(" –≤ ")[0]
        if name!=last:
            segs.append({
                "icon": ICON_PHASE.get(name,"‚óªÔ∏è"),
                "title": rec["phase"],
                "phase_time": rec.get("phase_time",""),
                "first": dstr, "last": dstr,
                "vc":   rec.get("void_of_course",{}),
                "advice": (rec.get("advice") or [""])[0],
            }); last=name
        else:
            segs[-1]["last"]=dstr
    return segs

def fmt_seg(s:dict)->str:
    start = pendulum.parse(s["first"]).format("D.MM")
    end   = pendulum.parse(s["last"]).format("D.MM")
    pt    = pendulum.parse(s["phase_time"]).in_tz(TZ).format("DD.MM HH:mm") if s["phase_time"] else "‚Äî"
    lines=[f"<b>{s['icon']} {s['title']}</b> ({pt}; {start}‚Äì{end})"]
    if s["vc"].get("start") and s["vc"].get("end"):
        lines.append(f"Void-of-Course: {s['vc']['start']} ‚Üí {s['vc']['end']}")
    if s["advice"]:
        lines.append(s["advice"])
    return "\n".join(lines)

def build_summary(sample:dict)->list[str]:
    fav = sample.get("favorable_days",{})
    unf = sample.get("unfavorable_days",{})
    def j(lst): return ", ".join(map(str,sorted(lst))) if lst else "‚Äî"
    lines=["", f"‚úÖ <b>–û–±—â–∏–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞:</b> {j(fav.get('general',[]))}"]
    if unf.get("general"):
        lines.append(f"‚ùå <b>–û–±—â–∏–µ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞:</b> {j(unf['general'])}")
    icons={"haircut":"‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∏","travel":"‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
           "shopping":"üõçÔ∏è –ü–æ–∫—É–ø–∫–∏","health":"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ"}
    for k,lbl in icons.items():
        if fav.get(k):
            lines.append(f"{lbl}: {j(fav[k])}")
    return lines

def build_message(data:dict)->str:
    data=OrderedDict(sorted(data.items()))
    segs=group_by_phase(data)
    lines=[header(next(iter(data))),""]
    for s in segs: lines+= [fmt_seg(s), "‚Äî"]
    if lines[-1]=="‚Äî": lines.pop()
    lines+=build_summary(next(iter(data.values())))
    lines+=["",
        "<i><b>–ß—Ç–æ —Ç–∞–∫–æ–µ Void-of-Course?</b></i>",
        ("Void-of-Course ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª, –∫–æ–≥–¥–∞ –õ—É–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã "
         "–≤ —Ç–µ–∫—É—â–µ–º –∑–Ω–∞–∫–µ –∏ –µ—â—ë –Ω–µ –≤–æ—à–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π. –≠–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Å–µ–∏–≤–∞–µ—Ç—Å—è, "
         "–ø–æ—ç—Ç–æ–º—É —Å—Ç–∞—Ä—Ç –≤–∞–∂–Ω—ã—Ö –¥–µ–ª, –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ "
         "–ª—É—á—à–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –Ω–∞ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è V/C.")
    ]
    return "\n".join(lines)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main():
    cal_file=Path(__file__).parent/"lunar_calendar.json"
    if not cal_file.exists():
        print("‚ùå lunar_calendar.json not found"); return
    data=json.loads(cal_file.read_text(encoding="utf-8"))
    text=build_message(data)

    bot=Bot(TOKEN)
    try:
        while text:
            chunk,text=text[:4000],text[4000:]
            await bot.send_message(CHAT_ID,chunk,
                parse_mode="HTML",disable_web_page_preview=True)
        print("‚úÖ Monthly message sent")
    except tg_err.TelegramError as e:
        print(f"‚ùå Telegram error: {e}")

if __name__=="__main__":
    asyncio.run(main())
