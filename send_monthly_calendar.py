#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
send_monthly_calendar.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∫–∞–Ω–∞–ª –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç
–ø–æ –ª—É–Ω–Ω—ã–º —Ñ–∞–∑–∞–º, Void-of-Course –∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–º –¥–Ω—è–º.
"""

import os
import json
import asyncio
from pathlib import Path
from collections import OrderedDict, defaultdict
from typing import Dict, List, Any

import pendulum
from telegram import Bot, error as tg_err

# ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOKEN   = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID = int(os.getenv("CHANNEL_ID", 0))
TZ      = pendulum.timezone("Asia/Nicosia")

# ‚îÄ‚îÄ‚îÄ –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def iso_to_tz(dt_iso: str) -> pendulum.DateTime:
    """ISO-—Å—Ç—Ä–æ–∫–∞ ‚Üí pendulum –≤ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–π–º-–∑–æ–Ω–µ."""
    return pendulum.parse(dt_iso).in_tz(TZ)

def short(dt: pendulum.DateTime) -> str:
    """–ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç D.MM HH:mm."""
    return dt.format("D.MM HH:mm")

# ‚îÄ‚îÄ‚îÄ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_monthly_message(data: Dict[str, Any]) -> str:
    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–∞—Ç
    ordered = OrderedDict(sorted(data.items()))
    first_date = next(iter(ordered))
    month_year = pendulum.parse(first_date).in_tz(TZ).format("MMMM YYYY").upper()

    lines: List[str] = [f"üåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {month_year}</b>", ""]

    # 1. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–∑—ã
    segments: List[Dict[str, Any]] = []
    for date_str, rec in ordered.items():
        phase_name = rec["phase"].split(" –≤ ")[0]  # ¬´–ù–æ–≤–æ–ª—É–Ω–∏–µ¬ª, ¬´–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ¬ª ‚Ä¶
        if segments and segments[-1]["phase_name"] == phase_name:
            segments[-1]["dates"].append(date_str)
        else:
            segments.append({
                "phase_name": phase_name,
                "phase":      rec["phase"],         # –ø–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                "phase_time": iso_to_tz(rec["phase_time"]),
                "dates":      [date_str],
                "vc":         rec["void_of_course"],
                "advice":     rec["advice"][0] if rec.get("advice") else "",
            })

    # 2. –ë–ª–æ–∫–∏ –ø–æ —Ñ–∞–∑–∞–º
    for seg in segments:
        start_date = pendulum.parse(seg["dates"][0]).in_tz(TZ)
        end_date   = pendulum.parse(seg["dates"][-1]).in_tz(TZ)
        dt_range   = f"{start_date.format('D.MM')}‚Äì{end_date.format('D.MM')}" \
                     if start_date != end_date else start_date.format("D.MM")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–∑—ã —Å % –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏ —É–∂–µ –≤–Ω—É—Ç—Ä–∏ seg["phase"]
        lines.append(f"<b>{seg['phase']}</b> "
                     f"({seg['phase_time'].format('DD.MM HH:mm')}; {dt_range})")

        # Void-of-Course
        vc = seg["vc"]
        if vc and vc["start"] and vc["end"]:
            lines.append(f"Void-of-Course: {vc['start']} ‚Üí {vc['end']}")

        # –°–æ–≤–µ—Ç
        if seg["advice"]:
            lines.append(seg["advice"])

        lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    # 3. –°–≤–æ–¥–Ω—ã–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ / –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏
    fav_acc   = defaultdict(set)
    unfav_acc = defaultdict(set)
    for rec in data.values():
        for cat, arr in rec["favorable_days"].items():
            fav_acc[cat].update(arr)
        for cat, arr in rec["unfavorable_days"].items():
            unfav_acc[cat].update(arr)

    def fmt(cat_set):  # –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        return ", ".join(map(str, sorted(cat_set))) if cat_set else "‚Äî"

    lines.append("‚úÖ <b>–û–±—â–∏–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞:</b> " +
                 fmt(fav_acc["general"]))
    if unfav_acc["general"]:
        lines.append("‚ùå <b>–û–±—â–∏–µ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞:</b> " +
                     fmt(unfav_acc["general"]))

    cat_labels = {
        "haircut":  "‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∏",
        "travel":   "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
        "shopping": "üõçÔ∏è –ü–æ–∫—É–ø–∫–∏",
        "health":   "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ",
    }
    for cat, label in cat_labels.items():
        if fav_acc[cat]:
            lines.append(f"{label}: {fmt(fav_acc[cat])}")

    lines.append("")  # –æ—Ç—Å—Ç—É–ø –ø–µ—Ä–µ–¥ —Å–ø—Ä–∞–≤–∫–æ–π

    # 4. –ö–æ—Ä–æ—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –æ Void-of-Course
    lines.append("<i>–ß—Ç–æ —Ç–∞–∫–æ–µ Void-of-Course?</i>")
    lines.append(
        "Void-of-Course (–ø–µ—Ä–∏–æ–¥ ¬´–±–µ–∑ –∫—É—Ä—Å–∞¬ª) ‚Äî —ç—Ç–æ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –õ—É–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ "
        "–æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º –∑–Ω–∞–∫–µ –∏ –¥–æ –≤—Ö–æ–¥–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π –∑–Ω–∞–∫ –Ω–æ–≤—ã–µ "
        "–∞—Å–ø–µ–∫—Ç—ã –Ω–µ –æ–±—Ä–∞–∑—É–µ—Ç. –≠–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Å–µ–∏–≤–∞–µ—Ç—Å—è: –∏–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç–∞—Ä—Ç–∞ –≤–∞–∂–Ω—ã—Ö "
        "–¥–µ–ª, –ø–æ–∫—É–ø–æ–∫ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤. –ü–æ–ª–µ–∑–Ω—ã –æ—Ç–¥—ã—Ö, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ "
        "–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏; —Ä–µ—à–∞—é—â–∏–µ —à–∞–≥–∏ –ª—É—á—à–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ "
        "–æ–∫–æ–Ω—á–∞–Ω–∏—è V/C."
    )

    return "\n".join(lines)

# ‚îÄ‚îÄ‚îÄ –û—Ç–ø—Ä–∞–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    json_path = Path(__file__).parent / "lunar_calendar.json"
    if not json_path.exists():
        print("‚ùå lunar_calendar.json not found ‚Äî –æ—Ç–º–µ–Ω–∞.")
        return

    data = json.loads(json_path.read_text(encoding="utf-8"))
    message = build_monthly_message(data)

    bot = Bot(token=TOKEN)
    try:
        await bot.send_message(
            CHAT_ID,
            message,
            parse_mode="HTML",
            disable_web_page_preview=True,
        )
        print("‚úÖ Monthly calendar delivered")
    except tg_err.TelegramError as e:
        print(f"‚ùå Telegram error: {e}")

if __name__ == "__main__":
    asyncio.run(main())
