#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import asyncio
from pathlib import Path

import pendulum
from telegram import Bot, error as tg_err

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Configuration ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOKEN   = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID = int(os.getenv("CHANNEL_ID", 0))
TZ      = pendulum.timezone("Asia/Nicosia")


def build_monthly_message(data: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
    1) –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º/–≥–æ–¥–æ–º
    2) –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ (–æ–¥–Ω–∞ —Ñ–∞–∑–∞):
       ‚Ä¢ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã, –º–æ–º–µ–Ω—Ç, –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
       ‚Ä¢ Void-of-Course
       ‚Ä¢ –µ–¥–∏–Ω—ã–π —Å–æ–≤–µ—Ç (–ø–µ—Ä–≤—ã–π –∏–∑ advice)
    3) –°–≤–æ–¥–∫–∞ –ø–æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–º/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–º –¥–Ω—è–º
    4) –ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, —á—Ç–æ —Ç–∞–∫–æ–µ Void-of-Course
    """
    # 1) Header
    first_date = next(iter(data))
    month_year = pendulum.parse(first_date).in_tz(TZ).format("MMMM YYYY").upper()
    lines = [
        f"üåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {month_year}</b> <i>(Asia/Nicosia)</i>",
        ""
    ]

    # 2) Group by phase
    segments = []
    last_phase = None
    for date_str in sorted(data.keys()):
        rec = data[date_str]
        phase_name = rec["phase"].split(" –≤ ")[0]
        if phase_name != last_phase:
            segments.append({
                "phase":      rec["phase"],
                "phase_time": rec.get("phase_time"),
                "dates":      [date_str],
                "vc":         rec.get("void_of_course", {}),
                "advice":     rec.get("advice", [""])[0],
            })
            last_phase = phase_name
        else:
            segments[-1]["dates"].append(date_str)

    # 3) Render each segment
    for seg in segments:
        # format moment of phase
        pt_iso = seg["phase_time"]
        if pt_iso:
            dt = pendulum.parse(pt_iso).in_tz(TZ)
            time_str = dt.format("DD.MM HH:mm")
        else:
            time_str = ""
        start = pendulum.parse(seg["dates"][0]).in_tz(TZ).format("D.MM")
        end   = pendulum.parse(seg["dates"][-1]).in_tz(TZ).format("D.MM")
        lines.append(f"<b>{seg['phase']}</b> ({time_str}; {start}‚Äì{end})")

        # Void-of-Course
        vc = seg["vc"]
        if vc.get("start") and vc.get("end"):
            lines.append(f"<b>Void-of-Course:</b> {vc['start']} ‚Üí {vc['end']}")

        # Advice for the whole period
        lines.append(seg["advice"])
        lines.append("")  # blank line between segments

    # 4) Summary of favorable/unfavorable days
    first_key = first_date
    fav_gen = data[first_key]["favorable_days"].get("general", [])
    unf_gen = data[first_key]["unfavorable_days"].get("general", [])
    lines.append(f"‚úÖ <b>–û–±—â–∏–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞:</b> {', '.join(map(str, fav_gen))}")
    if unf_gen:
        lines.append(f"‚ùå <b>–û–±—â–∏–µ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞:</b> {', '.join(map(str, unf_gen))}")
    icons = {
        "haircut":  "‚úÇÔ∏è <b>–°—Ç—Ä–∏–∂–∫–∏:</b>",
        "travel":   "‚úàÔ∏è <b>–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:</b>",
        "shopping": "üõçÔ∏è <b>–ü–æ–∫—É–ø–∫–∏:</b>",
        "health":   "‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ:</b>",
    }
    for cat, label in icons.items():
        fav = data[first_key]["favorable_days"].get(cat, [])
        if fav:
            lines.append(f"{label} {', '.join(map(str, fav))}")

    # 5) Final explanation
    lines.append("")
    lines.append("<b>–ß—Ç–æ —Ç–∞–∫–æ–µ Void-of-Course?</b>")
    lines.append(
        "Void-of-Course (–ø–µ—Ä–∏–æ–¥ ¬´–±–µ–∑ –∫—É—Ä—Å–∞¬ª) ‚Äî —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç—Ä–µ–∑–æ–∫, –∫–æ–≥–¥–∞ –õ—É–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã "
        "–∏ –µ—â—ë –Ω–µ –≤–æ—à–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞. –≠–Ω–µ—Ä–≥–∏—è —Ç–∞–∫–∏—Ö –¥–Ω–µ–π —Ä–∞—Å—Å—Å–µ–∏–≤–∞–µ—Ç—Å—è –∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ "
        "–≤–∞–∂–Ω—ã—Ö –¥–µ–ª, –ø–æ–∫—É–ø–æ–∫ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤. –õ—É—á—à–µ –ø–æ—Å–≤—è—Ç–∏—Ç—å —ç—Ç–æ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö—É, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∏ "
        "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º, –∞ –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –ø–µ—Ä–∏–æ–¥—ã –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è V/C."
    )

    return "\n".join(lines)


async def main() -> None:
    path = Path(__file__).parent / "lunar_calendar.json"
    if not path.exists():
        print("‚ùå lunar_calendar.json not found.")
        return

    data = json.loads(path.read_text(encoding="utf-8"))
    msg  = build_monthly_message(data)

    bot = Bot(token=TOKEN)
    try:
        await bot.send_message(
            CHAT_ID,
            msg,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        print("‚úÖ Monthly calendar delivered")
    except tg_err.TelegramError as e:
        print(f"‚ùå Telegram error: {e}")


if __name__ == "__main__":
    asyncio.run(main())
