#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:
‚Ä¢ –±–ª–æ–∫–∞–º–∏ –ø–æ —Ñ–∞–∑–∞–º
‚Ä¢ –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ VoC
"""

import os, json, asyncio, html
from pathlib import Path
from collections import OrderedDict
import pendulum
from telegram import Bot, error as tg_err

TOKEN   = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = int(os.getenv("CHANNEL_ID", "0"))
TZ      = pendulum.timezone("Asia/Nicosia")

# ---------- helpers ----------
esc = lambda t: html.escape(t).replace("\xa0", " ")

def rng(a, b):
    pa, pb = (pendulum.parse(x).format("D.MM") for x in (a, b))
    return pa if pa == pb else f"{pa}‚Äì{pb}"

def summary(sample):
    fav, unf = sample["favorable_days"], sample["unfavorable_days"]
    g = lambda k, src: ", ".join(map(str, src.get(k, []))) or "‚Äî"
    parts = [
        f"‚úÖ <b>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏:</b> {esc(g('general', fav))}",
        f"‚ùå <b>–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ:</b> {esc(g('general', unf))}",
        "",
        f"‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∏: {esc(g('haircut', fav))}",
        f"‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: {esc(g('travel', fav))}",
        f"üõçÔ∏è –ü–æ–∫—É–ø–∫–∏: {esc(g('shopping', fav))}",
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {esc(g('health', fav))}",
        "",
        "<b>–ß—Ç–æ —Ç–∞–∫–æ–µ V/C?</b> "
        "V/C ‚Äî ¬´–±–µ–∑ –∫—É—Ä—Å–∞¬ª: –õ—É–Ω–∞ –±–µ–∑ –Ω–æ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –∏ –µ—â—ë –Ω–µ –≤ –Ω–æ–≤–æ–º –∑–Ω–∞–∫–µ. "
        "–õ—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å, –∞ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å."
    ]
    return "\n".join(parts)

# ---------- builder ----------
def build(cal: OrderedDict) -> str:
    first = next(iter(cal))
    head  = pendulum.parse(first).in_tz(TZ).format("MMMM YYYY").upper()
    out   = [f"üåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {esc(head)}</b>"]

    blocks, last = [], None
    for d, r in cal.items():
        name = r["phase"].split(" –≤ ")[0]
        if name != last:
            blocks.append({
                "label":  esc(r["phase"]),
                "start":  d, "end": d,
                "time":   esc(r["phase_time"][:16].replace('T',' ')),
                "vc":     r["void_of_course"],
                "tip":    esc(r["advice"][0] if r["advice"] else "‚Äî")
            })
            last = name
        else:
            blocks[-1]["end"] = d

    for b in blocks:
        vc   = b["vc"]
        vcln = (f
