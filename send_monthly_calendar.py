#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –º–µ—Å—è—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ä–µ–∑—é–º–µ –≤ Telegram
  ‚Ä¢ —Ä–∞–∑–±–∏–≤–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–∞–∑–∞–º (–±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –∑–Ω–∞–∫—É)
  ‚Ä¢ –∑–Ω–∞–∫–∏ –∑–∞ –≤–µ—Å—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–≤–æ–¥—è—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
  ‚Ä¢ —Å–ø–∏—Å–æ–∫ VoC —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã ‚â• 15 –º–∏–Ω—É—Ç
"""

import json, os, asyncio, textwrap
from pathlib import Path
import pendulum
from telegram import Bot          # python-telegram-bot ‚â• 20,<21

TZ               = pendulum.timezone("Asia/Nicosia")
MIN_VOC_MINUTES  = 15

EMO = {                 # —Ç–µ –∂–µ, —á—Ç–æ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ":"üåë","–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø":"üåí","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåì","–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞":"üåî",
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":"üåï","–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞":"üåñ","–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåó","–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø":"üåò"
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def load_calendar() -> dict:
    with open("lunar_calendar.json", encoding="utf-8") as f:
        return json.load(f)

def build_phase_blocks(data: dict) -> list[str]:
    """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Ä–µ–∑–∫–∏ —Å –æ–¥–Ω–æ–π —Ñ–∞–∑–æ–π.
       –ó–Ω–∞–∫ –õ—É–Ω—ã –±–µ—Ä—ë–º –∏–∑ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –∏ —Å–æ–±–∏—Ä–∞–µ–º set ‚Üí —Å—Ç—Ä–æ–∫—É."""
    days = sorted(data.keys())
    blocks = []
    start = days[0]
    cur_phase = data[start]["phase_name"]
    signs     = {data[start]["sign"]}

    for prev, cur in zip(days, days[1:]):
        if data[cur]["phase_name"] == cur_phase:
            signs.add(data[cur]["sign"])
            continue                       # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–æ—Ç –∂–µ –±–ª–æ–∫

        # —Ñ–∞–∑–∞ —Å–º–µ–Ω–∏–ª–∞—Å—å ‚Üí –∑–∞–≤–µ—Ä—à–∞–µ–º –±–ª–æ–∫
        blocks.append( (start, prev, cur_phase, sorted(signs),
                        data[start]["long_desc"].strip()) )
        # –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
        start, cur_phase, signs = cur, data[cur]["phase_name"], {data[cur]["sign"]}

    # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–≤–æ—Å—Ç
    blocks.append( (start, days[-1], cur_phase, sorted(signs),
                    data[start]["long_desc"].strip()) )
    return blocks

def fmt_date(d: str) -> str:
    dt = pendulum.parse(d)
    return dt.format("D")       # ¬´1¬ª, ¬´27¬ª ‚Ä¶ –Ω–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä

def build_voc_list(data: dict) -> list[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ ¬´‚Ä¢ 01.05 10:59 ‚Üí 01.05 12:10¬ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚â• MIN_VOC_MINUTES"""
    voc_lines = []
    for d in sorted(data.keys()):
        rec = data[d]["void_of_course"]
        if not rec or rec["start"] is None or rec["end"] is None:
            continue
        t1 = pendulum.parse(rec["start"]).in_tz(TZ)
        t2 = pendulum.parse(rec["end"  ]).in_tz(TZ)
        if (t2 - t1).in_minutes() < MIN_VOC_MINUTES:
            continue                           # —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        line = f"‚Ä¢ {t1.format('DD.MM HH:mm')}  ‚Üí  {t2.format('DD.MM HH:mm')}"
        voc_lines.append(line)
    return voc_lines

def build_message(data: dict) -> str:
    blocks = build_phase_blocks(data)

    # 1) –∑–∞–≥–æ–ª–æ–≤–æ–∫
    first_day = pendulum.parse(min(data.keys()))
    title = f"üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {first_day.format('MMMM YYYY', locale='ru')}\n"

    # 2) —Ñ–∞–∑–æ–≤—ã–µ –±–ª–æ–∫–∏
    phases_txt = []
    for start, end, name, signs, desc in blocks:
        rng   = f"{fmt_date(start)}‚Äì{fmt_date(end)} {first_day.format('MMMM', locale='ru')}"
        signs_str = ", ".join(signs)
        phases_txt.append(f"{EMO[name]} <b>{rng}</b> ({signs_str})\n<i>{desc}</i>")

    # 3) –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏ (–±–µ—Ä—ë–º –∏–∑ –ª—é–±–æ–≥–æ –¥–Ω—è ‚Äì –æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
    cats   = data[start]["favorable_days"]     # –ª—é–±–æ–π rec
    fav    = cats["general"]["favorable"]
    un_fav = cats["general"]["unfavorable"]
    cat_lines = [
        f"‚úÖ <b>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏:</b> {', '.join(map(str,fav))}",
        f"‚ùå <b>–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ:</b> {', '.join(map(str,un_fav))}",
    ]
    for key, emoji in [("haircut","‚úÇÔ∏è"),("travel","‚úàÔ∏è"),("shopping","üõçÔ∏è"),("health","‚ù§Ô∏è")]:
        vals = ", ".join(map(str, cats[key]["favorable"]))
        cat_lines.append(f"{emoji} {key.capitalize()}: {vals}")

    # 4) VoC
    voc_list = build_voc_list(data)
    voc_block = ""
    if voc_list:
        voc_block = "<b>üåì Void-of-Course:</b>\n" + "\n".join(voc_list) + \
                    "\n\n<i>Void-of-Course ‚Äî –ø–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ –õ—É–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –≤ –∑–Ω–∞–∫–µ –∏ –µ—â—ë –Ω–µ –≤–æ—à–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π; —ç–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Å–µ—è–Ω–∞, –Ω–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è –ª—É—á—à–µ –æ—Ç–ª–æ–∂–∏—Ç—å.</i>"

    # —Å–æ–±—Ä–∞—Ç—å –≤—Å—ë
    parts = [title, *phases_txt, *cat_lines]
    if voc_block:
        parts.append(voc_block)

    # Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤. ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–∂–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
    msg = "\n\n".join(parts)
    return textwrap.shorten(msg, width=4000, placeholder="‚Ä¶")   # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø—É–±–ª–∏–∫–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    token  = os.getenv("TELEGRAM_TOKEN")
    chat   = os.getenv("CHANNEL_ID")
    if not (token and chat):
        raise RuntimeError("TELEGRAM_TOKEN / CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")

    data = load_calendar()
    text = build_message(data)

    bot = Bot(token)
    await bot.send_message(chat_id=chat,
                           text=text,
                           parse_mode="HTML",
                           disable_web_page_preview=True)

if __name__ == "__main__":
    asyncio.run(main())