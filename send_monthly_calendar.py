#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os, json, asyncio, html
from pathlib import Path
from collections import OrderedDict
import pendulum
from telegram import Bot, error as tg_err

TOKEN   = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = int(os.getenv("CHANNEL_ID", "0"))
TZ      = pendulum.timezone("Asia/Nicosia")

# ---------- helpers ----------
def esc(t: str) -> str:           # HTML-escape + –Ω–µ–≤–∏–¥–∏–º—ã–π &nbsp;-> –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–±–µ–ª
    return html.escape(t).replace("\xa0", " ")

def fmt_range(a: str, b: str) -> str:
    pa = pendulum.parse(a).format("D.MM")
    pb = pendulum.parse(b).format("D.MM")
    return pa if pa == pb else f"{pa}‚Äì{pb}"

def build_summary(sample: dict) -> str:
    fav, unf = sample["favorable_days"], sample["unfavorable_days"]
    def lst(tag, src): return ", ".join(map(str, src.get(tag, []))) or "‚Äî"
    return "\n".join([
        f"‚úÖ <b>–û–±—â–∏–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞:</b> {esc(lst('general', fav))}",
        f"‚ùå <b>–û–±—â–∏–µ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞:</b> {esc(lst('general', unf))}",
        "",
        f"‚úÇÔ∏è <i>–°—Ç—Ä–∏–∂–∫–∏:</i> {esc(lst('haircut', fav))}",
        f"‚úàÔ∏è <i>–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:</i> {esc(lst('travel', fav))}",
        f"üõçÔ∏è <i>–ü–æ–∫—É–ø–∫–∏:</i> {esc(lst('shopping', fav))}",
        f"‚ù§Ô∏è <i>–ó–¥–æ—Ä–æ–≤—å–µ:</i> {esc(lst('health', fav))}",
        "",
        "<b>–ß—Ç–æ —Ç–∞–∫–æ–µ Void-of-Course?</b>",
        esc("Void-of-Course ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª, –∫–æ–≥–¥–∞ –õ—É–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ "
            "–∞—Å–ø–µ–∫—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º –∑–Ω–∞–∫–µ –∏ –µ—â—ë –Ω–µ –≤–æ—à–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π. –í —ç—Ç–æ –≤—Ä–µ–º—è "
            "—ç–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Å–µ—è–Ω–∞, –ø–æ—ç—Ç–æ–º—É —Å—Ç–∞—Ä—Ç –≤–∞–∂–Ω—ã—Ö –¥–µ–ª, –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤ "
            "–∏ –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –ª—É—á—à–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è V/C.")
    ])

# ---------- main builder ----------
def build_month_message(cal: OrderedDict) -> str:
    first = next(iter(cal))
    header = pendulum.parse(first).in_tz(TZ).format("MMMM YYYY").upper()
    lines  = [f"üåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {esc(header)}</b>"]

    segs, last = [], None
    for d, rec in cal.items():
        name = rec["phase"].split(" –≤ ")[0]
        if name != last:
            segs.append({
                "label":  esc(rec["phase"]),
                "start":  d,
                "end":    d,
                "time":   esc(rec["phase_time"][:16].replace('T',' ')),
                "vc":     rec["void_of_course"],
                "tip":    esc(rec["advice"][0] if rec["advice"] else "‚Ä¶")
            })
            last = name
        else:
            segs[-1]["end"] = d

    for s in segs:
        rng = fmt_range(s["start"], s["end"])
        vc  = s["vc"]
        vc_line = (f"\n<i>Void-of-Course:</i> {esc(vc['start'])} ‚Üí {esc(vc['end'])}"
                   if vc.get("start") and vc.get("end") else "")
        lines.append(
            f"\n<b>{s['label']}</b> ({s['time']}; {rng})"
            f"{vc_line}\n{s['tip']}"
        )

    lines.append("\n" + build_summary(next(iter(cal.values()))))
    return "\n".join(lines)

# ---------- telegram send ----------
async def main() -> None:
    path = Path(__file__).parent / "lunar_calendar.json"
    if not path.exists():
        print("lunar_calendar.json not found"); return
    data = json.loads(path.read_text('utf-8'), object_pairs_hook=OrderedDict)
    txt  = build_month_message(data)

    bot = Bot(TOKEN)
    try:
        await bot.send_message(
            CHAT_ID, txt,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        print("‚úÖ monthly calendar sent")
    except tg_err.TelegramError as e:
        print("‚ùå Telegram error:", e)

if __name__ == "__main__":
    asyncio.run(main())
