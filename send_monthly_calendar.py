#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
send_monthly_calendar.py  ‚ñ∏  —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∫–∞–Ω–∞–ª
¬´–æ–±—ä—ë–º–Ω–æ-–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π¬ª –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –º–µ—Å—è—Ü.
–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —É–∂–µ –ª–µ–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π lunar_calendar.json.
"""

import json
import os
import asyncio
from pathlib import Path
from collections import defaultdict

import pendulum
from telegram import Bot, error as tg_err

TZ       = pendulum.timezone("Asia/Nicosia")
TOKEN    = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID  = int(os.getenv("CHANNEL_ID", 0))

# ---------------------------------------------------------------------------


def normalize_tip(text: str) -> str:
    """
    –ß–∏—Å—Ç–∏–º GPT-—Ñ—Ä–∞–∑—ã –≤–∏–¥–∞ ¬´–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç —Ç—Ä–∏ —Å–æ–≤–µ—Ç–∞‚Ä¶¬ª.
    –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –æ—Å–º—ã—Å–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É.
    """
    txt = text.strip()
    for bad in ("–∫–æ–Ω–µ—á–Ω–æ", "–≤–æ—Ç", "—Å–æ–≤–µ—Ç", "recommend", "tip"):
        if bad.lower() in txt.lower()[:30]:
            # —É–±–∏—Ä–∞–µ–º –≤—Å—ë –¥–æ –ø–µ—Ä–≤–æ–≥–æ ¬´:¬ª
            if ":" in txt:
                txt = txt.split(":", 1)[1].lstrip()
    return txt.rstrip("‚Ä¶").strip()


def group_by_phase(data: dict) -> list[dict]:
    """
    –ü—Ä–æ—Ö–æ–¥–∏–º –¥–∞—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É, —Å–∫–ª–µ–∏–≤–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –¥–Ω–∏
    —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∞–∑—ã (–±–µ–∑ –∑–Ω–∞–∫–∞).
    """
    dates_sorted = sorted(data.keys())
    segments: list[dict] = []
    current = None

    for ds in dates_sorted:
        rec = data[ds]
        phase_full = rec["phase"]
        phase_name = phase_full.split(" –≤ ")[0].split("(")[0].strip()

        if current is None or current["phase_name"] != phase_name:
            # –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
            current = {
                "phase_name": phase_name,
                "phase_full": phase_full,
                "phase_time": rec.get("phase_time"),
                "dates": [ds],
                "vc": rec.get("void_of_course") or {},
                "advice": normalize_tip(rec["advice"][0]) if rec.get("advice") else "",
            }
            segments.append(current)
        else:
            current["dates"].append(ds)

    return segments


def collect_day_lists(data: dict) -> dict[str, list[int]]:
    """–°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–Ω–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –º–µ—Å—è—Ü."""
    cats = defaultdict(set)
    for rec in data.values():
        fav = rec.get("favorable_days", {})
        for cat, arr in fav.items():
            cats[f"{cat}_fav"].update(arr)
        unf = rec.get("unfavorable_days", {})
        for cat, arr in unf.items():
            cats[f"{cat}_unf"].update(arr)
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    return {k: sorted(v) for k, v in cats.items()}


def build_month_message(data: dict) -> str:
    first_date = pendulum.parse(sorted(data.keys())[0]).in_tz(TZ)
    header = f"üåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {first_date.format('MMMM YYYY').upper()}</b>\n"
    lines  = [header]

    # --- –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –ø–æ —Ñ–∞–∑–∞–º ---
    for seg in group_by_phase(data):
        d0 = pendulum.parse(seg["dates"][0]).in_tz(TZ).format("D.MM")
        d1 = pendulum.parse(seg["dates"][-1]).in_tz(TZ).format("D.MM")
        time_iso = pendulum.parse(seg["phase_time"]).in_tz(TZ).format("DD.MM HH:mm") if seg["phase_time"] else "‚Äî"

        lines.append(f"<b>{seg['phase_full']}</b> ({time_iso}; {d0}‚Äì{d1})")

        # Void-of-Course, –µ—Å–ª–∏ –µ—Å—Ç—å
        vc = seg["vc"]
        if vc.get("start") and vc.get("end"):
            lines.append(f"Void-of-Course: {vc['start']} ‚Üí {vc['end']}")

        # –°–æ–≤–µ—Ç
        if seg["advice"]:
            lines.append(seg["advice"])

        lines.append("‚Äî")  # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    # --- —Å–≤–æ–¥–∫–∞ –¥–Ω–µ–π ---
    cats = collect_day_lists(data)
    def fmt(lst): return ", ".join(map(str, lst)) if lst else "‚Äî"

    lines.append(f"‚úÖ <b>–û–±—â–∏–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞:</b> {fmt(cats.get('general_fav', []))}")
    if cats.get("general_unf"):
        lines.append(f"‚ùå <b>–û–±—â–∏–µ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞:</b> {fmt(cats['general_unf'])}")

    cat_titles = {
        "haircut": "‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∏",
        "travel":  "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
        "shopping":"üõçÔ∏è –ü–æ–∫—É–ø–∫–∏",
        "health":  "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ",
    }
    for key, title in cat_titles.items():
        lst = cats.get(f"{key}_fav", [])
        if lst:
            lines.append(f"{title}: {fmt(lst)}")

    # --- –ø–æ—è—Å–Ω–µ–Ω–∏–µ V/C ---
    lines += [
        "",
        "<i>–ß—Ç–æ —Ç–∞–∫–æ–µ Void-of-Course?</i>",
        "Void-of-Course ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª, –∫–æ–≥–¥–∞ –õ—É–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º –∑–Ω–∞–∫–µ –∏ –µ—â—ë –Ω–µ –≤–æ—à–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π. "
        "–≠–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Å–µ–∏–≤–∞–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É —Å—Ç–∞—Ä—Ç –≤–∞–∂–Ω—ã—Ö –¥–µ–ª, –ø–æ–¥–ø–∏—Å–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏ –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –ª—É—á—à–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ "
        "–Ω–∞ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è V/C.</i>",
    ]

    return "\n".join(lines)


async def main() -> None:
    path = Path(__file__).parent / "lunar_calendar.json"
    if not path.exists():
        print("‚ùå lunar_calendar.json not found.")
        return

    data = json.loads(path.read_text(encoding="utf-8"))
    msg  = build_month_message(data)

    bot = Bot(token=TOKEN)
    try:
        await bot.send_message(
            CHAT_ID,
            msg,
            parse_mode="HTML",
            disable_web_page_preview=True,
        )
        print("‚úÖ Monthly calendar delivered")
    except tg_err.TelegramError as e:
        print(f"‚ùå Telegram error: {e}")


if __name__ == "__main__":
    asyncio.run(main())
