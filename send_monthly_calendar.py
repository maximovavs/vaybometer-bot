#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
send_monthly_calendar.py ‚Äî –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è (–ø–∞—Ä–∏—Ç–µ—Ç —Å KLD), –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥ –ö–∏–ø—Ä.

–§—É–Ω–∫—Ü–∏–∏:
- –ß–∏—Ç–∞–µ—Ç lunar_calendar.json –∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç ¬´–∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ¬ª + ¬´–¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ –¥–Ω—è–º¬ª.
- –î–µ–ª–∏—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏ ‚â§ 4096 —Å–∏–º–≤–æ–ª–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram).
- HTML-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É.
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π + –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç JSON-—Ñ–∞–π–ª.
- –†–µ—Ç—Ä–∞–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (3 –ø–æ–ø—ã—Ç–∫–∏, —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –±—ç–∫–æ—Ñ—Ñ).
- –ì–∏–±–∫–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞:
    1) CHANNEL_ID_OVERRIDE (CLI: --chat-id) ‚Äî —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    2) –µ—Å–ª–∏ TO_TEST ‚àà {1,true,yes,on} –∏–ª–∏ CLI: --to-test ‚Üí CHANNEL_ID_TEST
    3) –∏–Ω–∞—á–µ ‚Üí CHANNEL_ID
  –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: fallbacks –Ω–∞ *_KLG –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–∏–ø—Ä—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.

CLI:
    --chat-id <id>   ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π chat_id
    --to-test        ‚Äî –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
    --no-file        ‚Äî –Ω–µ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ñ–∞–π–ª lunar_calendar.json
    --dry-run        ‚Äî –ø–µ—á–∞—Ç–∞—Ç—å –≤ stdout –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏

–û–∂–∏–¥–∞–µ–º—ã–µ ENV:
- TELEGRAM_TOKEN (–∏–ª–∏ TELEGRAM_TOKEN_KLG)
- CHANNEL_ID, CHANNEL_ID_TEST (–∏–ª–∏ *_KLG —Ñ–æ–ª–ª–±—ç–∫–∏)
- CHANNEL_ID_OVERRIDE (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- TO_TEST=1|true|yes|on (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- TZ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Asia/Nicosia)
- LUNAR_JSON_PATH (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é lunar_calendar.json)
"""

from __future__ import annotations
import os
import sys
import json
import time
import html
import argparse
from pathlib import Path
from typing import Any, Dict, List, Tuple, Optional

import requests
import pendulum

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Ñ–∏–≥/ENV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _envb(name: str) -> bool:
    return (os.getenv(name, "").strip().lower() in ("1", "true", "yes", "on"))

TZ = pendulum.timezone(os.getenv("TZ", "Asia/Nicosia"))

TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("TELEGRAM_TOKEN_KLG") or ""
if not TOKEN:
    # –¥–∞–¥–∏–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã workflow —Å—Ä–∞–∑—É –ø–æ–¥—Å–∫–∞–∑–∞–ª, —á—Ç–æ –Ω–µ —Ç–∞–∫
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω (–Ω–∏ TELEGRAM_TOKEN, –Ω–∏ TELEGRAM_TOKEN_KLG)")

JSON_PATH = Path(os.getenv("LUNAR_JSON_PATH", "lunar_calendar.json"))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Telegram API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

TG_MAX = 4096

def _post_json(url: str, **data: Any) -> Dict[str, Any]:
    r = requests.post(url, data=data, timeout=30)
    r.raise_for_status()
    return r.json()

def _post_multipart(url: str, files: Dict[str, Any], data: Dict[str, Any]) -> Dict[str, Any]:
    r = requests.post(url, data=data, files=files, timeout=60)
    r.raise_for_status()
    return r.json()

def tg_send_message(token: str, chat_id: str, text: str, parse_mode: str = "HTML",
                    disable_web_page_preview: bool = True) -> Dict[str, Any]:
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    return _post_json(url, chat_id=chat_id, text=text, parse_mode=parse_mode,
                      disable_web_page_preview=str(disable_web_page_preview).lower())

def tg_send_document(token: str, chat_id: str, file_path: Path, caption: str = "") -> Dict[str, Any]:
    url = f"https://api.telegram.org/bot{token}/sendDocument"
    with file_path.open("rb") as f:
        files = {"document": (file_path.name, f, "application/json")}
        data = {"chat_id": chat_id, "caption": caption}
        return _post_multipart(url, files=files, data=data)

def _retry(fn, *args, **kwargs) -> Dict[str, Any]:
    delay = 2.0
    for i in range(3):
        try:
            return fn(*args, **kwargs)
        except Exception as e:
            if i == 2:
                raise
            time.sleep(delay)
            delay *= 2
    return {}  # –Ω–µ –¥–æ–π–¥—ë–º

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

RUS_MONTHS_NOM = {
    1: "—è–Ω–≤–∞—Ä—å", 2: "—Ñ–µ–≤—Ä–∞–ª—å", 3: "–º–∞—Ä—Ç", 4: "–∞–ø—Ä–µ–ª—å",
    5: "–º–∞–π", 6: "–∏—é–Ω—å", 7: "–∏—é–ª—å", 8: "–∞–≤–≥—É—Å—Ç",
    9: "—Å–µ–Ω—Ç—è–±—Ä—å", 10: "–æ–∫—Ç—è–±—Ä—å", 11: "–Ω–æ—è–±—Ä—å", 12: "–¥–µ–∫–∞–±—Ä—å",
}

PHASE_EMO = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ":"üåë","–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø":"üåí","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåì","–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞":"üåî",
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":"üåï","–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞":"üåñ","–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåó","–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø":"üåò",
}

def esc(s: Any) -> str:
    return html.escape(str(s or ""), quote=False)

def chunk_text(text: str, limit: int = TG_MAX) -> List[str]:
    if len(text) <= limit:
        return [text]
    parts: List[str] = []
    cur = ""
    for line in text.splitlines(True):
        if len(cur) + len(line) > limit:
            if cur:
                parts.append(cur)
                cur = ""
            # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–º–∏—Ç–∞ ‚Äî –∂—ë—Å—Ç–∫–æ —Ä–µ–∂–µ–º
            while len(line) > limit:
                parts.append(line[:limit])
                line = line[limit:]
        cur += line
    if cur:
        parts.append(cur)
    return parts

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–µ–Ω–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _summarize_calendar(cal: Dict[str, Any]) -> str:
    days: Dict[str, Any] = cal.get("days", {})
    if not days:
        return "üåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b>\n–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    # –º–µ—Å—è—Ü/–≥–æ–¥ –ø–æ –ø–µ—Ä–≤–æ–π –¥–∞—Ç–µ
    sample_date = sorted(days.keys())[0]
    dt = pendulum.parse(sample_date, tz=TZ)
    month_name = RUS_MONTHS_NOM.get(dt.month, f"{dt.month:02d}")
    year = dt.year

    # –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∑—ã
    phase_dates: Dict[str, List[int]] = {k: [] for k in ("–ù–æ–≤–æ–ª—É–Ω–∏–µ","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å","–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ","–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å")}
    for dstr, rec in sorted(days.items()):
        ph = str(rec.get("phase_name") or "")
        if ph in phase_dates:
            phase_dates[ph].append(int(dstr[-2:]))

    # VoC —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    month_voc = cal.get("month_voc", []) or []
    voc_lines: List[str] = []
    for it in month_voc[:6]:
        s, e = it.get("start"), it.get("end")
        if s and e:
            voc_lines.append(f"‚Ä¢ {esc(s)}‚Äì{esc(e)}")

    lines: List[str] = []
    lines.append(f"üåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {esc(month_name)} {year}</b>")
    lines.append("")
    for name in ("–ù–æ–≤–æ–ª—É–Ω–∏–µ","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å","–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ","–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"):
        dates = phase_dates[name]
        if dates:
            emo = PHASE_EMO.get(name, "‚Ä¢")
            lines.append(f"{emo} <b>{esc(name)}:</b> " + ", ".join(str(x) for x in dates))
    if month_voc:
        lines.append("")
        lines.append(f"‚ö´Ô∏è <b>Void of Course</b> ‚Äî –≤—Å–µ–≥–æ: {len(month_voc)}")
        lines.extend(voc_lines)
    lines.append("")
    lines.append("–§–∞–π–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏.")
    return "\n".join(lines)

def _render_detail(cal: Dict[str, Any]) -> str:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –ø–æ –¥–Ω—è–º, –±–ª–∏–∑–∫–æ –∫ KLD: –¥–∞—Ç–∞ ‚Ä¢ —Ñ–∞–∑–∞ ‚Ä¢ –∑–Ω–∞–∫ ‚Ä¢ % ‚Ä¢ VoC –∏ 1‚Äì2 —Å–æ–≤–µ—Ç–∞."""
    days: Dict[str, Any] = cal.get("days", {})
    if not days:
        return ""

    lines: List[str] = []
    for dstr, rec in sorted(days.items()):
        dt = pendulum.parse(dstr, tz=TZ)
        dd = dt.format("DD.MM")
        phase = str(rec.get("phase") or rec.get("phase_name") or "")
        sign = str(rec.get("sign") or "")
        perc = rec.get("percent")
        perc_s = f"{int(perc)}%" if isinstance(perc, (int, float)) else "‚Äî"

        head = f"<b>{esc(dd)}</b> ‚Ä¢ {esc(phase)}"
        if sign:
            head += f" ‚Ä¢ {esc(sign)}"
        head += f" ‚Ä¢ {esc(perc_s)}"
        lines.append(head)

        # VoC (–ª–æ–∫–∞–ª—å–Ω—ã–π)
        voc = rec.get("void_of_course") or rec.get("voc") or {}
        if isinstance(voc, dict):
            s, e = voc.get("start"), voc.get("end")
            if s and e:
                lines.append(f"  ‚ö´Ô∏è VoC: {esc(s)}‚Äì{esc(e)}")

        # –°–æ–≤–µ—Ç—ã
        adv = rec.get("advice") or []
        if isinstance(adv, list) and adv:
            # –≤–æ–∑—å–º—ë–º –¥–æ 2 —Å—Ç—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å
            for a in adv[:2]:
                a = str(a or "").strip()
                if a:
                    # –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏/–±—É–ª–ª–µ—Ç—ã, –Ω–æ HTML ‚Äî –¥–∞
                    lines.append(f"  ‚Ä¢ {esc(a)}")
        lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    return "\n".join(lines).rstrip()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—ã–±–æ—Ä —á–∞—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def resolve_chat_id(cli_chat_id: Optional[str], cli_to_test: bool) -> str:
    override = (cli_chat_id or os.getenv("CHANNEL_ID_OVERRIDE") or "").strip()
    if override:
        return override

    # —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∞ ‚Äî CLI —Ñ–ª–∞–≥ –≤—ã—à–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –∑–∞—Ç–µ–º ENV
    to_test = cli_to_test or _envb("TO_TEST")
    if to_test:
        chat = os.getenv("CHANNEL_ID_TEST", "") or os.getenv("CHANNEL_ID_TEST_KLG", "")
        if chat:
            return chat

    # –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
    chat = os.getenv("CHANNEL_ID", "") or os.getenv("CHANNEL_ID_KLG", "")
    if not chat:
        # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω chat_id: –∑–∞–¥–∞–π—Ç–µ CHANNEL_ID –∏–ª–∏ CHANNEL_ID_TEST (–∏–ª–∏ *_KLG), "
                           "–ª–∏–±–æ –ø–µ—Ä–µ–¥–∞–π—Ç–µ --chat-id/CHANNEL_ID_OVERRIDE")
    return chat

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì–ª–∞–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def main(argv: Optional[List[str]] = None) -> int:
    p = argparse.ArgumentParser(add_help=False)
    p.add_argument("--chat-id", dest="chat_id", default=None)
    p.add_argument("--to-test", dest="to_test", action="store_true", default=False)
    p.add_argument("--no-file", dest="no_file", action="store_true", default=False)
    p.add_argument("--dry-run", dest="dry_run", action="store_true", default=False)
    p.add_argument("-h", "--help", action="help", help="show this help message and exit")
    args = p.parse_args(argv)

    if not JSON_PATH.exists():
        raise FileNotFoundError(f"{JSON_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ lunar_calendar.json")

    cal = json.loads(JSON_PATH.read_text(encoding="utf-8"))

    # 1) –ö–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
    summary = _summarize_calendar(cal)
    # 2) –î–µ—Ç–∞–ª—å–Ω—ã–π –±–ª–æ–∫
    detail = _render_detail(cal)

    # –ù–∞—Ä–µ–∂–µ–º –Ω–∞ —á–∞–Ω–∫–∏ (–ø–µ—Ä–≤—ã–º —É–π–¥—ë—Ç summary)
    chunks: List[str] = []
    chunks.extend(chunk_text(summary))
    if detail:
        chunks.extend(chunk_text(detail))

    chat_id = resolve_chat_id(args.chat_id, args.to_test)
    print(f"‚Üí Sending to chat: {chat_id}")

    if args.dry_run:
        print("---- DRY RUN ----")
        for i, ch in enumerate(chunks, 1):
            print(f"\n--- Message {i}/{len(chunks)} ({len(ch)} chars) ---\n{ch}")
        if not args.no_file:
            print(f"\n--- File attach ---\n{JSON_PATH}")
        return 0

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ—Ç—Ä–∞—è–º–∏
    for ch in chunks:
        _retry(tg_send_message, TOKEN, chat_id, ch)

    # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    if not args.no_file:
        _retry(tg_send_document, TOKEN, chat_id, JSON_PATH, caption="lunar_calendar.json")

    return 0


if __name__ == "__main__":
    sys.exit(main())
