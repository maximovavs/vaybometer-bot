#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ¬´–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å¬ª.
–¢—Ä–µ–±—É–µ—Ç:
  ‚Ä¢ lunar_calendar.json (–∏–∑ gen_lunar_calendar.py)
  ‚Ä¢ TELEGRAM_TOKEN, CHANNEL_ID   ‚Äì –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import os, json, html, asyncio
from pathlib import Path
from collections import OrderedDict
import pendulum
from telegram import Bot, error as tg_err

TOKEN   = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = int(os.getenv("CHANNEL_ID", "0"))
TZ      = pendulum.timezone("Asia/Nicosia")

# —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —á–∏—Å—Ç–æ–µ –∏–º—è ‚Üí emoji, –∫–∞–∫ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ
EMOJI = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ":"üåë","–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø":"üåí","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåì","–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞":"üåî",
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":"üåï","–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞":"üåñ","–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåó","–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø":"üåò"
}

def fmt_range(ds: str, de: str) -> str:
    """'2025-05-01','2025-05-10' ‚Üí '1‚Äì10 –º–∞—è' —Å –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–º –ø—Ä–æ–±–µ–ª–æ–º –ø–µ—Ä–µ–¥ ¬´–º–∞—è¬ª."""
    sd = pendulum.parse(ds, tz=TZ)
    ed = pendulum.parse(de, tz=TZ)
    if sd.month != ed.month:           # —Å–ª—É—á–∞–µ—Ç—Å—è —Ä–µ–¥–∫–æ (—Ñ–∞–∑–∞ —Ç—è–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü)
        return f"{sd.day} {sd.format('MMM')}‚Äì{ed.day} {ed.format('MMM')}"
    return f"{sd.day}‚Äì{ed.day}\u00A0{sd.format('MMM', locale='ru')}".lower()

def build_message(data: dict) -> str:
    # --- –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∞–∑–∞–º ---
    ordered = OrderedDict()            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—Ä–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    for day, rec in data.items():
        name = rec["phase_name"]
        if name not in ordered:
            ordered[name] = {
                "emoji": EMOJI.get(name,""),
                "dates": [day],
                "desc" : rec["long_desc"]
            }
        else:
            ordered[name]["dates"].append(day)

    # --- –∑–∞–≥–æ–ª–æ–≤–æ–∫ ---
    first_date = next(iter(data))
    month_ru   = pendulum.parse(first_date).format("MMMM YYYY", locale="ru").upper()
    lines = ["<b>üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ " + month_ru + "</b>\n"]

    # --- —Å–∞–º–∏ —Å–µ–≥–º–µ–Ω—Ç—ã ---
    for seg in ordered.values():
        seg["dates"].sort()
        rng = fmt_range(seg["dates"][0], seg["dates"][-1])
        emoji = seg["emoji"]
        lines.append(f"{emoji} <b>{rng}</b>")
        lines.append(f"<i>{html.escape(seg['desc'])}</i>\n")

    # --- —Å–≤–æ–¥–∫–∞ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π ---
    any_day = next(iter(data.values()))        # —à–∞–±–ª–æ–Ω
    fav = any_day["favorable_days"]
    unf = any_day["unfavorable_days"]

    def lst(L): return ", ".join(map(str,L)) if L else "‚Äî"

    lines.append(f"‚úÖ <b>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏:</b> {lst(fav['general']['favorable'])}")
    lines.append(f"‚ùå <b>–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ:</b> {lst(unf['general']['unfavorable'])}\n")

    icons = {"haircut":"‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∏","travel":"‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
             "shopping":"üõçÔ∏è –ü–æ–∫—É–ø–∫–∏","health":"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ"}
    for k, label in icons.items():
        lines.append(f"{label}: {lst(fav[k]['favorable'])}")

    # --- –ø–æ—è—Å–Ω–µ–Ω–∏–µ VoC ---
    lines.append("\n<i>Void-of-Course ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç—Ä–µ–∑–æ–∫, –∫–æ–≥–¥–∞ –õ—É–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—Å–µ "
                 "–∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤ –∑–Ω–∞–∫–µ –∏ –µ—â—ë –Ω–µ –≤–æ—à–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π. –í —ç—Ç–æ –≤—Ä–µ–º—è "
                 "—ç–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Å–µ—è–Ω–∞, –ø–æ—ç—Ç–æ–º—É —Å—Ç–∞—Ä—Ç –≤–∞–∂–Ω—ã—Ö –¥–µ–ª –ª—É—á—à–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏.</i>")

    return "\n".join(lines)

async def main():
    fn = Path("lunar_calendar.json")
    if not fn.exists():
        print("‚ùå lunar_calendar.json not found")
        return

    data = json.loads(fn.read_text("utf-8"))
    txt  = build_message(data)

    bot = Bot(TOKEN)
    try:
        await bot.send_message(CHAT_ID, txt,
                               parse_mode="HTML",
                               disable_web_page_preview=True)
        print("‚úÖ monthly post sent")
    except tg_err.TelegramError as e:
        print("‚ùå Telegram error:", e)

if __name__ == "__main__":
    asyncio.run(main())