#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ¬´–º–µ—Å—è—á–Ω—ã–π¬ª –ø–æ—Å—Ç –≤ Telegram
‚Ä¢ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ ¬´—Ñ–∞–∑–∞ + –∑–Ω–∞–∫¬ª
‚Ä¢ –∂–∏—Ä–Ω–æ–µ ¬´–¥–∞—Ç—ã ‚Äì –∑–Ω–∞–∫¬ª, –∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ Void-of-Course + –ø–æ—è—Å–Ω–µ–Ω–∏–µ
"""

import json, asyncio, os
from pathlib import Path
from collections import defaultdict
import pendulum
from telegram import Bot         # python-telegram-bot >=20,<21
from telegram.error import TelegramError

TOKEN   = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID = int(os.getenv("CHANNEL_ID", 0))
TZ      = pendulum.timezone("Asia/Nicosia")

EMO = {                     # —Ç–æ—Ç –∂–µ —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ":"üåë","–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø":"üåí","–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåì","–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞":"üåî",
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":"üåï","–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞":"üåñ","–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåó","–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø":"üåò"
}

# ---------- helpers --------------------------------------------
def fmt_range(d1:str, d2:str)->str:
    """'2025-05-01', '2025-05-03' ‚Üí 1‚Äì3 –º–∞—è"""
    p1, p2 = pendulum.parse(d1), pendulum.parse(d2)
    if p1.month == p2.month:
        return f"{p1.day}‚Äì{p2.day} {p1.format('MMMM', locale='ru')}"
    return f"{p1.format('D MMM', locale='ru')}‚Äì{p2.format('D MMM', locale='ru')}"

def collect_segments(data:dict):
    """[{phase_name, sign, ...}] —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ñ–∞–∑–∞+–∑–Ω–∞–∫"""
    segs = []
    buff = []
    last_key = None

    for date in sorted(data):
        rec = data[date]
        key = (rec["phase_name"], rec["sign"])
        if key != last_key and buff:
            segs.append(buff)
            buff = []
        buff.append((date, rec))
        last_key = key
    if buff:
        segs.append(buff)
    return segs

def build_message(data:dict)->str:
    # ‚îÄ‚îÄ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    month = pendulum.parse(next(iter(data))).in_tz(TZ).format("MMMM YYYY", locale='ru').upper()
    lines = [f"üåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {month}</b>", ""]

    # ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å
    for seg in collect_segments(data):
        first_date, first_rec = seg[0]
        last_date,  _         = seg[-1]
        emoji  = EMO[first_rec["phase_name"]]
        rng    = fmt_range(first_date, last_date)
        sign   = first_rec["sign"]
        desc   = first_rec.get("long_desc","").strip()

        lines.append(f"{emoji} <b>{rng} ‚Ä¢ {sign}</b>")
        if desc:
            lines.append(f"<i>{desc}</i>")
        lines.append("")                      # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    # ‚îÄ‚îÄ —Å–≤–æ–¥–∫–∞ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π (–±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞)
    cats = data[first_date]["favorable_days"]
    def fmt(cat, ico): 
        good = ", ".join(map(str, cats[cat]["favorable"]))
        bad  = ", ".join(map(str, cats[cat]["unfavorable"]))
        return f"{ico} <b>{cat.capitalize()}:</b> {good}" + (f"  ‚Ä¢  {bad}" if bad else "")
    lines += [
        "‚úÖ <b>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏:</b> "   + ", ".join(map(str, cats['general']['favorable'])),
        "‚ùå <b>–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ:</b> "     + ", ".join(map(str, cats['general']['unfavorable'])),
        fmt("haircut","‚úÇÔ∏è"),
        fmt("travel","‚úàÔ∏è"),
        fmt("shopping","üõçÔ∏è"),
        fmt("health","‚ù§Ô∏è"),
        ""
    ]

    # ‚îÄ‚îÄ Void-of-Course
    voc_lines = []
    for d, rec in data.items():
        s, e = rec["void_of_course"].values()
        if s and e:
            voc_lines.append(f"‚Ä¢ {s} ‚Üí {e}")
    if voc_lines:
        lines.append("<b>üï≥Ô∏è Void-of-Course:</b>")
        lines.extend(voc_lines)
        lines.append("")
        lines.append(
            "<i>Void-of-Course</i> ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª, –∫–æ–≥–¥–∞ –õ—É–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤ –∑–Ω–∞–∫–µ "
            "–∏ –µ—â—ë –Ω–µ –≤–æ—à–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π. –í —ç—Ç–æ –≤—Ä–µ–º—è —ç–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Å–µ—è–Ω–∞; —Å—Ç–∞—Ä—Ç –≤–∞–∂–Ω—ã—Ö –¥–µ–ª –ª—É—á—à–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏."
        )

    return "\n".join(lines).strip()

# ---------- main -----------------------------------------------
async def main() -> None:
    path = Path("lunar_calendar.json")
    if not path.exists():
        print("‚ùå lunar_calendar.json not found")
        return

    data = json.loads(path.read_text(encoding="utf-8"))
    msg  = build_message(data)

    bot = Bot(token=TOKEN)
    try:
        await bot.send_message(
            CHAT_ID,
            msg,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        print("‚úÖ Monthly post sent")
    except TelegramError as e:
        print(f"‚ùå Telegram error: {e}")

if __name__ == "__main__":
    asyncio.run(main())