# world_en/world_astro_collect.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from pathlib import Path
import sys
sys.path.append(str(Path(__file__).resolve().parents[1]))

import datetime as dt
import json
from typing import Optional, Tuple
from pytz import UTC

ROOT = Path(__file__).resolve().parents[1]
OUT  = Path(__file__).parent / "astro.json"

# ---- sign mapping (RU/EN ‚Üí EN + emoji)
_RU2EN_SIGNS = {
    "–æ–≤–µ–Ω": "Aries", "—Ç–µ–ª–µ—Ü": "Taurus", "–±–ª–∏–∑–Ω–µ—Ü—ã": "Gemini",
    "—Ä–∞–∫": "Cancer", "–ª–µ–≤": "Leo", "–¥–µ–≤–∞": "Virgo",
    "–≤–µ—Å—ã": "Libra", "—Å–∫–æ—Ä–ø–∏–æ–Ω": "Scorpio", "—Å—Ç—Ä–µ–ª–µ—Ü": "Sagittarius",
    "–∫–æ–∑–µ—Ä–æ–≥": "Capricorn", "–≤–æ–¥–æ–ª–µ–π": "Aquarius", "—Ä—ã–±—ã": "Pisces",
}
_EN_SIGNS = {
    "aries": ("Aries", "‚ôà"), "taurus": ("Taurus", "‚ôâ"),
    "gemini": ("Gemini", "‚ôä"), "cancer": ("Cancer", "‚ôã"),
    "leo": ("Leo", "‚ôå"), "virgo": ("Virgo", "‚ôç"),
    "libra": ("Libra", "‚ôé"), "scorpio": ("Scorpio", "‚ôè"),
    "sagittarius": ("Sagittarius", "‚ôê"), "capricorn": ("Capricorn", "‚ôë"),
    "aquarius": ("Aquarius", "‚ôí"), "pisces": ("Pisces", "‚ôì"),
}

def _sign_en_emoji(sign_raw: Optional[str]) -> Tuple[str, str]:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä—É—Å/–∞–Ω–≥–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (EN, emoji)."""
    s = (sign_raw or "").strip()
    if not s:
        return "‚Äî", ""
    low = s.lower()
    # RU ‚Üí EN
    if low in _RU2EN_SIGNS:
        en = _RU2EN_SIGNS[low]
        return en, _EN_SIGNS[en.lower()][1]
    # EN –∫–∞–∫ –µ—Å—Ç—å
    if low in _EN_SIGNS:
        return _EN_SIGNS[low]
    # —Ñ–æ–ª–±—ç–∫
    return s, ""

# ---- phase mapping (RU/EN ‚Üí EN + emoji –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞–¥–∏–π)
# –ü–æ–¥–¥–µ—Ä–∂–∞–Ω—ã –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞–¥–∏–∏: üåë/üåí/üåì/üåî/üåï/üåñ/üåó/üåò
_PHASE_LC_MAP = {
    # RU —Ç–æ—á–Ω—ã–µ/–∫–ª—é—á–µ–≤—ã–µ
    "–Ω–æ–≤–æ–ª—É–Ω–∏–µ":            ("New Moon", "üåë"),
    "—Ä–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø":        ("Waxing Crescent", "üåí"),
    "–ø–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å":      ("First Quarter", "üåì"),
    "—Ä–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞":        ("Waxing Moon", "üåî"),      # –æ–±–æ–±—â—ë–Ω–Ω–æ
    "—Ä–∞—Å—Ç—É—â–∞—è":             ("Waxing Moon", "üåî"),
    "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ":           ("Full Moon", "üåï"),
    "—É–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞":       ("Waning Moon", "üåñ"),      # –æ–±–æ–±—â—ë–Ω–Ω–æ
    "—É–±—ã–≤–∞—é—â–∞—è":            ("Waning Moon", "üåñ"),
    "–ø–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å":   ("Last Quarter", "üåó"),
    "—É–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø":       ("Waning Crescent", "üåò"),

    # EN —Ç–æ—á–Ω—ã–µ/–∫–ª—é—á–µ–≤—ã–µ
    "new moon":             ("New Moon", "üåë"),
    "waxing crescent":      ("Waxing Crescent", "üåí"),
    "first quarter":        ("First Quarter", "üåì"),
    "waxing gibbous":       ("Waxing Gibbous", "üåî"),
    "waxing":               ("Waxing Moon", "üåî"),
    "full moon":            ("Full Moon", "üåï"),
    "waning gibbous":       ("Waning Gibbous", "üåñ"),
    "last quarter":         ("Last Quarter", "üåó"),
    "waning crescent":      ("Waning Crescent", "üåò"),
    "waning":               ("Waning Moon", "üåñ"),
}

def _phase_en_emoji(phase_name: Optional[str]) -> Tuple[str, str]:
    """–í–µ—Ä–Ω—ë—Ç (EN-–Ω–∞–∑–≤–∞–Ω–∏–µ, emoji). –ò—â–µ—Ç –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É (case-insensitive)."""
    if not phase_name:
        return "‚Äî", ""
    low = phase_name.strip().lower()
    # —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if low in _PHASE_LC_MAP:
        return _PHASE_LC_MAP[low]
    # –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    for key, val in _PHASE_LC_MAP.items():
        if key in low:
            return val
    # —Ñ–æ–ª–±—ç–∫ ‚Äî –æ—Ä–∏–≥–∏–Ω–∞–ª –±–µ–∑ —ç–º–æ–¥–∑–∏
    return phase_name, ""

# ---------- helpers ----------

def fmt_percent_or_none(x) -> Optional[int]:
    """–í–µ—Ä–Ω—ë—Ç —Ü–µ–ª–æ–µ 1..99, –∏–Ω–∞—á–µ None (–¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Å–∫–æ–±–æ–∫ –≤ —à–∞–±–ª–æ–Ω–µ)."""
    try:
        p = int(round(float(x)))
    except Exception:
        return None
    return p if 0 < p < 100 else None

def parse_voc_utc(start_s: Optional[str], end_s: Optional[str]) -> Tuple[Optional[dt.datetime], Optional[dt.datetime]]:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ 'HH:MM' –∏–ª–∏ 'DD.MM HH:MM' (UTC) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç aware datetime –≤ UTC.
    –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî (None, None).
    """
    if not start_s or not end_s:
        return None, None

    def _parse_one(s: str) -> dt.datetime:
        s = s.strip()
        today = dt.datetime.utcnow().date()
        if " " in s:  # 'DD.MM HH:MM'
            dpart, tpart = s.split()
            d, m = map(int, dpart.split("."))
            hh, mm = map(int, tpart.split(":"))
            return dt.datetime(today.year, m, d, hh, mm, tzinfo=UTC)
        else:         # 'HH:MM' -> —Å–µ–≥–æ–¥–Ω—è
            hh, mm = map(int, s.split(":"))
            return dt.datetime(today.year, today.month, today.day, hh, mm, tzinfo=UTC)

    try:
        return _parse_one(start_s), _parse_one(end_s)
    except Exception:
        return None, None

def pretty_duration(mins: int) -> str:
    h, m = mins // 60, mins % 60
    if h and m: return f"‚âà{h}h {m:02d}m"
    if h:       return f"‚âà{h}h"
    return f"‚âà{m}m"

def voc_badge_by_len(minutes: int) -> str:
    if minutes >= 120: return "üü†"
    if minutes >= 60:  return "üü°"
    return "üü¢"

def voc_text_status(start_utc: Optional[dt.datetime], end_utc: Optional[dt.datetime]) -> Tuple[str, str, Optional[int]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (VOC_TEXT, VOC_BADGE, VOC_LEN_MIN).
    –í–∞—Ä–∏–∞–Ω—Ç—ã:
      - 'No VoC today'
      - 'VoC passed earlier today (HH:MM‚ÄìHH:MM UTC)'
      - 'VoC now HH:MM‚ÄìHH:MM UTC (‚âà1h 45m)'
      - 'HH:MM‚ÄìHH:MM UTC (‚âà1h 45m)' ‚Äî –µ—Å–ª–∏ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å
    """
    if not start_utc or not end_utc:
        return "No VoC today", "", None

    total_min = max(0, int((end_utc - start_utc).total_seconds() // 60))
    badge = voc_badge_by_len(total_min)
    pretty = pretty_duration(total_min)
    rng = f"{start_utc.strftime('%H:%M')}‚Äì{end_utc.strftime('%H:%M')} UTC"

    now = dt.datetime.utcnow().replace(tzinfo=UTC)
    if now < start_utc:
        return f"{rng} ({pretty})", badge, total_min
    if start_utc <= now <= end_utc:
        return f"VoC now {rng} ({pretty})", badge, total_min
    return f"VoC passed earlier today ({rng})", "‚ö™Ô∏è", total_min

# ---------- lunar calendar reading ----------

def read_calendar_today():
    cal_path = ROOT / "lunar_calendar.json"
    if not cal_path.exists():
        return None
    data = json.loads(cal_path.read_text(encoding="utf-8"))
    days = data.get("days") or {}
    today = dt.date.today().isoformat()
    return days.get(today)

# (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞–º–∏: –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä VoC –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ)
def _parse_voc_datetime(s: Optional[str], base_date: dt.date) -> Optional[dt.datetime]:
    if not s:
        return None
    try:
        dpart, tpart = s.split()
        day, month = map(int, dpart.split("."))
        hour, minute = map(int, tpart.split(":"))
        year = base_date.year
        return dt.datetime(year, month, day, hour, minute)
    except Exception:
        return None

def voc_duration_minutes(voc: dict | None, base_date: dt.date) -> Optional[int]:
    if not voc:
        return None
    start = _parse_voc_datetime(voc.get("start"), base_date)
    end   = _parse_voc_datetime(voc.get("end"), base_date)
    if not start or not end:
        return None
    if end <= start:
        end += dt.timedelta(days=1)
    return int((end - start).total_seconds() // 60)

def format_voc(voc: dict | None) -> str:
    if not voc:
        return "‚Äî"
    s = (voc.get("start") or "").split()
    e = (voc.get("end") or "").split()
    ts = s[-1] if s else None
    te = e[-1] if e else None
    if ts and te:
        return f"{ts}‚Äì{te}"
    return "‚Äî"

def voc_badge(mins: Optional[int]) -> str:
    if mins is None: return ""
    if mins >= 180:  return "üü†"
    if mins >= 60:   return "üü°"
    return ""  # < 60 –º–∏–Ω ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º

# ---------- energy / tip logic ----------

def base_energy_tip(phase_name_ru: str, percent: int) -> tuple[str, str]:
    pn = (phase_name_ru or "").lower()
    if "–Ω–æ–≤–æ–ª—É–Ω–∏–µ" in pn or "new moon" in pn:
        return ("Set intentions; keep schedule light.", "Rest, plan, one gentle start.")
    if "–ø–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å" in pn or "first quarter" in pn:
        return ("Take a clear step forward.", "One priority; short focused block.")
    if "—Ä–∞—Å—Ç—É—â" in pn or "waxing" in pn:
        return ("Build momentum; refine work.", "Polish & iterate for 20‚Äì40 min.")
    if "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ" in pn or "full moon" in pn:
        return ("Emotions peak; seek balance.", "Grounding + gratitude; avoid big decisions.")
    if "–ø–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å" in pn or "last quarter" in pn:
        return ("Wrap up & declutter.", "Finish, review, release extras.")
    if "—É–±—ã–≤–∞" in pn or "waning" in pn:
        return ("Slow down; restore energy.", "Light tasks, gentle body care.")
    return ("Keep plans light; tune into your body.", "Focus on what matters.")

def energy_and_tip(phase_name_ru: str, percent: int, voc_minutes: Optional[int]) -> tuple[str, str]:
    energy, tip = base_energy_tip(phase_name_ru, percent)
    if voc_minutes is None:
        return energy, tip
    if voc_minutes >= 180:
        return ("Long VoC ‚Äî keep schedule very light; avoid launches.",
                "Routine, journaling, cleanup; move decisions after VoC.")
    if voc_minutes >= 120:
        return ("VoC ‚Äî avoid launches; favor routine.",
                "Safe tasks: maintenance, drafts, reading, rest.")
    if voc_minutes >= 60:
        return ("Short VoC ‚Äî keep tasks flexible.", tip)
    return energy, tip

# ---------- main ----------

def main():
    today = dt.date.today()
    weekday = dt.datetime.utcnow().strftime("%a")

    item = read_calendar_today() or {}

    # –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    phase_name  = item.get("phase_name") or ""          # RU-—Å—Ç—Ä–æ–∫–∞ —Ñ–∞–∑—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ)
    phase_pct   = item.get("percent")                   # —á–∏—Å–ª–æ 0..100 (–º–æ–∂–µ—Ç –±—ã—Ç—å None/"")
    sign_raw    = item.get("sign") or ""                # RU- –∏–ª–∏ EN-–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–∞
    voc_block   = item.get("void_of_course") or {}      # {"start": "...", "end": "..."}

    # --- VoC: —É–º–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã (no / passed / now / upcoming) ---
    voc_start_str = (voc_block or {}).get("start")
    voc_end_str   = (voc_block or {}).get("end")
    start_utc, end_utc = parse_voc_utc(voc_start_str, voc_end_str)
    VOC_TEXT, VOC_BADGE_SMART, VOC_LEN_MIN = voc_text_status(start_utc, end_utc)
    VOC_LEN_PRETTY = pretty_duration(VOC_LEN_MIN) if isinstance(VOC_LEN_MIN, int) else ""

    # --- –õ—É–Ω–∞: EN-–Ω–∞–∑–≤–∞–Ω–∏—è –∏ —ç–º–æ–¥–∑–∏ ---
    sign_en, sign_emoji   = _sign_en_emoji(sign_raw)
    phase_en, phase_emoji = _phase_en_emoji(phase_name)

    # –≠–Ω–µ—Ä–≥–∏—è/—Å–æ–≤–µ—Ç –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–≤–Ω—É—Ç—Ä–∏ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è VoC)
    energy_line, advice_line = energy_and_tip(phase_name, int(phase_pct or 0), VOC_LEN_MIN)

    out = {
        "DATE": today.isoformat(),
        "WEEKDAY": weekday,

        # –õ—É–Ω–∞
        "MOON_PHASE": phase_name or "‚Äî",                 # –æ—Ä–∏–≥–∏–Ω–∞–ª (–º–æ–∂–µ—Ç –±—ã—Ç—å RU)
        "PHASE_EN": phase_en,                            # EN-–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã
        "PHASE_EMOJI": phase_emoji,                      # —ç–º–æ–¥–∑–∏ —Ñ–∞–∑—ã (–≤—Å–µ —Å—Ç–∞–¥–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω—ã)
        "MOON_PERCENT": fmt_percent_or_none(phase_pct),  # —Å–∫—Ä—ã–≤–∞–µ–º 0%/100%
        "MOON_SIGN": sign_en,
        "MOON_SIGN_EMOJI": sign_emoji,

        # VoC
        "VOC": VOC_TEXT,                 # –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        "VOC_TEXT": VOC_TEXT,            # —É–º–Ω—ã–π —Ç–µ–∫—Å—Ç
        "VOC_LEN": VOC_LEN_PRETTY,       # "‚âà1h 45m" –∏–ª–∏ ""
        "VOC_BADGE": VOC_BADGE_SMART,    # üü¢/üü°/üü†/‚ö™Ô∏è

        # –≠–Ω–µ—Ä–≥–∏—è/—Å–æ–≤–µ—Ç
        "ENERGY_LINE": energy_line,
        "ADVICE_LINE": advice_line,
    }

    OUT.write_text(json.dumps(out, ensure_ascii=False, indent=2), encoding="utf-8")


if __name__ == "__main__":
    main()
