# world_en/world_astro_collect.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from pathlib import Path
import sys
sys.path.append(str(Path(__file__).resolve().parents[1]))

import datetime as dt
import json
from typing import Optional, Tuple
from pytz import UTC

ROOT = Path(__file__).resolve().parents[1]
OUT  = Path(__file__).parent / "astro.json"

# ---- sign mapping (RU/EN ‚Üí EN + emoji)
SIGN_MAP = {
    # RU
    "–û–≤–µ–Ω": ("Aries", "‚ôà"), "–¢–µ–ª–µ—Ü": ("Taurus", "‚ôâ"), "–ë–ª–∏–∑–Ω–µ—Ü—ã": ("Gemini", "‚ôä"),
    "–†–∞–∫": ("Cancer", "‚ôã"), "–õ–µ–≤": ("Leo", "‚ôå"), "–î–µ–≤–∞": ("Virgo", "‚ôç"),
    "–í–µ—Å—ã": ("Libra", "‚ôé"), "–°–∫–æ—Ä–ø–∏–æ–Ω": ("Scorpio", "‚ôè"), "–°—Ç—Ä–µ–ª–µ—Ü": ("Sagittarius", "‚ôê"),
    "–ö–æ–∑–µ—Ä–æ–≥": ("Capricorn", "‚ôë"), "–í–æ–¥–æ–ª–µ–π": ("Aquarius", "‚ôí"), "–†—ã–±—ã": ("Pisces", "‚ôì"),
    # EN (fallbacks)
    "Aries": ("Aries", "‚ôà"), "Taurus": ("Taurus", "‚ôâ"), "Gemini": ("Gemini", "‚ôä"),
    "Cancer": ("Cancer", "‚ôã"), "Leo": ("Leo", "‚ôå"), "Virgo": ("Virgo", "‚ôç"),
    "Libra": ("Libra", "‚ôé"), "Scorpio": ("Scorpio", "‚ôè"), "Sagittarius": ("Sagittarius", "‚ôê"),
    "Capricorn": ("Capricorn", "‚ôë"), "Aquarius": ("Aquarius", "‚ôí"), "Pisces": ("Pisces", "‚ôì"),
}

# ---- phase mapping
# –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ—Ä–∞–∑ ‚Üí (EN-–Ω–∞–∑–≤–∞–Ω–∏–µ, emoji).
# –î–ª—è "–†–∞—Å—Ç—É—â–∞—è/–£–±—ã–≤–∞—é—â–∞—è" –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ —É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å Crescent/Gibbous.
PHASE_EXACT = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ": ("New Moon", "üåë"),
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ": ("Full Moon", "üåï"),
    "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å": ("First Quarter", "üåì"),
    "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å": ("Last Quarter", "üåó"),
    # EN fallbacks
    "New Moon": ("New Moon", "üåë"),
    "Full Moon": ("Full Moon", "üåï"),
    "First Quarter": ("First Quarter", "üåì"),
    "Last Quarter": ("Last Quarter", "üåó"),
}
# –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞—Å—Ç—É—â–µ–π/—É–±—ã–≤–∞—é—â–µ–π
KW_WAXING = ("–†–∞—Å—Ç—É—â", "Waxing")
KW_WANING = ("–£–±—ã–≤–∞", "Waning")

def fmt_percent_or_none(x) -> Optional[int]:
    """–í–µ—Ä–Ω—ë—Ç —Ü–µ–ª–æ–µ 1..99, –∏–Ω–∞—á–µ None (—Å–∫—Ä–æ–µ—Ç —Å–∫–æ–±–∫–∏ –≤ —à–∞–±–ª–æ–Ω–µ)."""
    try:
        p = int(round(float(x)))
    except Exception:
        return None
    return p if 0 < p < 100 else None

# ---------- VoC parsing / status ----------

def parse_voc_utc(start_s: Optional[str], end_s: Optional[str]) -> Tuple[Optional[dt.datetime], Optional[dt.datetime]]:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ 'HH:MM' –∏–ª–∏ 'DD.MM HH:MM' (UTC) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç aware-datetime –≤ UTC.
    –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî (None, None).
    """
    if not start_s or not end_s:
        return None, None

    def _parse_one(s: str) -> dt.datetime:
        s = s.strip()
        today = dt.datetime.utcnow().date()
        if " " in s:  # 'DD.MM HH:MM'
            dpart, tpart = s.split()
            d, m = map(int, dpart.split("."))
            hh, mm = map(int, tpart.split(":"))
            return dt.datetime(today.year, m, d, hh, mm, tzinfo=UTC)
        else:         # 'HH:MM'
            hh, mm = map(int, s.split(":"))
            return dt.datetime(today.year, today.month, today.day, hh, mm, tzinfo=UTC)

    try:
        return _parse_one(start_s), _parse_one(end_s)
    except Exception:
        return None, None

def pretty_duration(mins: int) -> str:
    h, m = mins // 60, mins % 60
    if h and m: return f"‚âà{h}h {m:02d}m"
    if h:       return f"‚âà{h}h"
    return f"‚âà{m}m"

def voc_badge_by_len(minutes: int) -> str:
    if minutes >= 120: return "üü†"
    if minutes >= 60:  return "üü°"
    return "üü¢"

def voc_text_status(start_utc: Optional[dt.datetime], end_utc: Optional[dt.datetime]) -> Tuple[str, str, Optional[int]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (VOC_TEXT, VOC_BADGE, VOC_LEN_MIN).
    –í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞:
     - 'No VoC today'
     - 'VoC passed earlier today (HH:MM‚ÄìHH:MM UTC)'
     - 'VoC now HH:MM‚ÄìHH:MM UTC (‚âà1h 45m)'
     - 'HH:MM‚ÄìHH:MM UTC (‚âà1h 45m)' ‚Äî –µ—Å–ª–∏ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å
    """
    if not start_utc or not end_utc:
        return "No VoC today", "", None

    total_min = max(0, int((end_utc - start_utc).total_seconds() // 60))
    badge_len = voc_badge_by_len(total_min)
    rng = f"{start_utc.strftime('%H:%M')}‚Äì{end_utc.strftime('%H:%M')} UTC"
    pretty = pretty_duration(total_min)

    now = dt.datetime.utcnow().replace(tzinfo=UTC)
    if now < start_utc:
        return f"{rng} ({pretty})", badge_len, total_min
    if start_utc <= now <= end_utc:
        return f"VoC now {rng} ({pretty})", badge_len, total_min
    return f"VoC passed earlier today ({rng})", "‚ö™Ô∏è", total_min

def voc_minutes_if_active(start_utc: Optional[dt.datetime],
                          end_utc: Optional[dt.datetime]) -> Optional[int]:
    """–í–µ—Ä–Ω—ë—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–∫–Ω–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ VoC –∏–¥—ë—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."""
    if not start_utc or not end_utc:
        return None
    now = dt.datetime.utcnow().replace(tzinfo=UTC)
    if start_utc <= now <= end_utc:
        return int((end_utc - start_utc).total_seconds() // 60)
    return None

# ---------- lunar calendar reading ----------

def read_calendar_today():
    cal_path = ROOT / "lunar_calendar.json"
    if not cal_path.exists():
        return None
    data = json.loads(cal_path.read_text(encoding="utf-8"))
    days = data.get("days") or {}
    today = dt.date.today().isoformat()
    return days.get(today)

# ---------- sign / phase helpers ----------

def _sign_en_emoji(sign: Optional[str]):
    if not sign:
        return "‚Äî", ""
    en, emoji = SIGN_MAP.get(sign, (sign, ""))
    return en, emoji

def _phase_from_name_and_percent(name: Optional[str], percent: Optional[int]):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (EN, emoji) –¥–ª—è —Ñ–∞–∑—ã.
    –î–ª—è '–†–∞—Å—Ç—É—â–∞—è/–£–±—ã–≤–∞—é—â–∞—è' —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å Crescent/Gibbous.
    """
    if not name:
        return "‚Äî", ""

    # —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—á–µ—Ç–≤–µ—Ä—Ç–∏/–Ω–æ–≤–æ–ª—É–Ω–∏–µ/–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ)
    if name in PHASE_EXACT:
        return PHASE_EXACT[name]

    # EN —Ç–æ—á–Ω—ã–µ
    if name in PHASE_EXACT:
        return PHASE_EXACT[name]

    low = name.lower()

    # —Ä–∞—Å—Ç—É—â–∞—è
    if any(k.lower() in low for k in KW_WAXING):
        p = None
        try:
            p = int(percent) if percent is not None else None
        except Exception:
            p = None
        if p is not None and p < 50:
            return "Waxing Crescent", "üåí"
        else:
            return "Waxing Gibbous", "üåî"

    # —É–±—ã–≤–∞—é—â–∞—è
    if any(k.lower() in low for k in KW_WANING):
        p = None
        try:
            p = int(percent) if percent is not None else None
        except Exception:
            p = None
        if p is not None and p > 50:
            return "Waning Gibbous", "üåñ"
        else:
            return "Waning Crescent", "üåò"

    # fallback ‚Äî –≤–µ—Ä–Ω—ë–º –∏—Å—Ö–æ–¥–Ω–∏–∫ –±–µ–∑ —ç–º–æ–¥–∑–∏
    return name, ""

# ---------- energy / tip logic ----------

def base_energy_tip(phase_name_ru: str, percent: Optional[int]) -> tuple[str, str]:
    pn = (phase_name_ru or "").lower()
    if "–Ω–æ–≤–æ–ª—É–Ω–∏–µ" in pn or "new moon" in pn:
        return ("Set intentions; keep schedule light.", "Rest, plan, one gentle start.")
    if "–ø–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å" in pn or "first quarter" in pn:
        return ("Take a clear step forward.", "One priority; short focused block.")
    if "—Ä–∞—Å—Ç—É—â" in pn or "waxing" in pn:
        # —Ä–∞–∑–¥–µ–ª—è—Ç—å –Ω–∞ crescent/gibbous –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        return ("Build momentum; refine work.", "Polish & iterate for 20‚Äì40 min.")
    if "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ" in pn or "full moon" in pn:
        return ("Emotions peak; seek balance.", "Grounding + gratitude; avoid big decisions.")
    if "–ø–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å" in pn or "last quarter" in pn:
        return ("Wrap up & declutter.", "Finish, review, release extras.")
    if "—É–±—ã–≤–∞" in pn or "waning" in pn:
        return ("Slow down; restore energy.", "Light tasks, gentle body care.")
    return ("Keep plans light; tune into your body.", "Focus on what matters.")

def energy_icon_for_phase(phase_en: str) -> str:
    """–õ—ë–≥–∫–∞—è –∏–∫–æ–Ω–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ —Ñ–∞–∑–∞–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä—è–¥–æ–º —Å–æ —Å–ª–æ–≤–æ–º Energy."""
    pe = (phase_en or "").lower()
    if "new moon" in pe: return "üåë"
    if "first quarter" in pe: return "üåì"
    if "waxing crescent" in pe: return "üåí"
    if "waxing gibbous" in pe: return "üåî"
    if "full moon" in pe: return "üåï"
    if "last quarter" in pe: return "üåó"
    if "waning gibbous" in pe: return "üåñ"
    if "waning crescent" in pe: return "üåò"
    return ""

def energy_and_tip(phase_name_ru: str, percent: Optional[int], voc_minutes_active: Optional[int]) -> tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (energy_line, tip_line).
    –ï—Å–ª–∏ VoC –∞–∫—Ç–∏–≤–µ–Ω —Å–µ–π—á–∞—Å ‚Äî —É—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å,
    –∏–Ω–∞—á–µ –¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∞–∑–µ.
    """
    if voc_minutes_active is not None:
        if voc_minutes_active >= 180:
            return ("Long VoC ‚Äî keep schedule very light; avoid launches.",
                    "Routine, journaling, cleanup; move decisions after VoC.")
        if voc_minutes_active >= 120:
            return ("VoC ‚Äî avoid launches; favor routine.",
                    "Safe tasks: maintenance, drafts, reading, rest.")
        if voc_minutes_active >= 60:
            return ("Short VoC ‚Äî keep tasks flexible.",
                    "Gentle pace; soft focus & breaks.")
    # –±–∞–∑–æ–≤—ã–µ –ø–æ —Ñ–∞–∑–µ
    return base_energy_tip(phase_name_ru, percent)

# ---------- main ----------

def main():
    today = dt.date.today()
    weekday = dt.datetime.utcnow().strftime("%a")

    item = read_calendar_today() or {}

    # –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    phase_name  = item.get("phase_name") or ""          # RU —Ñ–∞–∑–∞
    phase_pct   = item.get("percent")                   # 0..100 (–º–æ–∂–µ—Ç –±—ã—Ç—å None/"")
    sign_raw    = item.get("sign") or ""                # RU/EN –∑–Ω–∞–∫
    voc_block   = item.get("void_of_course") or {}      # {"start":"...", "end":"..."}

    # --- VoC: —É–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å (no / later / now / earlier) ---
    voc_start_str = (voc_block or {}).get("start")
    voc_end_str   = (voc_block or {}).get("end")
    start_utc, end_utc = parse_voc_utc(voc_start_str, voc_end_str)
    VOC_TEXT, VOC_BADGE, VOC_LEN_MIN = voc_text_status(start_utc, end_utc)
    VOC_LEN_PRETTY = pretty_duration(VOC_LEN_MIN) if isinstance(VOC_LEN_MIN, int) else ""

    # --- –õ—É–Ω–∞: EN-–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —ç–º–æ–¥–∑–∏ (—Å —É—á—ë—Ç–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–ª—è crescent/gibbous) ---
    sign_en,  sign_emoji   = _sign_en_emoji(sign_raw)
    phase_en, phase_emoji  = _phase_from_name_and_percent(phase_name, phase_pct)
    energy_icon            = energy_icon_for_phase(phase_en or phase_name)

    # –≠–Ω–µ—Ä–≥–∏—è/—Å–æ–≤–µ—Ç: —É—á–∏—Ç—ã–≤–∞–µ–º VoC –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ —Å–µ–π—á–∞—Å
    voc_active_mins = voc_minutes_if_active(start_utc, end_utc)
    energy_line, advice_line = energy_and_tip(phase_name, int(phase_pct or 0), voc_active_mins)

    out = {
        "DATE": today.isoformat(),
        "WEEKDAY": weekday,

        # –õ—É–Ω–∞
        "MOON_PHASE": phase_name or "‚Äî",
        "PHASE_EN": phase_en,
        "PHASE_EMOJI": phase_emoji,
        "MOON_PERCENT": fmt_percent_or_none(phase_pct),
        "MOON_SIGN": sign_en,
        "MOON_SIGN_EMOJI": sign_emoji,

        # VoC
        "VOC": VOC_TEXT,               # –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        "VOC_TEXT": VOC_TEXT,
        "VOC_LEN": VOC_LEN_PRETTY,
        "VOC_BADGE": VOC_BADGE,
        "VOC_IS_ACTIVE": voc_active_mins is not None,

        # –≠–Ω–µ—Ä–≥–∏—è/—Å–æ–≤–µ—Ç
        "ENERGY_ICON": energy_icon,
        "ENERGY_LINE": energy_line,
        "ADVICE_LINE": advice_line,
    }

    # –ü–∏—à–µ–º –¢–û–õ–¨–ö–û astro.json
    OUT.write_text(json.dumps(out, ensure_ascii=False, indent=2), encoding="utf-8")
    print(f"[astro] wrote {OUT} ({OUT.stat().st_size} bytes)")

if __name__ == "__main__":
    main()
