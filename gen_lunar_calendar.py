#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
send_monthly_calendar.py
–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Telegram-–∫–∞–Ω–∞–ª.
–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∞–∑–∞–º, –≤—ã–≤–æ–¥ Void-of-Course –∏ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞.
"""

import os, json, asyncio
from pathlib import Path
from collections import OrderedDict

import pendulum
from telegram import Bot, error as tg_err

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ç–æ–∫–µ–Ω / –∫–∞–Ω–∞–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOKEN   = os.getenv("TELEGRAM_TOKEN", "")
CHAT_ID = int(os.getenv("CHANNEL_ID", 0))
TZ      = pendulum.timezone("Asia/Nicosia")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ICON_PHASE = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ":        "üåë",
    "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø":    "üåí",
    "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å":  "üåì",
    "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞":    "üåî",
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":       "üåï",
    "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞":   "üåñ",
    "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å":"üåó",
    "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø":   "üåò",
}

def header(date_str: str) -> str:
    month_year = pendulum.parse(date_str).in_tz(TZ).format("MMMM YYYY").upper()
    return f"üåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {month_year}</b> (Asia/Nicosia)"

def group_by_phase(data: dict) -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:
      {phase, icon, first_date, last_date, phase_time, vc, advice}
    """
    segments: list[dict] = []
    last_name = None
    for dstr, rec in data.items():
        name = rec["phase"].split(" –≤ ")[0]
        icon = ICON_PHASE.get(name, "‚óªÔ∏è")
        if name != last_name:
            segments.append(
                dict(
                    phase = rec["phase"],
                    name  = name,
                    icon  = icon,
                    first_date = dstr,
                    last_date  = dstr,
                    phase_time = rec.get("phase_time",""),
                    vc   = rec.get("void_of_course",{}),
                    advice = rec["advice"][0] if rec.get("advice") else "",
                )
            )
            last_name = name
        else:
            segments[-1]["last_date"] = dstr
    return segments

def format_segment(seg: dict) -> str:
    start = pendulum.parse(seg["first_date"]).format("D.MM")
    end   = pendulum.parse(seg["last_date"]).format("D.MM")
    phase_line = (
        f"<b>{seg['icon']} {seg['phase']}</b> "
        f"({pendulum.parse(seg['phase_time']).in_tz(TZ).format('DD.MM HH:mm')}; "
        f"{start}‚Äì{end})"
    )
    lines = [phase_line]

    vc = seg["vc"]
    if vc and vc.get("start") and vc.get("end"):
        lines.append(f"Void-of-Course: {vc['start']} ‚Üí {vc['end']}")

    if seg["advice"]:
        lines.append(seg["advice"])

    return "\n".join(lines)

def build_summary(sample_record: dict) -> list[str]:
    """–°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –±–µ—Ä—ë–º –∏–∑ –ª—é–±–æ–≥–æ –¥–Ω—è (–æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)."""
    fav = sample_record["favorable_days"]
    unf = sample_record["unfavorable_days"]

    def fmt(lst): return ", ".join(map(str, sorted(lst))) if lst else "‚Äî"

    lines = ["", "‚úÖ <b>–û–±—â–∏–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞:</b> " + fmt(fav["general"])]
    if unf["general"]:
        lines.append("‚ùå <b>–û–±—â–∏–µ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞:</b> " + fmt(unf["general"]))

    icons = {"haircut":"‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∏", "travel":"‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
             "shopping":"üõçÔ∏è –ü–æ–∫—É–ø–∫–∏", "health":"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ"}
    for key, label in icons.items():
        if fav.get(key):
            lines.append(f"{label}: {fmt(fav[key])}")
    return lines

def build_month_message(data: dict) -> str:
    data = OrderedDict(sorted(data.items()))         # —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫
    segs = group_by_phase(data)

    lines = [header(next(iter(data)) ), ""]
    for s in segs: lines += [format_segment(s), "‚Äî"]

    # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π ¬´‚Äî¬ª –≤ –∫–æ–Ω—Ü–µ
    if lines[-1] == "‚Äî": lines.pop()

    # –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ V/C
    lines += build_summary(next(iter(data.values())))
    lines += [
        "", "<i><b>–ß—Ç–æ —Ç–∞–∫–æ–µ Void-of-Course?</b></i>",
        ("Void-of-Course (–ø–µ—Ä–∏–æ–¥ ¬´–±–µ–∑ –∫—É—Ä—Å–∞¬ª) ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –∫–æ–≥–¥–∞ –õ—É–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ "
         "–∞—Å–ø–µ–∫—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º –∑–Ω–∞–∫–µ –∏ –µ—â—ë –Ω–µ –≤–æ—à–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π. –≠–Ω–µ—Ä–≥–∏—è –¥–Ω–µ–π —Ä–∞—Å—Å–µ–∏–≤–∞–µ—Ç—Å—è; "
         "–¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª –ª—É—á—à–µ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏—è V/C.")
    ]
    return "\n".join(lines)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    path = Path(__file__).parent / "lunar_calendar.json"
    if not path.exists():
        print("‚ùå lunar_calendar.json not found")
        return
    data = json.loads(path.read_text(encoding="utf-8"))
    msg  = build_month_message(data)

    bot = Bot(token=TOKEN)
    try:
        # Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤. ‚Äì –¥–µ–ª–∏–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        while msg:
            chunk, msg = msg[:4000], msg[4000:]
            await bot.send_message(
                CHAT_ID, chunk,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        print("‚úÖ Monthly calendar sent.")
    except tg_err.TelegramError as e:
        print(f"‚ùå Telegram error: {e}")

if __name__ == "__main__":
    asyncio.run(main())
