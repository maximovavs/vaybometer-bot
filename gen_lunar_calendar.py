#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
gen_lunar_calendar.py
~~~~~~~~~~~~~~~~~~~~~
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç lunar_calendar.json –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ —Å —Ç–æ—á–Ω—ã–º–∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏:
  - phase         : "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ –≤ –û–≤–Ω–µ (100% –æ—Å–≤–µ—â.)"
  - phase_time    : ISO-–≤—Ä–µ–º—è UT –º–æ–º–µ–Ω—Ç–∞ —Ñ–∞–∑—ã
  - percent       : 100
  - sign          : "–û–≤–µ–Ω"
  - aspects       : ["‚òåSaturn (+0.4¬∞)", ‚Ä¶]
  - void_of_course: {"start":"‚Ä¶Z","end":"‚Ä¶Z"}
  - next_event    : "‚Üí –ß–µ—Ä–µ–∑ 2 –¥–Ω. –ù–æ–≤–æ–ª—É–Ω–∏–µ –≤ –ë–ª–∏–∑–Ω–µ—Ü–∞—Ö"
  - advice        : ["‚Ä¶","‚Ä¶","‚Ä¶"]
  - favorable_days / unfavorable_days
"""

import os, json, math, random
from pathlib import Path
from typing import Dict, Any, List, Optional

import pendulum
import swisseph as swe

# GPT-–∫–ª–∏–µ–Ω—Ç
try:
    from openai import OpenAI
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
except ImportError:
    client = None

TZ = pendulum.timezone("UTC")

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏...
CATEGORIES = {
    "general":  {"favorable":[1,2,3,4,7,28,29], "unfavorable":[13,20,23,24,27]},
    "haircut":  {"favorable":[1,2,4,7,9,10,18,19,24,25,31],"unfavorable":[]},
    "travel":   {"favorable":[5,7,14,15],           "unfavorable":[]},
    "shopping": {"favorable":[3,6,9,12,14,17,20,25],"unfavorable":[13,20,23,24,27]},
    "health":   {"favorable":[1,2,3,4,7,28,29],      "unfavorable":[]},
}

ASPECTS = {0:"‚òå",60:"‚öπ",90:"‚ñ°",120:"‚ñ≥",180:"‚òç"}
ORBIS   = {0:5.0,60:4.0,90:3.0,120:4.0,180:5.0}

PLANETS = {
    "Sun": swe.SUN, "Mercury": swe.MERCURY, "Venus": swe.VENUS,
    "Mars": swe.MARS, "Jupiter": swe.JUPITER, "Saturn": swe.SATURN,
    "Uranus": swe.URANUS, "Neptune": swe.NEPTUNE, "Pluto": swe.PLUTO,
}

FALLBACK = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ": [
        "–†–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã: –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π —Ü–µ–ª–∏ –º–µ—Å—è—Ü–∞ üìù‚òÄÔ∏è",
        "–ó–¥–æ—Ä–æ–≤—å–µ: –ü–µ–π –≤–æ–¥—É —Å –ª–∏–º–æ–Ω–æ–º üíßüçã",
        "–†–∏—Ç—É–∞–ª: –ú–µ–¥–∏—Ç–∞—Ü–∏—è —É –º–æ—Ä—è üßòüåä",
    ],
    # –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∑—ã...
}

def jd_to_dt(jd: float) -> pendulum.DateTime:
    """JD ‚Üí pendulum UTC"""
    return pendulum.from_timestamp((jd-2440587.5)*86400, tz=TZ)

def compute_phase_and_sign(jd: float):
    slon = swe.calc_ut(jd, swe.SUN)[0][0]
    mlon = swe.calc_ut(jd, swe.MOON)[0][0]
    angle = (mlon - slon) % 360
    pct = int(round((1 - math.cos(math.radians(angle)))/2*100))
    if angle < 22.5 or angle>=337.5:     name="–ù–æ–≤–æ–ª—É–Ω–∏–µ"
    elif angle<67.5:                     name="–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø"
    elif angle<112.5:                    name="–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    elif angle<157.5:                    name="–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞"
    elif angle<202.5:                    name="–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    elif angle<247.5:                    name="–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞"
    elif angle<292.5:                    name="–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    else:                                name="–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø"
    sign = ["–û–≤–µ–Ω","–¢–µ–ª–µ—Ü","–ë–ª–∏–∑–Ω–µ—Ü—ã","–†–∞–∫","–õ–µ–≤","–î–µ–≤–∞",
            "–í–µ—Å—ã","–°–∫–æ—Ä–ø–∏–æ–Ω","–°—Ç—Ä–µ–ª–µ—Ü","–ö–æ–∑–µ—Ä–æ–≥","–í–æ–¥–æ–ª–µ–π","–†—ã–±—ã"][int(mlon//30)]
    return name, pct, sign

def next_phase_jd(jd: float, phase: str) -> float:
    """JD —Å–ª–µ–¥—É—é—â–µ–π —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ–∞–∑—ã."""
    if phase=="–ù–æ–≤–æ–ª—É–Ω–∏–µ":          return swe.next_new_moon(jd)
    if phase=="–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":         return swe.next_full_moon(jd)
    if phase=="–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å":    return swe.next_first_quarter(jd)
    if phase=="–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å": return swe.next_last_quarter(jd)
    # –¥–ª—è —Å–µ—Ä–ø–æ–≤ –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ –Ω–æ–≤–æ–ª—É–Ω–∏–µ/–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ
    return swe.next_new_moon(jd)

def compute_next_event(jd: float) -> str:
    now = jd_to_dt(jd).date()
    # –Ω–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –∏–∑ –Ω–æ–≤–æ–ª. –∏ –ø–æ–ª–Ω–æ–ª.
    jn = swe.next_new_moon(jd);   dn = jd_to_dt(jn).date()
    jf = swe.next_full_moon(jd);  df = jd_to_dt(jf).date()
    if (dn-now) <= (df-now):
        d,j = dn,jn
    else:
        d,j = df,jf
    days = (d-now).days
    name,_pct,sign = compute_phase_and_sign(j)
    return f"‚Üí –ß–µ—Ä–µ–∑ {days} –¥–Ω. {name} –≤ {sign}"

def compute_aspects(jd: float) -> List[str]:
    mlon = swe.calc_ut(jd, swe.MOON)[0][0]
    out=[]
    for n,p in PLANETS.items():
        pl = swe.calc_ut(jd,p)[0][0]
        diff=abs((mlon-pl+180)%360-180)
        for ang,s in ASPECTS.items():
            if abs(diff-ang)<=ORBIS[ang]:
                out.append(f"{s}{n} ({diff-ang:+.1f}¬∞)")
    return out

def compute_void_of_course(jd: float) -> Dict[str,Optional[str]]:
    # –≤–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    ...

def compute_advice(date: pendulum.Date, phase: str) -> List[str]:
    cat,_,_ = phase.partition(" –≤ ")
    if client:
        prompt = (
            f"–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –∞—Å—Ç—Ä–æ–ª–æ–≥, –¥–∞—Ç–∞ {date}, —Ñ–∞–∑–∞ {phase}. "
            "–î–∞–π 3 —Å–æ–≤–µ—Ç–∞ (—Ä–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã; —á—Ç–æ –æ—Ç–ª–æ–∂–∏—Ç—å; —Ä–∏—Ç—É–∞–ª –¥–Ω—è)."
        )
        resp = client.chat.completions.create(
            model="gpt-4o-mini", temperature=0.7,
            messages=[{"role":"user","content":prompt}]
        )
        lines = [l.strip() for l in resp.choices[0].message.content.splitlines() if l.strip()]
        return lines[:3]
    return random.sample(FALLBACK.get(cat, []), 3)

def generate_calendar(year:int, month:int) -> Dict[str,Any]:
    swe.set_ephe_path('.')  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    start=pendulum.date(year,month,1)
    end  =start.end_of('month')
    cal={}
    d=start
    while d<=end:
        jd=swe.julday(d.year,d.month,d.day,0.0)
        name,pct,sign = compute_phase_and_sign(jd)
        # —Ç–æ—á–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ–π —Ñ–∞–∑—ã
        jt = next_phase_jd(jd,name)
        cal[d.to_date_string()]={
            "phase":         f"{name} –≤ {sign} ({pct}% –æ—Å–≤–µ—â.)",
            "phase_time":    jd_to_dt(jt).to_iso8601_string(),
            "percent":       pct,
            "sign":          sign,
            "aspects":       compute_aspects(jd),
            "void_of_course": compute_void_of_course(jd),
            "next_event":    compute_next_event(jd),
            "advice":        compute_advice(d, name),
            "favorable_days":   {k:v["favorable"]   for k,v in CATEGORIES.items()},
            "unfavorable_days": {k:v["unfavorable"] for k,v in CATEGORIES.items()},
        }
        d=d.add(days=1)
    return cal

def main():
    today=pendulum.today()
    data=generate_calendar(today.year,today.month)
    p=Path(__file__).parent/"lunar_calendar.json"
    p.write_text(json.dumps(data,ensure_ascii=False,indent=2), encoding="utf-8")
    print(f"‚úÖ lunar_calendar.json —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {today.format('MMMM YYYY')}")

if __name__=="__main__":
    main()
