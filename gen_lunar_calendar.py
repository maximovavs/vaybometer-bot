#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
gen_lunar_calendar.py  
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è lunar_calendar.json –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞:
  - phase       ‚Äî —Ñ–∞–∑–∞ –õ—É–Ω—ã (–∏–∫–æ–Ω–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ, –∑–Ω–∞–∫, % –æ—Å–≤–µ—â.) + —ç—Ñ—Ñ–µ–∫—Ç
  - advice      ‚Äî GPT-—Å–æ–≤–µ—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é
  - next_event  ‚Äî –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–æ–Ω—Å –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è (<‚Äì —á–µ—Ä–µ–∑ n –¥–Ω–µ–π)
  - favorable_days, unfavorable_days ‚Äî —Å–ø–∏—Å–∫–∏ –¥–∞—Ç (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
"""

import json
import math
import datetime as dt
from pathlib import Path
from typing import Any, Dict

import pendulum
import swisseph as swe

from gpt import gpt_blurb
from astro import upcoming_event

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SYNODIC_MONTH = 29.53058867

SIGNS = [
    "–û–≤–Ω–µ", "–¢–µ–ª—å—Ü–µ", "–ë–ª–∏–∑–Ω–µ—Ü–∞—Ö", "–†–∞–∫–µ", "–õ—å–≤–µ", "–î–µ–≤–µ",
    "–í–µ—Å–∞—Ö", "–°–∫–æ—Ä–ø–∏–æ–Ω–µ", "–°—Ç—Ä–µ–ª—å—Ü–µ", "–ö–æ–∑–µ—Ä–æ–≥–µ", "–í–æ–¥–æ–ª–µ–µ", "–†—ã–±–∞—Ö",
]
EFFECT = [
    "–ø—Ä–∏–¥–∞—ë—Ç —Ä–µ—à–∏–º–æ—Å—Ç–∏", "–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç", "—É—Å–∏–ª–∏–≤–∞–µ—Ç –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    "–¥–µ–ª–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–µ–µ", "–ø–æ–¥–Ω–∏–º–∞–µ—Ç —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É", "—Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫",
    "–ø—Ä–æ—â–∞–µ—Ç –º–µ–ª–æ—á–∏", "—É–≥–ª—É–±–ª—è–µ—Ç —á—É–≤—Å—Ç–≤–∞", "—Ç–æ–ª–∫–∞–µ—Ç –∫ –æ—Ç–∫—Ä—ã—Ç–∏—è–º",
    "—Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç –Ω–∞ —Ü–µ–ª—è—Ö", "–±—É–¥–∏—Ç –∏–¥–µ–∏", "–∑–æ–≤—ë—Ç –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º",
]
MOON_ICONS = "üåëüåíüåìüåîüåïüåñüåóüåò"


def compute_phase(d: pendulum.Date) -> str:
    """–í—ã—á–∏—Å–ª—è–µ–º —Ñ–∞–∑—É –õ—É–Ω—ã, –∑–Ω–∞–∫, % –æ—Å–≤–µ—â. –∏ —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã d."""
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ UTC datetime
    ref = dt.datetime(d.year, d.month, d.day)
    jd = swe.julday(ref.year, ref.month, ref.day)
    sun_lon = swe.calc_ut(jd, swe.SUN)[0][0]
    moon_lon = swe.calc_ut(jd, swe.MOON)[0][0]

    phase = ((moon_lon - sun_lon + 360) % 360) / 360  # 0‚Ä¶1
    illum = round(abs(math.cos(math.pi * phase)) * 100)
    icon = MOON_ICONS[int(phase * 8) % 8]

    if illum < 5:
        name = "–ù–æ–≤–æ–ª—É–Ω–∏–µ"
    elif illum > 95:
        name = "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    elif phase < 0.5:
        name = "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞"
    else:
        name = "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞"

    sign = SIGNS[int(moon_lon // 30) % 12]
    eff  = EFFECT[int(moon_lon // 30) % 12]

    return f"{icon} {name} –≤ {sign} ({illum}% –æ—Å–≤–µ—â.) ‚Äî {eff}"


def generate_calendar(year: int, month: int) -> Dict[str, Dict[str, Any]]:
    result: Dict[str, Dict[str, Any]] = {}
    d = pendulum.date(year, month, 1)

    while d.month == month:
        key = d.to_date_string()  # "YYYY-MM-DD"

        # 1) Phase
        phase_str = compute_phase(d)

        # 2) GPT-—Å–æ–≤–µ—Ç (summary + —Å–ø–∏—Å–æ–∫ tips)
        summary, tips = gpt_blurb(phase_str)
        advice = " ".join(tips) if tips else summary

        # 3) –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        nxt = upcoming_event() or ""

        # 4) –°—Ç–∞—Ä—ã–µ —Å–ø–∏—Å–∫–∏ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á—ë—Ç–∞)
        # –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞: –≤—Å–µ –¥–Ω–∏ –ø–µ—Ä–≤–æ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞ ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ
        days_since = (d - pendulum.date(year, month, 1)).days
        favorable = []
        unfavorable = []
        # –ø—Ä–∏–º–µ—Ä: –ø–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å (day ~ SYNODIC_MONTH*0.25) –∫–∞–∫ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π
        if 0 <= days_since < SYNODIC_MONTH * 0.25:
            favorable.append(d.day)
        else:
            unfavorable.append(d.day)

        result[key] = {
            "phase":            phase_str,
            "advice":           advice,
            "next_event":       nxt,
            "favorable_days":   favorable,
            "unfavorable_days": unfavorable,
        }

        d = d.add(days=1)

    return result


def main():
    today = pendulum.today()
    data = generate_calendar(today.year, today.month)
    out = Path(__file__).parent / "lunar_calendar.json"
    out.write_text(json.dumps(data, ensure_ascii=False, indent=2))
    print(f"‚úÖ –§–∞–π–ª {out.name} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {today.format('MMMM YYYY')}")


if __name__ == "__main__":
    main()
