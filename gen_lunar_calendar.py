#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
gen_lunar_calendar.py
~~~~~~~~~~~~~~~~~~~~~
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª lunar_calendar.json –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ —Å —Ç–æ—á–Ω—ã–º–∏ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏
–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.

–í—ã–¥–∞—ë—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã:
  - phase         : "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ –≤ –û–≤–Ω–µ (100% –æ—Å–≤–µ—â.)"
  - percent       : 100
  - sign          : "–û–≤–µ–Ω"
  - aspects       : ["‚òåSaturn (+0.4¬∞)", "‚òçMars (‚àí0.2¬∞)", ‚Ä¶]
  - void_of_course: {"start":None,"end":None}  # –∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å
  - next_event    : "‚Üí –ß–µ—Ä–µ–∑ 2 –¥–Ω. –ù–æ–≤–æ–ª—É–Ω–∏–µ –≤ –ë–ª–∏–∑–Ω–µ—Ü–∞—Ö"
  - advice        : ["‚Ä¶","‚Ä¶","‚Ä¶"]  # —Ç—Ä–∏ —Å–æ–≤–µ—Ç–∞ GPT –∏–ª–∏ fallback
  - favorable_days: {"general":[‚Ä¶], "haircut":[‚Ä¶], ‚Ä¶}
  - unfavorable_days: {"general":[‚Ä¶], ‚Ä¶}
"""

import os
import json
import math
import random
from pathlib import Path
from typing import Dict, Any, List

import pendulum
import swisseph as swe

# ‚îÄ‚îÄ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π GPT-–∫–ª–∏–µ–Ω—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
try:
    from openai import OpenAI
    OPENAI_KEY = os.getenv("OPENAI_API_KEY")
    gpt = OpenAI(api_key=OPENAI_KEY) if OPENAI_KEY else None
except ImportError:
    gpt = None

# ‚îÄ‚îÄ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–Ω–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CATEGORIES: Dict[str, Dict[str, List[int]]] = {
    "general":  {"favorable":[1,2,3,4,7,28,29],     "unfavorable":[13,20,23,24,27]},
    "haircut":  {"favorable":[1,2,4,7,9,10,18,19,24,25,31], "unfavorable":[]},
    "travel":   {"favorable":[5,7,14,15],            "unfavorable":[]},
    "shopping": {"favorable":[3,6,9,12,14,17,20,25], "unfavorable":[13,20,23,24,27]},
    "health":   {"favorable":[1,2,3,4,7,28,29],      "unfavorable":[]},
}

# ‚îÄ‚îÄ –ê—Å–ø–µ–∫—Ç—ã –∏ –æ—Ä–±–∏—Å—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ASPECTS = {0:"‚òå", 60:"‚öπ", 90:"‚ñ°", 120:"‚ñ≥", 180:"‚òç"}
ORBIS   = {0:5.0, 60:4.0, 90:3.0, 120:4.0, 180:5.0}

PLANETS = {
    "Sun":     swe.SUN,
    "Mercury": swe.MERCURY,
    "Venus":   swe.VENUS,
    "Mars":    swe.MARS,
    "Jupiter": swe.JUPITER,
    "Saturn":  swe.SATURN,
    "Uranus":  swe.URANUS,
    "Neptune": swe.NEPTUNE,
    "Pluto":   swe.PLUTO,
}

# ‚îÄ‚îÄ –§–æ–ª–±—ç–∫-—Å–ø–∏—Å–∫–∏ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —Ñ–∞–∑–∞–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
FALLBACK_ADVICE: Dict[str, List[str]] = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ": [
        "–†–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã: –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π —Ü–µ–ª–∏ –º–µ—Å—è—Ü–∞, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—è—Å—å –∫–∏–ø—Ä—Å–∫–∏–º —Å–æ–ª–Ω—Ü–µ–º üìù‚òÄÔ∏è",
        "–ó–¥–æ—Ä–æ–≤—å–µ: –ù–∞—á–Ω–∏ –¥–µ–Ω—å —Å –≤–æ–¥—ã –∏ –ª–∏–º–æ–Ω–∞ –∏–∑ —Å–∞–¥–æ–≤ –õ–∏–º–∞—Å—Å–æ–ª–∞ üíßüçã",
        "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ: –°–æ–∑–¥–∞–π –º—É–¥–±–æ—Ä–¥ –º–µ—á—Ç—ã, —Å–∏–¥—è –≤ –∫–∞—Ñ–µ –ü–∞—Ñ–æ—Å–∞ üìå",
    ],
    "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø": [
        "–†–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã: –°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—è—Å—å —ç–Ω–µ—Ä–≥–∏–µ–π –ö–∏–ø—Ä–∞ üöÄ",
        "–ó–¥–æ—Ä–æ–≤—å–µ: –£—Ç—Ä–µ–Ω–Ω—è—è –π–æ–≥–∞ –Ω–∞ –ø–ª—è–∂–µ –õ–∞—Ä–Ω–∞–∫–∏ –¥–ª—è –∑–∞—Ä—è–¥–∞ üßò‚Äç‚ôÄÔ∏è",
        "–†–∏—Ç—É–∞–ª: –î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–¥ –æ–ª–∏–≤–∞–º–∏ –≤ –û–º–æ–¥–æ—Å–µ üå¨Ô∏èüå≥",
    ],
    "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å": [
        "–†–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã: –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö, –∫–∞–∫ –∫–∏–ø—Ä—Å–∫–∏–π –≤–∏–Ω–æ–¥–µ–ª üçá",
        "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ: –ü—Ä–æ–≤–µ–¥–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –≤ —Ç–µ–Ω–∏ –¢—Ä–æ–æ–¥–æ—Å–∞ üé®",
        "–†–∏—Ç—É–∞–ª: –¢–∞–π–º-–±–ª–æ–∫–∏–Ω–≥ –¥–ª—è –¥–µ–ª, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä—ã–Ω–∫–∞–º–∏ –ù–∏–∫–æ—Å–∏–∏ ‚è≥",
    ],
    "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞": [
        "–†–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã: –ó–∞–ø—É—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç, –∫–∞–∫ —Ä–µ–≥–∞—Ç–∞ –≤ –õ–∞—Ä–Ω–∞–∫–µ üöÄ‚õµ",
        "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ: –†–∏—Å—É–π –∏–ª–∏ –ø–∏—à–∏, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—è—Å—å –∑–∞–∫–∞—Ç–∞–º–∏ –ö–∏–ø—Ä–∞ üé®üåÖ",
        "–†–∏—Ç—É–∞–ª: –ô–æ–≥–∞ –ø–æ–¥ –æ–ª–∏–≤–∞–º–∏ –¥–ª—è —Å–∏–Ω–µ—Ä–≥–∏–∏ —Å –ª—É–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π üßò‚Äç‚ôÄÔ∏è",
    ],
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ": [
        "–†–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã: –ü—Ä–æ–≤–µ—Ä—å –±—é–¥–∂–µ—Ç, –∫–∞–∫ —Ç–æ—Ä–≥–æ–≤—Ü—ã –ù–∏–∫–æ—Å–∏–∏ üí∞",
        "–†–∏—Ç—É–∞–ª: –ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ —É –º–æ—Ä—è –≤ –ê–π—è-–ù–∞–ø–µ üå¨Ô∏è",
        "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ: –ü–∏—à–∏ –∏–ª–∏ —Ä–∏—Å—É–π –ø–æ–¥ –∑–≤—ë–∑–¥–∞–º–∏ –ü–∞—Ñ–æ—Å–∞ üåïüé®",
    ],
    "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞": [
        "–†–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã: –ü–æ–¥–≤–µ–¥–∏ –∏—Ç–æ–≥–∏, –∫–∞–∫ –≤–∏–Ω–æ–¥–µ–ª—ã –ø–æ—Å–ª–µ —É—Ä–æ–∂–∞—è üîÑ",
        "–†–∏—Ç—É–∞–ª: –î–µ—Ç–æ–∫—Å-–¥–µ–Ω—å —Å –æ–≤–æ—â–∞–º–∏ –∏–∑ —Å–∞–¥–æ–≤ –¢—Ä–æ–æ–¥–æ—Å–∞ ü•£",
        "–û—Ç–ª–æ–∂–∏: –õ–∏—à–Ω–∏–µ —Ç—Ä–∞—Ç—ã ‚Äì –ª—É—á—à–µ –∫—É–ø–∏ –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ üõëü´í",
    ],
    "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å": [
        "–†–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã: –ó–∞–≤–µ—Ä—à–∞–π –¥–µ–ª–∞, –∫–∞–∫ —Ä—ã–±–∞–∫–∏ —Å–µ—Ç–∏ –≤ –ü–∞—Ñ–æ—Å–µ ‚úîÔ∏è",
        "–†–∏—Ç—É–∞–ª: –î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–¥ –∑–≤—ë–∑–¥–∞–º–∏ –¢—Ä–æ–æ–¥–æ—Å–∞ üå¨Ô∏èüå≥",
        "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ: –°–æ—Å—Ç–∞–≤—å –º–∞–Ω–∏—Ñ–µ—Å—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏, –∫–∞–∫ –≤ –û–º–æ–¥–æ—Å–µ üôå",
    ],
    "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø": [
        "–†–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã: –°–≤–µ—Ä—å –ø–ª–∞–Ω—ã, –∫–∞–∫ —Ç–æ—Ä–≥–æ–≤—Ü—ã –õ–µ—Ñ–∫–∞—Ä—ã üìã",
        "–û—Ç–ª–æ–∂–∏: –ù–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è ‚Äì –ª—É—á—à–µ —á–∞–π —Å —Ç—Ä–∞–≤–∞–º–∏ –¢—Ä–æ–æ–¥–æ—Å–∞ üåø",
        "–†–∏—Ç—É–∞–ª: –ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ –ø–æ–¥ –∑–≤—ë–∑–¥–∞–º–∏ –ü–∞—Ñ–æ—Å–∞ üåå",
    ],
}


def jd_to_datetime(jd: float) -> pendulum.DateTime:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —é–ª–∏–∞–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è UT –≤ pendulum DateTime (UTC)."""
    ts = (jd - 2440587.5) * 86400.0
    return pendulum.from_timestamp(ts, tz="UTC")


def compute_phase_and_sign(jd_ut: float):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∑—É, % –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏ –∏ –∑–Ω–∞–∫ –õ—É–Ω—ã."""
    sun_lon  = swe.calc_ut(jd_ut, swe.SUN)[0][0]
    moon_lon = swe.calc_ut(jd_ut, swe.MOON)[0][0]
    angle    = (moon_lon - sun_lon) % 360.0
    illum    = int(round((1 - math.cos(math.radians(angle))) / 2 * 100))

    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã –ø–æ —É–≥–ª—É
    if   angle < 22.5:     name = "–ù–æ–≤–æ–ª—É–Ω–∏–µ"
    elif angle < 67.5:     name = "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø"
    elif angle < 112.5:    name = "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    elif angle < 157.5:    name = "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞"
    elif angle < 202.5:    name = "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    elif angle < 247.5:    name = "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞"
    elif angle < 292.5:    name = "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    else:                  name = "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø"

    # –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
    idx   = int(moon_lon // 30) % 12
    signs = ["–û–≤–µ–Ω","–¢–µ–ª–µ—Ü","–ë–ª–∏–∑–Ω–µ—Ü—ã","–†–∞–∫","–õ–µ–≤","–î–µ–≤–∞",
             "–í–µ—Å—ã","–°–∫–æ—Ä–ø–∏–æ–Ω","–°—Ç—Ä–µ–ª–µ—Ü","–ö–æ–∑–µ—Ä–æ–≥","–í–æ–¥–æ–ª–µ–π","–†—ã–±—ã"]
    sign  = signs[idx]

    phase_str = f"{name} –≤ {sign} ({illum}% –æ—Å–≤–µ—â.)"
    return phase_str, illum, sign


def compute_aspects(jd_ut: float) -> List[str]:
    """–ò—â–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –õ—É–Ω—ã –∫ –ø–ª–∞–Ω–µ—Ç–∞–º."""
    moon_lon = swe.calc_ut(jd_ut, swe.MOON)[0][0]
    out: List[str] = []
    for pname, pid in PLANETS.items():
        pl_lon = swe.calc_ut(jd_ut, pid)[0][0]
        diff   = abs((moon_lon - pl_lon + 180) % 360 - 180)
        for ang, sym in ASPECTS.items():
            orb = ORBIS.get(ang, 3.0)
            if abs(diff - ang) <= orb:
                out.append(f"{sym}{pname} ({diff-ang:+.1f}¬∞)")
    return out


def compute_advice_list(d: pendulum.Date, phase_str: str) -> List[str]:
    """–¢—Ä–∏ —Å–æ–≤–µ—Ç–∞ –æ—Ç GPT –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π fallback."""
    phase_name = phase_str.split(" –≤ ")[0]
    if gpt:
        prompt = (
            f"–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ —Å —á—É–≤—Å—Ç–≤–æ–º —Å—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–æ–≥–æ —é–º–æ—Ä–∞. –ù–æ –±—É–¥—å –∫—Ä–∞—Ç–æ–∫, –∫–∞–∫ –±—É–¥—Ç–æ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å—Ç–æ–∏—Ç –¥–æ—Ä–æ–≥–æ."
            f"–î–∞—Ç–∞ {d.to_date_string()}, —Ñ–∞–∑–∞: {phase_str}. "
            "–î–∞–π —Ä–æ–≤–Ω–æ —Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–∞ —Å —ç–º–æ–¥–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö:\n"
            "‚Ä¢ —Ä–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã\n‚Ä¢ —á—Ç–æ –æ—Ç–ª–æ–∂–∏—Ç—å\n‚Ä¢ —Ä–∏—Ç—É–∞–ª –¥–Ω—è"
        )
        resp = gpt.chat.completions.create(
            model="gpt-4o-mini", temperature=0.7,
            messages=[{"role":"user","content":prompt}]
        )
        lines = [ln.strip() for ln in resp.choices[0].message.content.splitlines() if ln.strip()]
        return lines[:3]
    else:
        pool = FALLBACK_ADVICE.get(phase_name, FALLBACK_ADVICE["–ù–æ–≤–æ–ª—É–Ω–∏–µ"])
        return random.sample(pool, k=min(3, len(pool)))


def generate_calendar(year: int, month: int) -> Dict[str, Any]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞."""
    swe.set_ephe_path('.')  # –ø—É—Ç—å –∫ —ç—Ñ–µ–º–µ—Ä–∏–¥–∞–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    start = pendulum.date(year, month, 1)
    end   = start.end_of('month')
    cal: Dict[str, Any] = {}

    # 1) –°–æ–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    d = start
    while d <= end:
        jd_ut = swe.julday(d.year, d.month, d.day, 0.0)
        phase_str, illum, sign = compute_phase_and_sign(jd_ut)
        cal[d.to_date_string()] = {
            "phase":           phase_str,
            "percent":         illum,
            "sign":            sign,
            "aspects":         compute_aspects(jd_ut),
            "void_of_course":  {"start": None, "end": None},  # TODO: –Ω–∞—Å—Ç–æ—è—â–∏–π V/C
            "next_event":      "",  # –∑–∞–ø–æ–ª–Ω–∏–º –Ω–∏–∂–µ
            "advice":          compute_advice_list(d, phase_str),
            "favorable_days":  {cat: CATEGORIES[cat]["favorable"]   for cat in CATEGORIES},
            "unfavorable_days":{cat: CATEGORIES[cat]["unfavorable"] for cat in CATEGORIES},
        }
        d = d.add(days=1)

    # 2) –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ next_event
    dates = sorted(cal.keys())
    for i, today_str in enumerate(dates):
        today_dt = pendulum.parse(today_str)
        nxt = None
        for future_str in dates[i+1:]:
            ph = cal[future_str]["phase"]
            if "–ù–æ–≤–æ–ª—É–Ω–∏–µ" in ph or "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ" in ph:
                nxt = future_str
                break
        if nxt:
            delta = (pendulum.parse(nxt) - today_dt).days
            cal[today_str]["next_event"] = f"‚Üí –ß–µ—Ä–µ–∑ {delta} –¥–Ω. {cal[nxt]['phase']}"
        else:
            cal[today_str]["next_event"] = "‚Üí –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å–∫–æ—Ä–æ‚Ä¶"

    return cal


def main():
    today = pendulum.today()
    data  = generate_calendar(today.year, today.month)
    out   = Path(__file__).parent / "lunar_calendar.json"
    out.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    print(f"‚úÖ lunar_calendar.json —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {today.format('MMMM YYYY')}")


if __name__ == "__main__":
    main()
