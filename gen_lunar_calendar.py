#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
gen_lunar_calendar.py
~~~~~~~~~~~~~~~~~~~~~
Генерирует файл lunar_calendar.json для текущего месяца с точными астрономическими расчётами
и профессиональными рекомендациями.

Для каждой даты рассчитывает:
  - phase         : "Полнолуние в Овне (100% освещ.)"
  - percent       : 100
  - sign          : "Овен"
  - aspects       : ["☌Saturn (+0.4°)", "☍Mars (−0.2°)", …]
  - void_of_course: {"start":"2025-06-17T04:12","end":"2025-06-17T13:45"}  (пока заглушка)
  - next_event    : "→ Через 2 дн. Новолуние в Близнецах"
  - advice        : ["Работа/финансы: …", "Что отложить: …", "Ритуал дня: …"]
  - favorable_days: {"general":[…], "haircut":[…], …}
  - unfavorable_days: {"general":[…], …}
"""

import os
import json
import math
import random
from pathlib import Path
from typing import Dict, Any, List, Optional

import pendulum
import swisseph as swe

# ── Опциональный GPT-клиент ───────────────────────────────
try:
    from openai import OpenAI
    OPENAI_KEY = os.getenv("OPENAI_API_KEY")
    gpt = OpenAI(api_key=OPENAI_KEY) if OPENAI_KEY else None
except ImportError:
    gpt = None

# ── Категории дней ────────────────────────────────────────
CATEGORIES: Dict[str, Dict[str, List[int]]] = {
    "general":  {"favorable":[1,2,3,4,7,28,29],     "unfavorable":[13,20,23,24,27]},
    "haircut":  {"favorable":[1,2,4,7,9,10,18,19,24,25,31], "unfavorable":[]},
    "travel":   {"favorable":[5,7,14,15],            "unfavorable":[]},
    "shopping": {"favorable":[3,6,9,12,14,17,20,25], "unfavorable":[13,20,23,24,27]},
    "health":   {"favorable":[1,2,3,4,7,28,29],      "unfavorable":[]},
}

# ── Аспекты и орбисы ─────────────────────────────────────
ASPECTS = {0:"☌", 60:"⚹", 90:"□", 120:"△", 180:"☍"}
ORBIS   = {0:5.0, 60:4.0, 90:3.0, 120:4.0, 180:5.0}

PLANETS = {
    "Sun":     swe.SUN,
    "Mercury": swe.MERCURY,
    "Venus":   swe.VENUS,
    "Mars":    swe.MARS,
    "Jupiter": swe.JUPITER,
    "Saturn":  swe.SATURN,
    "Uranus":  swe.URANUS,
    "Neptune": swe.NEPTUNE,
    "Pluto":   swe.PLUTO,
}

# ── Фолбэк-советы по фазам ─────────────────────────────────
FALLBACK_ADVICE: Dict[str, List[str]] = {
    "Новолуние": [
        "Работа/финансы: Запланируй и зафиксируй цели месяца 📝",
        "Что отложить: Откажись от импульсивных покупок 💸",
        "Ритуал дня: Мини-медитация на очистку ума 🧘",
        "Начни новый проект с короткой медитации на цели 🧘",
        "Запиши свои намерения на бумаге и держи их на виду 📝",
        "Очисти рабочее пространство от хлама — свежую энергию не помещают 📂",
        "Сделай digital detox на час — мозг скажет спасибо 📵",
        "Создай мудборд мечты в Pinterest и вдохновляйся визуалами 📌",
        "Запусти утреннюю привычку: выпей стакан воды с лимоном 💧🍋",
        "Поставь конечную цель месяца и разбей её на мелкие шаги 🗓️",
        "Отправь друзьям анонс своих планов — совместная ответственность 💌",
        "Начни вести дневник благодарности — вселенная любит позитив 🙏",
        "Посади что-нибудь живое или купи суккулент — символ роста 🌱",
        "Устрой мозговой штурм в одиночку: на три идеи больше, чем обычно 💡",
        "Готовь здоровый смузи: тело тоже должно перезагрузиться 🥤",
        "Прочитай мудрую цитату из книги, которую давно откладывала 📖",
        "Поставь будильник на 5 минут ― сделай дыхательное упражнение 🌬️",
        "Подведи итоги прошлой фазы и отметь свои победы 🏆",
    ],
    "Растущая Луна": [
        "Работа/финансы: Начни новый проект 🚀",
        "Что отложить: Не ввязывайся в споры ⚔️",
        "Ритуал дня: Утренняя зарядка на свежем воздухе 🏃",
         "Планируй и действуй: займись спортом на свежем воздухе 🏃",
        "Начни изучать что-то новое и записывай свой прогресс 📚",
        "Составь список приоритетов и работай от самого сложного к простому 🔝",
        "Проведи нетворкинг-час: добавь контакты в LinkedIn 🤝",
        "Включи утреннюю йогу для зарядки энергией на весь день 🧘‍♀️",
        "Закажи вдохновляющую книгу — скорость роста зависит от знаний 📘",
        "Проведи креативный воркшоп для себя: рисуй, лепи, придумывай 🎨",
        "Определи промежуточные точки успеха и празднуй микропобеды 🎉",
        "Зарегистрируйся на мастер-класс по интересующей теме 🎓",
        "Обнови резюме и портфолио — пусть растёт твоя ценность 📈",
        "Запусти рекламную кампанию или личный блог — увеличь охват 🚀",
        "Составь план финансовых вливаний в свои проекты 💰",
        "Покажи прогресс друзьям или ментору — получи обратную связь 🗣️",
        "Устрой power-nap для поддержания продуктивности 💤",
        "Скорректируй цели, если что-то идёт не по плану 🔄",
    ],
    "Первая четверть": [
        "Работа/финансы: Сосредоточься на самых важных задачах 🎯",
        "Что отложить: Не начинай крупных покупок 🛑",
        "Ритуал дня: Креативная сессия (рисуй/пиши) 🎨",
        "Используй импульс: устраивай встречи и обсуждай идеи 💬",
        "Сосредоточься на важных задачах — заверши половину планов ✅",
        "Запланируй коллаборацию с кем-то крутым — рост идей идёт быстрее 🤜🤛",
        "Проведи SWOT-анализ своих проектов — выяви сильные и слабые стороны 📊",
        "Поделись в соцсетях опытом — создай экспертный контент 📲",
        "Устрой челлендж на неделю: поставь себе цель и играй по правилам 🎯",
        "Обнови софт и инструменты — прокачай рабочий арсенал 🛠️",
        "Включи тайм-блокинг для концентрации на одном деле за раз ⏳",
        "Поужинай без гаджетов — дай мозгу отдых перед последним рывком 🍽️",
        "Проанализируй обратную связь и внедри улучшения 📝",
        "Проведи совещание-стендап с командой — поймай синергию 🚧",
        "Настрой будильник на утренний ворк-аут — пульс бодрости гарантирован 💪",
        "Проверь здоровье: запланируй визит к врачу или сдачу анализов 🩺",
        "Прыжок в холодную воду (контрастный душ) для зарядки ⚡",
        "Выпиши идеи, которые кажутся безумными — иногда из них рождается гениальное 🤯",
    ],
    "Полнолуние": [
        "Работа/финансы: Проведи ревизию бюджета 💰",
        "Что отложить: Избегай важных переговоров 🗣️",
        "Ритуал дня: Лунная ванна или вечер под звёздами 🌕",
        "Закрой незавершённые дела и отдохни под лунным светом 🌕",
        "Проведи творческий вечер: рисуй или пиши 🎨",
        "Устрой лунную ванну: расслабься в тёплой ванне с солью 🛁",
        "Проверь бюджет: избавься от лишних подписок 💸",
        "Устрой танцевальную вечеринку для одного — отпусти напряжение 💃",
        "Пиши благодарственные письма тем, кто вдохновляет тебя 💌",
        "Устрой фото-сессию при лунном свете — поймай магию 📷",
        "Проведи медитацию на отпускание — отпусти ненужное 🔓",
        "Слушай тибетские чаши или лунные плеера для вибрационной чистки 🎶",
        "Прогуляйся ночью под луной — настрой биоритмы 🚶‍♀️",
        "Собери лунный эликсир из трав для сна и спокойствия 🌿",
        "Выполни письменный ритуал прощения и закрытия вопросов ✍️",
        "Посмотри на небо в телескоп — подзарядись космической энергией 🔭",
        "Проведи вечер «детокс от социальных сетей» — погрузись в себя 📵",
        "Сделай вечерний стрим или сторис о своих ощущениях при полнолунии 📹",
    ],
    "Убывающая Луна": [
        "Ритуал очищения: избавься от ненужных вещей 🕯️",
        "Подведи итоги и запланируй восстановление энергии 🔄",
        "Составь список «что не сработало» и будь честна с собой 📋",
        "Отпишись от ненужных рассылок и очисти почту 📧",
        "Проведи медитацию на отпускание — выдохni всё лишнее 🌬️",
        "Устрой «день молчания» — наблюдай за мыслями без реакции 🤫",
        "Массаж или самомассаж для снятия накопившегося напряжения 💆‍♀️",
        "Проведи детокс-диету на овощах и супах 🥣",
        "Устрой вечер легкой растяжки и йоги нидры 🧘‍♂️",
        "Сверь приоритеты и вычеркни то, что не резонирует 🚫",
        "Напиши письмо с прощением себе и людям, кто причинял боль ✉️",
        "Отмени планы, если чувствуешь перегруз — отдых не роскошь 🛌",
        "Проверь подписки и «лайки» — удаляй все лишнее в соцсетях 👍👎",
        "Проведи ритуал с огнём (свеча или костёр) для символического сжигания хлама 🔥",
        "Запланируй SPA-день или домашний релакс-ритуал 🧖‍♀️",
        "Работа/финансы: Подведи итоги и спланируй восстановление 🔄",
        "Что отложить: Отмени лишние подписки и очисти почту 📧",
        "Ритуал дня: Йога или медитация на отпускание 🌬️",
    ],
    "Последняя четверть": [
        "Работа/финансы: Закрой незавершённые дела ✔️",
        "Что отложить: Отложи крупные решения до завтра ⏳",
        "Ритуал дня: Ритуал прощения и отпускания 🔄",
        "Анализируй прошедшую неделю и расслабься 🛁",
        "Займись медитацией или дыхательной практикой 🌬️",
        "Составь отчёт о своих достижениях — погладь себя по плечу 📈",
        "Напиши список уроков и выводов, которые вынесла за цикл 📝",
        "Построй план на ближайшую неделю с учётом отдыха и восстановления 📅",
        "Устрой молчаливый ретрит хотя бы на час — слушай внутренний голос 🤫",
        "Пересмотри цели: что стоит оставить, а что пересмотреть 🔍",
        "Прочитай вдохновляющую статью или книгу о личностном развитии 📖",
        "Сделай ревизию привычек и избавься от вредных 🚭",
        "Устрой ужин с полезными продуктами и медитативным настроем 🍜",
        "Составь манифест благодарности и почитай его вслух 🙌",
        "Проведи сеанс цигун или мягкой утренней гимнастики ☯️",
        "Поставь себе мантру на следующий цикл и запиши её на стикер 🏷️",
        "Организуй digital-архив: удали дубли файлов и папок 🗂️",
        "Сделай план сна: ляг вовремя и настрой приятную атмосферу 💤",
    ],
}

def jd_to_datetime(jd: float) -> pendulum.DateTime:
    """Конвертирует юлианскую дату UT в pendulum DateTime (UTC)."""
    # JD 2440587.5 соответствует Unix epoch
    ts = (jd - 2440587.5) * 86400.0
    return pendulum.from_timestamp(ts, tz="UTC")

def compute_phase_and_sign(jd_ut: float) -> (str, int, str):
    """Вычисляет фазу Луны, процент освещённости и знак зодиака."""
    sun_lon  = swe.calc_ut(jd_ut, swe.SUN)[0][0]
    moon_lon = swe.calc_ut(jd_ut, swe.MOON)[0][0]
    angle    = (moon_lon - sun_lon) % 360.0
    illum    = int(round((1 - math.cos(math.radians(angle))) / 2 * 100))

    # Определяем название фазы
    if angle < 22.5 or angle >= 337.5:
        name = "Новолуние"
    elif angle < 67.5:
        name = "Растущая Луна"
    elif angle < 112.5:
        name = "Первая четверть"
    elif angle < 157.5:
        name = "Растущая Луна"
    elif angle < 202.5:
        name = "Полнолуние"
    elif angle < 247.5:
        name = "Убывающая Луна"
    elif angle < 292.5:
        name = "Последняя четверть"
    else:
        name = "Убывающая Луна"

    # Знак зодиака по долготе Луны
    idx   = int(moon_lon // 30) % 12
    signs = ["Овен","Телец","Близнецы","Рак","Лев","Дева",
             "Весы","Скорпион","Стрелец","Козерог","Водолей","Рыбы"]
    sign  = signs[idx]

    phase_str = f"{name} в {sign} ({illum}% освещ.)"
    return phase_str, illum, sign

def compute_aspects(jd_ut: float) -> List[str]:
    """Ищет основные аспекты Луны к планетам."""
    moon_lon = swe.calc_ut(jd_ut, swe.MOON)[0][0]
    out: List[str] = []
    for pname, pid in PLANETS.items():
        pl_lon = swe.calc_ut(jd_ut, pid)[0][0]
        diff   = abs((moon_lon - pl_lon + 180) % 360 - 180)
        for ang, sym in ASPECTS.items():
            orb = ORBIS.get(ang, 3.0)
            if abs(diff - ang) <= orb:
                out.append(f"{sym}{pname} ({diff - ang:+.1f}°)")
    return out

def compute_next_event(jd_ut: float) -> str:
    """Находит ближайшее полнолуние или новолуние и возвращает анонс."""
    # ближайшее новолуние
    nm_jd = swe.next_new_moon(jd_ut)
    fm_jd = swe.next_full_moon(jd_ut)
    now_date = pendulum.from_timestamp((jd_ut - 2440587.5)*86400, tz="UTC").date()

    nm_dt = jd_to_datetime(nm_jd).date()
    fm_dt = jd_to_datetime(fm_jd).date()
    dm = (nm_dt - now_date).days
    df = (fm_dt - now_date).days

    if dm <= df:
        days, jd_next = dm, nm_jd
    else:
        days, jd_next = df, fm_jd

    phase_str, _, _ = compute_phase_and_sign(jd_next)
    return f"→ Через {days} дн. {phase_str}"

def compute_advice(d: pendulum.Date, phase_str: str) -> List[str]:
    """Получает 3 совета через GPT или из фолбэка."""
    phase_name = phase_str.split(" в ")[0]
    if gpt:
        prompt = (
            f"Действуй как профессиональный астролог: дата {d.to_date_string()}, "
            f"фаза Луны: {phase_str}. "
            "Дай ровно три коротких практических совета, в категориях:\n"
            "• работа/финансы\n• что отложить\n• ритуал дня"
        )
        resp = gpt.chat.completions.create(
            model="gpt-4o-mini", temperature=0.7,
            messages=[{"role":"user","content":prompt}]
        )
        lines = [ln.strip() for ln in resp.choices[0].message.content.split("\n") if ln.strip()]
        return lines[:3]
    else:
        return random.sample(FALLBACK_ADVICE.get(phase_name, FALLBACK_ADVICE["Новолуние"]), k=3)

def generate_calendar(year: int, month: int) -> Dict[str, Any]:
    swe.set_ephe_path('.')  # если нужно, укажите путь к эфемеридам
    start = pendulum.date(year, month, 1)
    end   = start.end_of('month')
    cal: Dict[str, Any] = {}

    # 1) базовые вычисления
    d = start
    while d <= end:
        jd_ut = swe.julday(d.year, d.month, d.day, 0.0)
        phase_str, illum, sign = compute_phase_and_sign(jd_ut)
        cal[d.to_date_string()] = {
            "phase":          phase_str,
            "percent":        illum,
            "sign":           sign,
            "aspects":        compute_aspects(jd_ut),
            "void_of_course": {"start": None, "end": None},  # TODO: вычислить реальный V/C
            "next_event":     compute_next_event(jd_ut),
            "advice":         compute_advice(d, phase_str),
            "favorable_days": {cat: CATEGORIES[cat]["favorable"] for cat in CATEGORIES},
            "unfavorable_days":{cat: CATEGORIES[cat]["unfavorable"] for cat in CATEGORIES},
        }
        d = d.add(days=1)

    return cal

def main():
    today = pendulum.today()
    data  = generate_calendar(today.year, today.month)
    out   = Path(__file__).parent / "lunar_calendar.json"
    out.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    print(f"✅ lunar_calendar.json сгенерирован для {today.format('MMMM YYYY')}")

if __name__ == "__main__":
    main()
