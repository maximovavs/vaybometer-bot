#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
gen_lunar_calendar.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ñ–∞–π–ª lunar_calendar.json —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏, –Ω—É–∂–Ω—ã–º–∏ –∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö
–ø–æ—Å—Ç–æ–≤ (–∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–≤–µ—Ç—ã) –∏ –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ (–¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–∑ + VoC).

‚Ä¢ phase_name    ‚Äì ¬´–ù–æ–≤–æ–ª—É–Ω–∏–µ¬ª, ¬´–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø¬ª –∏ —Ç.–¥.
‚Ä¢ phase         ‚Äì —Å—Ç—Ä–æ–∫–∞ —Å —ç–º–æ–¥–∑–∏ + –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∞–∑—ã + –∑–Ω–∞–∫–æ–º + –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
‚Ä¢ percent       ‚Äì —á–∏—Å–ª–æ (0‚Äì100)
‚Ä¢ sign          ‚Äì —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ (¬´–û–≤–µ–Ω¬ª, ¬´–¢–µ–ª–µ—Ü¬ª ‚Ä¶)
‚Ä¢ phase_time    ‚Äì —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ñ–∞–∑—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (Asia/Nicosia ‚Üí JSON)
‚Ä¢ advice        ‚Äì –º–∞—Å—Å–∏–≤ –∏–∑ —Ç—Ä—ë—Ö —Å–æ–≤–µ—Ç–æ–≤ (—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏: üíº‚Ä¶, ‚õî‚Ä¶, ü™Ñ‚Ä¶)
‚Ä¢ long_desc     ‚Äì 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–∏–ø —Ñ–∞–∑—ã (–º–∞—Å—è—á–Ω—ã–π –æ–±–∑–æ—Ä)
‚Ä¢ void_of_course: {"start": "DD.MM HH:mm", "end": "DD.MM HH:mm"}  (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äì null)
‚Ä¢ favorable_days / unfavorable_days ‚Äì —Å–ª–æ–≤–∞—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π CATS (–∫–∞—Ä–º–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã)
"""

import os
import json
import math
import asyncio
import random
from pathlib import Path
from typing import Dict, Any, List, Tuple

import pendulum
import swisseph as swe

TZ = pendulum.timezone("Asia/Nicosia")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ GPT (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
try:
    from openai import OpenAI
    GPT = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
except Exception:
    GPT = None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≠–º–æ–¥–∑–∏ —Ñ–∞–∑ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
EMO = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ":       "üåë",
    "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø":   "üåí",
    "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å": "üåì",
    "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞":   "üåî",
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":      "üåï",
    "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞":  "üåñ",
    "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å": "üåó",
    "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø":  "üåò",
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –§–æ–ª–±—ç–∫ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–∑—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
FALLBACK_LONG: Dict[str, str] = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ":        "–ù—É–ª–µ–≤–∞—è —Ç–æ—á–∫–∞ —Ü–∏–∫–ª–∞ ‚Äî –∑–∞–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –º–µ—á—Ç—ã –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.",
    "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø":    "–≠–Ω–µ—Ä–≥–∏—è –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è ‚Äî –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.",
    "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å":  "–ü–µ—Ä–≤—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ—è–≤–∏–ª–∏—Å—å, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –∫—É—Ä—Å –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ.",
    "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞":    "–£—Å–∫–æ—Ä–µ–Ω–∏–µ: —Ä–∞—Å—à–∏—Ä—è–π—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã, —É–∫—Ä–µ–ø–ª—è–π—Ç–µ —Å–≤—è–∑–∏.",
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":       "–ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è: –º–∞–∫—Å–∏–º—É–º —ç–º–æ—Ü–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
    "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞":   "–û—Ç–ø—É—Å–∫–∞–µ–º –ª–∏—à–Ω–µ–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–ª–∞, –Ω–∞–≤–æ–¥–∏–º –ø–æ—Ä—è–¥–æ–∫.",
    "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞, —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞ –∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.",
    "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø":   "–û—Ç–¥—ã—Ö, —Ä–µ—Ç—Ä–∏—Ç—ã, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–º—É —Ü–∏–∫–ª—É.",
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–∞—Ä–º–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CATS = {
    "general":  {"favorable": [2, 3, 9, 27],   "unfavorable": [13, 14, 24]},
    "haircut":  {"favorable": [2, 3, 9],       "unfavorable": []},
    "travel":   {"favorable": [4, 5],         "unfavorable": []},
    "shopping": {"favorable": [1, 2, 7],       "unfavorable": []},
    "health":   {"favorable": [20, 21, 27],    "unfavorable": []},
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–µ—Ä–µ–≤–æ–¥ JD ‚Üí pendulum DateTime (UTC) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def jd2dt(jd: float) -> pendulum.DateTime:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç UT-—é–ª–∏–∞–Ω—Å–∫—É—é –¥–∞—Ç—É –≤ pendulum.DateTime —Å tz="UTC".
    """
    timestamp = (jd - 2440587.5) * 86400.0
    return pendulum.from_timestamp(timestamp, tz="UTC")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∑—ã –ø–æ —É–≥–ª—É (angle) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def phase_name(angle: float) -> str:
    """
    –†–∞–∑–±–∏–≤–∞–µ–º –∫—Ä—É–≥ 360¬∞ –Ω–∞ 8 —Å–µ–∫—Ç–æ—Ä–æ–≤ (45¬∞ –∫–∞–∂–¥—ã–π), —Å–¥–≤–∏–≥ 22.5¬∞,
    —á—Ç–æ–±—ã –≥—Ä–∞–Ω–∏—Ü—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è–º.
    """
    idx = int(((angle + 22.5) % 360) // 45)
    return [
        "–ù–æ–≤–æ–ª—É–Ω–∏–µ",
        "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø",
        "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å",
        "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞",
        "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ",
        "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞",
        "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å",
        "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø",
    ][idx]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã, –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏ –∏ –∑–æ–¥–∏–∞–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def compute_phase(jd: float) -> Tuple[str, int, str]:
    """
    –ü–æ JD (UT) –≤—ã—á–∏—Å–ª—è–µ—Ç:
      ‚Ä¢ lon_s   ‚Äì –¥–æ–ª–≥–æ—Ça –°–æ–ª–Ω—Ü–∞
      ‚Ä¢ lon_m   ‚Äì –¥–æ–ª–≥–æ—Ça –õ—É–Ω—ã
      ‚Ä¢ angle   ‚Äì —Ñ–∞–∑–æ–≤—ã–π —É–≥–æ–ª = (lon_m - lon_s) mod 360
      ‚Ä¢ illum   ‚Äì –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏ = round((1 - cos(angle)) / 2 * 100)
      ‚Ä¢ name    ‚Äì –æ–¥–Ω–æ –∏–∑ 8 –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–∑—ã –ø–æ —É–≥–ª—É
      ‚Ä¢ sign    ‚Äì –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ø–æ –¥–æ–ª–≥–æ—Ç–µ –õ—É–Ω—ã (–∫–∞–∂–¥—ã–π 30¬∞)
    """
    lon_s = swe.calc_ut(jd, swe.SUN)[0][0]
    lon_m = swe.calc_ut(jd, swe.MOON)[0][0]
    angle = (lon_m - lon_s) % 360.0
    illum = int(round((1 - math.cos(math.radians(angle))) / 2 * 100))
    name = phase_name(angle)
    sign = [
        "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞",
        "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
    ][int(lon_m // 30) % 12]
    return name, illum, sign

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Void-of-Course (–ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ASPECTS = {0, 60, 90, 120, 180}  # –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞–∂–æ—Ä–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã
ORBIS = 1.5                     # ¬±–≥—Ä–∞–¥—É—Å—ã –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
PLANETS = [
    swe.SUN, swe.MERCURY, swe.VENUS, swe.MARS,
    swe.JUPITER, swe.SATURN, swe.URANUS, swe.NEPTUNE, swe.PLUTO
]

def _has_major_lunar_aspect(jd: float) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∫ —ç—Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É (JD) —Ç–æ—á–Ω—ã–π –º–∞–∂–æ—Ä–Ω—ã–π –∞—Å–ø–µ–∫—Ç –õ—É–Ω—ã
    –∫ –ª—é–±–æ–º—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö PLANETS –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ORBIS.
    """
    lon_m = swe.calc_ut(jd, swe.MOON)[0][0]
    for p in PLANETS:
        lon_p = swe.calc_ut(jd, p)[0][0]
        diff = abs((lon_m - lon_p + 180) % 360 - 180)
        for asp in ASPECTS:
            if abs(diff - asp) <= ORBIS:
                return True
    return False

def compute_voc_for_day(jd_start: float) -> Dict[str, Any]:
    """
    –ü—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç Void-of-Course (VOC) –¥–ª—è –õ—É–Ω—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å—É—Ç–æ–∫,
    –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å jd_start (00:00 UT).
    –ê–ª–≥–æ—Ä–∏—Ç–º:
      1) –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞–∫ –õ—É–Ω—ã –≤ jd_start (—Ü–µ–ª–∞—è —á–∞—Å—Ç—å (lon_m // 30)).
      2) –®–∞–≥–∞–º–∏ –ø–æ 1 —á–∞—Å—É –≤–ø–µ—Ä—ë–¥ –∏—Å–∫–∞—Ç—å –º–æ–º–µ–Ω—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –õ—É–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π –∑–Ω–∞–∫.
      3) –û—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ (sign_change) —à–∞–≥–∞—Ç—å –Ω–∞–∑–∞–¥ –ø–æ 10 –º–∏–Ω—É—Ç,
         –ø–æ–∫–∞ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Å–ø–µ–∫—Ç ‚Üí —ç—Ç–æ –±—É–¥–µ—Ç –Ω–∞—á–∞–ª–æ VOC.
      4) –ï—Å–ª–∏ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ª–µ–∂–∞—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ç–µ—Ö –∂–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å—É—Ç–æ–∫ (Asia/Nicosia),
         —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {start: null, end: null}.
      5) –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {"start": "DD.MM HH:mm", "end": "DD.MM HH:mm"}.
    """
    # 1) –ù–∞–π–¥—ë–º –∑–Ω–∞–∫ –õ—É–Ω—ã –≤ jd_start
    sign0 = int(swe.calc_ut(jd_start, swe.MOON)[0][0] // 30)

    # 2) –ò–¥—ë–º –≤–ø–µ—Ä—ë–¥ —à–∞–≥–∞–º–∏ 1 —á–∞—Å (1/24 —Å—É—Ç–æ–∫), –ø–æ–∫–∞ –∑–Ω–∞–∫ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è
    jd = jd_start
    step_forward = 1.0 / 24.0  # 1 —á–∞—Å
    while True:
        jd += step_forward
        if int(swe.calc_ut(jd, swe.MOON)[0][0] // 30) != sign0:
            sign_change = jd
            break

    # 3) –ò–¥—ë–º –Ω–∞–∑–∞–¥ –æ—Ç sign_change —à–∞–≥–∞–º–∏ 10 –º–∏–Ω (10/1440 —Å—É—Ç–æ–∫),
    #    –ø–æ–∫–∞ –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏–º –∞—Å–ø–µ–∫—Ç ‚Üí —ç—Ç–æ –±—É–¥–µ—Ç –∫–æ–Ω–µ—Ü –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Å–ø–µ–∫—Ç–∞
    jd_back = sign_change
    step_back = 10.0 / 1440.0  # 10 –º–∏–Ω—É—Ç
    while jd_back > jd_start and not _has_major_lunar_aspect(jd_back):
        jd_back -= step_back

    voc_start = jd_back
    voc_end = sign_change

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º JD ‚Üí pendulum.DateTime (UTC) ‚Üí –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∑–æ–Ω—É TZ
    start_dt = jd2dt(voc_start).in_tz(TZ)
    end_dt = jd2dt(voc_end).in_tz(TZ)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–µ–∂–∞—Ç –ª–∏ –æ–±–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å—É—Ç–æ–∫ (Asia/Nicosia)
    cur_day = jd2dt(jd_start).in_tz(TZ).date()
    if start_dt.date() != cur_day and end_dt.date() != cur_day:
        return {"start": None, "end": None}

    return {
        "start": start_dt.format("DD.MM HH:mm"),
        "end":   end_dt.format("DD.MM HH:mm"),
    }

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ GPT-helpers –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def gpt_short(date: str, phase: str) -> List[str]:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É GPT-4O-Mini —Ç—Ä–∏ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ —Å —ç–º–æ–¥–∑–∏:
      üíº (—Ä–∞–±–æ—Ç–∞), ‚õî (—á—Ç–æ –æ—Ç–ª–æ–∂–∏—Ç—å), ü™Ñ (—Ä–∏—Ç—É–∞–ª).
    –ï—Å–ª–∏ –Ω–µ—Ç GPT –∏–ª–∏ —é–±–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ–ª–±—ç–∫.
    """
    if GPT:
        prompt = (
            f"–î–∞—Ç–∞ {date}, —Ñ–∞–∑–∞ {phase}. "
            "–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–≥–æ –∏ –∫—Ä–∞—Ç–∫–æ –¥–∞–µ—Ç "
            "—Ç—Ä–∏ —Å–æ–≤–µ—Ç—ã (–∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å —ç–º–æ–¥–∑–∏):\n"
            "  üíº (—Ä–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã)\n"
            "  ‚õî (—á—Ç–æ –æ—Ç–ª–æ–∂–∏—Ç—å)\n"
            "  ü™Ñ (—Ä–∏—Ç—É–∞–ª –¥–Ω—è)\n"
            "–ë—É–¥—å –µ–º–æ–∫, –∫–∞–∫ –±—É–¥—Ç–æ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ—Ä–æ–≥–æ —Å—Ç–æ–∏—Ç."
        )
        try:
            resp = GPT.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.65
            )
            lines = [ln.strip() for ln in resp.choices[0].message.content.splitlines() if ln.strip()]
            return lines[:3]
        except Exception:
            pass

    # –§–æ–ª–±—ç–∫, –µ—Å–ª–∏ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    return [
        "üíº –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –∏ –Ω–µ —Ä–∞—Å–ø—ã–ª—è–π—Ç–µ—Å—å.",
        "‚õî –û—Ç–ª–æ–∂–∏—Ç–µ –∫—Ä—É–ø–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ —Ä–∞—Å—Ö–æ–¥—ã.",
        "ü™Ñ –°–¥–µ–ª–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –≥–∞—Ä–º–æ–Ω–∏—é."
    ]

async def gpt_long(name: str, month: str) -> str:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É GPT-4O-Mini 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ —Ñ–∞–∑—ã.
    –ï—Å–ª–∏ –Ω–µ—Ç GPT –∏–ª–∏ —Å–±–æ–π ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º FALLBACK_LONG[name].
    """
    if GPT:
        prompt = (
            f"–ú–µ—Å—è—Ü {month}. –§–∞–∑–∞ {name}. "
            "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥: –¥–∞–π 2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ç–æ–º, "
            "–∫–∞–∫–æ–≤–∞ —ç–Ω–µ—Ä–≥–∏—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –¢–æ–Ω ‚Äì —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π."
        )
        try:
            resp = GPT.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7
            )
            return resp.choices[0].message.content.strip()
        except Exception:
            pass

    return FALLBACK_LONG.get(name, "")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def generate(year: int, month: int) -> Dict[str, Any]:
    """
    1) sweep.set_ephe_path('.') –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç—Ñ–µ–º–µ—Ä–∏–¥
    2) –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –¥–∞—Ç–µ –º–µ—Å—è—Ü–∞ (1 ‚Üí –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å)
    3) –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∞–∑—É, –∑–Ω–∞–∫, –ø—Ä–æ—Ü–µ–Ω—Ç, –≤—Ä–µ–º—è —Ñ–∞–∑—ã
    4) –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:
         ‚Ä¢ gpt_short –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
         ‚Ä¢ gpt_long (–æ–¥–∏–Ω —Ä–∞–∑) –¥–ª—è –∫–∞–∂–¥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ñ–∞–∑—ã
    5) –í—ã—á–∏—Å–ª—è–µ–º Void-of-Course –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    6) –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å cal[d.to_date_string()]
    7) –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö GPT-–∑–∞–¥–∞—á –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º advice –∏ long_desc
    """
    swe.set_ephe_path(".")
    first = pendulum.date(year, month, 1)
    last = first.end_of("month")

    cal: Dict[str, Any] = {}
    short_tasks: List[asyncio.Task] = []
    long_tasks: Dict[str, asyncio.Task] = {}

    # 3) –ü—Ä–æ–±–µ–≥–∞–µ–º –∫–∞–∂–¥—É—é –¥–∞—Ç—É –º–µ—Å—è—Ü–∞
    d = first
    while d <= last:
        jd = swe.julday(d.year, d.month, d.day, 0.0)

        # –§–∞–∑–∞, –ø—Ä–æ—Ü–µ–Ω—Ç, –∑–Ω–∞–∫
        name, illum, sign = compute_phase(jd)
        emoji = EMO.get(name, "")
        phase_time_iso = jd2dt(jd).in_tz(TZ).to_iso8601_string()

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è short advice
        short_tasks.append(asyncio.create_task(gpt_short(d.to_date_string(), name)))

        # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–π —Ñ–∞–∑—ã –µ—â—ë –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ long_desc
        if name not in long_tasks:
            long_tasks[name] = asyncio.create_task(gpt_long(name, d.format("MMMM")))

        # Void-of-Course (–ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ) –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        voc = compute_voc_for_day(jd)

        cal[d.to_date_string()] = {
            "phase_name": name,
            "phase": f"{emoji} {name} –≤ {sign} ({illum}% –æ—Å–≤–µ—â.)",
            "percent": illum,
            "sign": sign,
            "phase_time": phase_time_iso,
            "advice": [],           # –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏–∂–µ
            "long_desc": "",        # –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏–∂–µ
            "void_of_course": voc,
            "favorable_days": CATS,
            "unfavorable_days": CATS,
        }

        d = d.add(days=1)

    # 4) –î–æ–∂–¥–∞—Ç—å—Å—è —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è (short advice)
    short_results = await asyncio.gather(*short_tasks, return_exceptions=True)
    idx = 0
    for day_str in sorted(cal.keys()):
        result = short_results[idx]
        if isinstance(result, Exception) or not isinstance(result, list):
            cal[day_str]["advice"] = ["üíº –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º.", "‚õî –û—Ç–ª–æ–∂–∏—Ç–µ –∫—Ä—É–ø–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.", "ü™Ñ –ú–µ–¥–∏—Ç–∞—Ü–∏—è 5 –º–∏–Ω—É—Ç."]
        else:
            cal[day_str]["advice"] = result[:3]
        idx += 1

    # 5) –î–æ–∂–¥–∞—Ç—å—Å—è long_desc –¥–ª—è –∫–∞–∂–¥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ñ–∞–∑—ã
    for ph_name, task in long_tasks.items():
        try:
            desc = await task
        except Exception:
            desc = FALLBACK_LONG.get(ph_name, "")
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å, –≥–¥–µ phase_name == ph_name
        for rec in cal.values():
            if rec["phase_name"] == ph_name:
                rec["long_desc"] = desc

    return cal

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Entry Point ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _main():
    today = pendulum.today(TZ)  # —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ TZ, –Ω–æ month/year –±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã
    data = await generate(today.year, today.month)
    out = Path(__file__).parent / "lunar_calendar.json"
    out.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    print(f"‚úÖ lunar_calendar.json —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –¥–ª—è {today.format('MMMM YYYY')}")

if __name__ == "__main__":
    asyncio.run(_main())