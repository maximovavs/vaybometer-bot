#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
gen_lunar_calendar.py
~~~~~~~~~~~~~~~~~~~~~
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç lunar_calendar.json c —Ç–æ—á–Ω—ã–º–∏ —Ñ–∞–∑–∞–º–∏ –õ—É–Ω—ã,
–º–æ–º–µ–Ω—Ç–∞–º–∏ —Ñ–∞–∑, Void-of-Course, –∞—Å–ø–µ–∫—Ç–∞–º–∏ –∏ —Å–æ–≤–µ—Ç–∞–º–∏.
"""

import os, json, math, random, asyncio
from pathlib import Path
from typing import Dict, List, Any, Tuple

import pendulum                       # —É–¥–æ–±–Ω—ã–µ –¥–∞—Ç—ã/–≤—Ä–µ–º—è
import swisseph as swe                # Swiss-Ephemeris

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ = pendulum.timezone("UTC")         # –≤—Å—ë —Ö—Ä–∞–Ω–∏–º –≤ UTC

# fallback-—Å–æ–≤–µ—Ç—ã (–ø–æ—Ä–µ–∑–∞–Ω—ã –¥–æ 3-—Ö –Ω–∞ —Ñ–∞–∑—É ‚Äî –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
FALLBACK: Dict[str, List[str]] = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ": [
        "–†–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã: –°—Ç–∞–≤—å —Ü–µ–ª–∏ –Ω–∞ —Ü–∏–∫–ª üìù",
        "–ß—Ç–æ –æ—Ç–ª–æ–∂–∏—Ç—å: –∫—Ä—É–ø–Ω—ã–µ —Ç—Ä–∞—Ç—ã üí∏üõë",
        "–†–∏—Ç—É–∞–ª –¥–Ω—è: –º–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è üßò",
    ],
    "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø": [
        "–†–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã: –î–µ–ª–µ–≥–∏—Ä—É–π –∏ —Ä–∞—Å—à–∏—Ä—è–π ü§ù",
        "–ß—Ç–æ –æ—Ç–ª–æ–∂–∏—Ç—å: —Å–ø–æ—Ä—ã ‚öîÔ∏è",
        "–†–∏—Ç—É–∞–ª –¥–Ω—è: –¥—ã—Ö–∞–Ω–∏–µ –∏ —É—Ç—Ä–µ–Ω–Ω—è—è –π–æ–≥–∞ üå¨Ô∏è",
    ],
    # ‚Ä¶ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∑—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ ‚Ä¶
}

# –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π (–ø—Ä–∏–º–µ—Ä)
CATEGORIES = {
    "general":   {"favorable": [2,3,9,27],    "unfavorable":[13,14,24]},
    "haircut":   {"favorable": [2,3,9],       "unfavorable":[]},
    "travel":    {"favorable": [4,5],         "unfavorable":[]},
    "shopping":  {"favorable": [1,2,7],       "unfavorable":[]},
    "health":    {"favorable": [20,21,27],    "unfavorable":[]},
}

# –∞—Å–ø–µ–∫—Ç—ã –∏ –æ—Ä–±–∏—Å—ã
ASPECT_ANG = {0:"‚òå",60:"‚öπ",90:"‚ñ°",120:"‚ñ≥",180:"‚òç"}
ORBS       = {0:6, 60:4, 90:3, 120:4, 180:6}

PLANETS = {
    "Sun": swe.SUN,"Mercury": swe.MERCURY,"Venus": swe.VENUS,"Mars": swe.MARS,
    "Jupiter": swe.JUPITER,"Saturn": swe.SATURN,"Uranus": swe.URANUS,
    "Neptune": swe.NEPTUNE,"Pluto": swe.PLUTO,
}

# optional GPT
try:
    from  openai import OpenAI
    _client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
except Exception:
    _client = None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def jd(dt:pendulum.DateTime)->float:           # pendulum ‚Üí JD UT
    return swe.julday(dt.year, dt.month, dt.day,
                      dt.hour + dt.minute/60 + dt.second/3600)

def dt_from_jd(j:float)->pendulum.DateTime:    # JD UT ‚Üí pendulum
    ts = (j - 2440587.5)*86400
    return pendulum.from_timestamp(ts, tz="UTC")

def moon_lon(jd_ut:float)->float:
    return swe.calc_ut(jd_ut, swe.MOON)[0][0] % 360

def sun_lon(jd_ut:float)->float:
    return swe.calc_ut(jd_ut, swe.SUN )[0][0] % 360

def illum_pct(angle:float)->int:
    return int(round((1-math.cos(math.radians(angle)))/2*100))

def phase_name(angle:float)->str:
    if   angle < 22.5:   return "–ù–æ–≤–æ–ª—É–Ω–∏–µ"
    elif angle < 67.5:   return "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø"
    elif angle <112.5:   return "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    elif angle <157.5:   return "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞"
    elif angle <202.5:   return "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    elif angle <247.5:   return "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞"
    elif angle <292.5:   return "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    else:                return "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø"

SIGNS = ["–û–≤–µ–Ω","–¢–µ–ª–µ—Ü","–ë–ª–∏–∑–Ω–µ—Ü—ã","–†–∞–∫","–õ–µ–≤","–î–µ–≤–∞",
         "–í–µ—Å—ã","–°–∫–æ—Ä–ø–∏–æ–Ω","–°—Ç—Ä–µ–ª–µ—Ü","–ö–æ–∑–µ—Ä–æ–≥","–í–æ–¥–æ–ª–µ–π","–†—ã–±—ã"]

def sign_name(lon:float)->str:
    return SIGNS[int(lon//30)%12]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ JD –º–æ–º–µ–Ω—Ç–∞ —Ñ–∞–∑—ã (0,90,180,270) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def find_phase_time(month_start:pendulum.DateTime)->Dict[str,float]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {JD: phase_name} –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–∑ –≤–Ω—É—Ç—Ä–∏ –º–µ—Å—è—Ü–∞."""
    jd_start  = jd(month_start.start_of('month').subtract(days=2))
    jd_end    = jd(month_start.end_of('month').add(days=2))
    phases={}
    step=0.25      # –¥–Ω–µ–π
    j  = jd_start
    prev = (moon_lon(j)-sun_lon(j))%360
    while j < jd_end:
        j_next = j+step
        cur = (moon_lon(j_next)-sun_lon(j_next))%360
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è 0/90/180/270
        for target in (0,90,180,270):
            if (prev-target)*(cur-target) < 0:
                # –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É [j, j_next]
                a,b=j,j_next
                for _ in range(20):            # ~ ¬±1 –º–∏–Ω
                    m=(a+b)/2
                    ang=(moon_lon(m)-sun_lon(m))%360
                    if (prev-target)*(ang-target)<0: b=m
                    else: a=m
                phases[a]=phase_name(target)
        j_next,prev=j_next,cur
        j=j_next
    return dict(sorted(phases.items()))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞—Å–ø–µ–∫—Ç–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def aspects(j:float)->List[str]:
    mlon=moon_lon(j)
    res=[]
    for name,pid in PLANETS.items():
        plon=swe.calc_ut(j,pid)[0][0]%360
        diff=abs((mlon-plon+180)%360-180)
        for ang,sym in ASPECT_ANG.items():
            if abs(diff-ang) <= ORBS[ang]:
                res.append(f"{sym}{name} ({diff-ang:+.1f}¬∞)")
    return res

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–æ–≤–µ—Ç—ã GPT / fallback ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def advice(date:pendulum.Date, phase:str)->List[str]:
    p_name=phase.split(" –≤ ")[0]
    if not _client:
        return FALLBACK.get(p_name,["‚Ä¶","‚Ä¶","‚Ä¶"])
    prompt=(f"–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –¢—ã –ª—É—á—à–µ –≤—Å–µ—Ö –∑–Ω–∞–µ—à—å –∫–∞–∫ –≤–ª–∏—è—é—Ç –∑–≤—ë–∑–¥—ã –∏ –ª—É–Ω–∞ –Ω–∞ –Ω–∞—à—É –∂–∏–∑–Ω—å, –ª—é–±–∏—à—å –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º, –Ω–æ —Ç—ã –æ—á–µ–Ω—å –∫—Ä–∞—Ç–æ–∫. –î–∞—Ç–∞ {date}, —Ñ–∞–∑–∞: {phase}. "
            "–ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –±—É–¥—Ç–æ –∑–æ–ª–æ—Ç–æ, —Ç—ã –ø–µ—Ä–µ—Ö–∏—à—å —Å—Ä–∞–∑—É –∫ –¥–µ–ª—É –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–ª–æ–≤–∞ —Ç–∞–∫–∏–µ –∫–∞–∫ –∫–æ–Ω–µ—á–Ω–æ, –≤–æ—Ç –º–æ–∏ —Å–æ–≤–µ—Ç—É –∏ –ø–æ–¥–±–∏—Ä–∞–µ—à—å —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–º—É, –∞ —Å–µ–π—á–∞—Å –î–∞–π —Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–≤–µ—Ç–∞ —Å emoji –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö:\n"
            "‚Ä¢ —Ä–∞–±–æ—Ç–∞/—Ñ–∏–Ω–∞–Ω—Å—ã\n‚Ä¢ —á—Ç–æ –æ—Ç–ª–æ–∂–∏—Ç—å\n‚Ä¢ —Ä–∏—Ç—É–∞–ª –¥–Ω—è")
    try:
        rsp=_client.chat.completions.create(
            model="gpt-4o-mini",temperature=0.7,
            messages=[{"role":"user","content":prompt}]
        )
        out=[l.strip("‚Ä¢ ").strip()
             for l in rsp.choices[0].message.content.splitlines() if l.strip()]
        return out[:3] if len(out)>=3 else out+["‚Ä¶"]*(3-len(out))
    except Exception:
        return FALLBACK.get(p_name,["‚Ä¶","‚Ä¶","‚Ä¶"])

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  Void-of-Course  (approx) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def void_of_course(j:float)->Tuple[str,str]:
    """
    Swiss-Ephemeris –Ω–µ –∏–º–µ–µ—Ç –ø—Ä—è–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ V/C, –ø–æ—ç—Ç–æ–º—É:
    V/C –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞–∂–æ—Ä-–∞—Å–ø–µ–∫—Ç–∞ (0/60/90/120/180)
    –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –õ—É–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π –∑–Ω–∞–∫. –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ
    –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Ö–≤–∞—Ç–∏—Ç –≥—Ä—É–±–æ–π –æ—Ü–µ–Ω–∫–∏: —Å 26¬∞ –∑–Ω–∞–∫–∞ –¥–æ 0¬∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞–∫–∞.
    """
    mlon=moon_lon(j)
    start=None; end=None
    # –µ—Å–ª–∏ –õ—É–Ω–∞ > 26¬∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞–∫–∞ ‚Üí –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è V/C
    if mlon%30 > 26:
        # JD –¥–æ –≤—Ö–æ–¥–∞ –≤ —Å–ª–µ–¥. –∑–Ω–∞–∫
        sign_end = j + (30 - mlon%30)/13.2/24    # 13.2¬∞/–¥–µ–Ω—å ‚âà
        start=dt_from_jd(j).format("DD.MM HH:mm")
        end  =dt_from_jd(sign_end).format("DD.MM HH:mm")
    return start,end

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–Ω—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def day_record(d:pendulum.Date, jd_ut:float,
               phase_time_map:Dict[str,float])->Dict[str,Any]:
    ang  =(moon_lon(jd_ut)-sun_lon(jd_ut))%360
    name = phase_name(ang)
    pct  = illum_pct(ang)
    phase_str=f"{name} –≤ {sign_name(moon_lon(jd_ut))} ({pct}% –æ—Å–≤–µ—â.)"
    # –±–ª–∏–∂–∞–π—à–µ–µ —Ç–æ—á–Ω–æ–µ JD —ç—Ç–æ–π —Ñ–∞–∑—ã
    jd_phase = next((pjd for pjd,pname in phase_time_map.items()
                     if pname==name and abs(pjd-jd_ut)<2), jd_ut)
    vc_start,vc_end = void_of_course(jd_ut)
    rec={
        "phase":       phase_str,
        "percent":     pct,
        "sign":        sign_name(moon_lon(jd_ut)),
        "phase_time":  dt_from_jd(jd_phase).to_iso8601_string(),
        "aspects":     aspects(jd_ut),
        "void_of_course":{"start":vc_start,"end":vc_end},
        "advice":      advice(d, phase_str),
        "favorable_days":   {k:v["favorable"]   for k,v in CATEGORIES.items()},
        "unfavorable_days": {k:v["unfavorable"] for k,v in CATEGORIES.items()},
    }
    return rec

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—Ü–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def generate_calendar(year:int, month:int)->Dict[str,Any]:
    swe.set_ephe_path(".")
    first_day=pendulum.datetime(year,month,1,tz=TZ)
    phases=find_phase_time(first_day)
    cal={}
    d=first_day
    while d.month==month:
        cal[d.to_date_string()]=day_record(d,jd(d), phases)
        d=d.add(days=1)
    return cal

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main():
    today=pendulum.today()
    data = generate_calendar(today.year,today.month)
    Path("lunar_calendar.json").write_text(
        json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    print("‚úÖ lunar_calendar.json –æ–±–Ω–æ–≤–ª—ë–Ω",
          f"({today.format('MMMM YYYY')})")

if __name__=="__main__":
    asyncio.run(main())
