#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
gen_lunar_calendar.py
~~~~~~~~~~~~~~~~~~~~~
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª lunar_calendar.json –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏:
  - phase:          —Å—Ç—Ä–æ–∫–∞ —Å —Ñ–∞–∑–æ–π –õ—É–Ω—ã + –∑–Ω–∞–∫ + "(XX% –æ—Å–≤–µ—â.)"
  - advice:         –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (GPT –∏–ª–∏ fallback)
  - next_event:     –∫—Ä–∞—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏–µ (GPT –∏–ª–∏ stub)
  - favorable_days: —Å–ø–∏—Å–æ–∫ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π –º–µ—Å—è—Ü–∞ (–ø—Ä–∏–º–µ—Ä—ã)
  - unfavorable_days: —Å–ø–∏—Å–æ–∫ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π –º–µ—Å—è—Ü–∞ (–ø—Ä–∏–º–µ—Ä—ã)
"""

import os
import json
import random
from pathlib import Path
import pendulum
from typing import Dict, Any, Tuple

# –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤ –∏ —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω API-–∫–ª—é—á
try:
    from openai import OpenAI
    OPENAI_KEY = os.getenv("OPENAI_API_KEY")
    client = OpenAI(api_key=OPENAI_KEY) if OPENAI_KEY else None
except ImportError:
    client = None

def compute_lunar_phase(d: pendulum.Date) -> Tuple[str, int]:
    """–£–ø—Ä–æ—â—ë–Ω–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º —Ñ–∞–∑—É –õ—É–Ω—ã –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏."""
    SYNODIC = 29.530588853
    ref = pendulum.date(2025, 5, 11)  # –æ–ø–æ—Ä–Ω–∞—è –¥–∞—Ç–∞ –ù–æ–≤–æ–ª—É–Ω–∏—è
    age = (d - ref).days % SYNODIC
    pct = int(round(abs((1 - abs((age / SYNODIC) * 2 - 1))) * 100))
    if age < 1:
        name = "–ù–æ–≤–æ–ª—É–Ω–∏–µ"
    elif age < SYNODIC * 0.25:
        name = "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞"
    elif age < SYNODIC * 0.5:
        name = "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    elif age < SYNODIC * 0.75:
        name = "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    elif age < SYNODIC * 0.875:
        name = "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞"
    else:
        name = "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    # –ü—Ä–∏–≤—è–∂–µ–º –∑–Ω–∞–∫ –∫ –¥–Ω—é –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    SIGNS = ["–û–≤–Ω–µ","–¢–µ–ª—å—Ü–µ","–ë–ª–∏–∑–Ω–µ—Ü–∞—Ö","–†–∞–∫–µ","–õ—å–≤–µ","–î–µ–≤–µ",
             "–í–µ—Å–∞—Ö","–°–∫–æ—Ä–ø–∏–æ–Ω–µ","–°—Ç—Ä–µ–ª—å—Ü–µ","–ö–æ–∑–µ—Ä–æ–≥–µ","–í–æ–¥–æ–ª–µ–µ","–†—ã–±–∞—Ö"]
    sign = SIGNS[(d.day + d.month) % 12]
    return f"{name} –≤ {sign} ({pct}% –æ—Å–≤–µ—â.)", pct

def compute_next_event(d: pendulum.Date) -> str:
    """–ü—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ GPT –ø–æ–ª—É—á–∏—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ —Å–µ—Ä—å—ë–∑–Ω–æ–µ –ª—É–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ."""
    if client:
        prompt = (
            f"–î–∞—Ç–∞ {d.to_date_string()}, —Ñ–∞–∑–∞ –õ—É–Ω—ã: {compute_lunar_phase(d)[0]}. "
            "–ö—Ä–∞—Ç–∫–æ (‚â§12 —Å–ª–æ–≤) –∞–Ω–æ–Ω—Å–∏—Ä—É–π –±–ª–∏–∂–∞–π—à—É—é –∑–∞–º–µ—Ç–Ω—É—é —Å–º–µ–Ω—É —Ñ–∞–∑—ã –∏–ª–∏ –∑–∞—Ç–º–µ–Ω–∏–µ –∏ –¥–∞–π —Å–æ–≤–µ—Ç."
        )
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.6,
            messages=[{"role":"user","content":prompt}],
        )
        text = resp.choices[0].message.content.strip()
        return f"‚Üí {text}"
    # fallback
    return "‚Üí –ß–µ—Ä–µ–∑ 3 –¥–Ω—è –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ –≤ –†—ã–±–∞—Ö ‚Äî –≤—Ä–µ–º—è –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ üé®"

# –§–æ–ª–±—ç–∫-—Å–ø–∏—Å–∫–∏ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —Ñ–∞–∑–∞–º
FALLBACK_ADVICE = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ": [
        "–ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å –∫–æ—Ä–æ—Ç–∫–æ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –Ω–∞ —Ü–µ–ª–∏ üßò",
        "–ó–∞–ø–∏—à–∏ —Å–≤–æ–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –Ω–∞ –±—É–º–∞–≥–µ –∏ –¥–µ—Ä–∂–∏ –∏—Ö –Ω–∞ –≤–∏–¥—É üìù"
    ],
    "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞": [
        "–ü–ª–∞–Ω–∏—Ä—É–π –∏ –¥–µ–π—Å—Ç–≤—É–π: –∑–∞–π–º–∏—Å—å —Å–ø–æ—Ä—Ç–æ–º –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ üèÉ",
        "–ù–∞—á–Ω–∏ –∏–∑—É—á–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å üìö"
    ],
    "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å": [
        "–ò—Å–ø–æ–ª—å–∑—É–π –∏–º–ø—É–ª—å—Å: —É—Å—Ç—Ä–∞–∏–≤–∞–π –≤—Å—Ç—Ä–µ—á–∏ –∏ –æ–±—Å—É–∂–¥–∞–π –∏–¥–µ–∏ üí¨",
        "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö ‚Äî –∑–∞–≤–µ—Ä—à–∏ –ø–æ–ª–æ–≤–∏–Ω—É –ø–ª–∞–Ω–æ–≤ ‚úÖ"
    ],
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ": [
        "–ó–∞–∫—Ä–æ–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –¥–µ–ª–∞ –∏ –æ—Ç–¥–æ—Ö–Ω–∏ –ø–æ–¥ –ª—É–Ω–Ω—ã–º —Å–≤–µ—Ç–æ–º üåï",
        "–ü—Ä–æ–≤–µ–¥–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –≤–µ—á–µ—Ä: —Ä–∏—Å—É–π –∏–ª–∏ –ø–∏—à–∏ üé®"
    ],
    "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞": [
        "–†–∏—Ç—É–∞–ª –æ—á–∏—â–µ–Ω–∏—è: –∏–∑–±–∞–≤—å—Å—è –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö –≤–µ—â–µ–π üïØÔ∏è",
        "–ü–æ–¥–≤–µ–¥–∏ –∏—Ç–æ–≥–∏ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ üîÑ"
    ],
    "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å": [
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é –∏ —Ä–∞—Å—Å–ª–∞–±—å—Å—è üõÅ",
        "–ó–∞–π–º–∏—Å—å –º–µ–¥–∏—Ç–∞—Ü–∏–µ–π –∏–ª–∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π üå¨Ô∏è"
    ],
}

def compute_advice(d: pendulum.Date, phase_str: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç –ª–∏–±–æ —á–µ—Ä–µ–∑ GPT, –ª–∏–±–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ–æ–ª–±—ç–∫–∞."""
    phase_name = phase_str.split(" –≤ ")[0]
    if client:
        prompt = (
            f"–î–∞—Ç–∞ {d.to_date_string()}, —Ñ–∞–∑–∞ –õ—É–Ω—ã: {phase_str}. "
            "–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –∫ –¥–µ–π—Å—Ç–≤–∏—é –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å, 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
        )
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.7,
            messages=[{"role":"user","content":prompt}],
        )
        return resp.choices[0].message.content.strip()
    return random.choice(FALLBACK_ADVICE.get(phase_name, ["–ù–∞—Å–ª–∞–¥–∏—Å—å –º–æ–º–µ–Ω—Ç–æ–º –ø–æ–¥ –ª—É–Ω–Ω—ã–º —Å–≤–µ—Ç–æ–º üåô"]))

def generate_calendar(year: int, month: int) -> Dict[str, Dict[str, Any]]:
    """–û—Å–Ω–æ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü."""
    start = pendulum.date(year, month, 1)
    end = start.end_of('month')
    cal: Dict[str, Dict[str, Any]] = {}
    # –ü—Ä–∏–º–µ—Ä—ã –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª–æ–≥–∏–∫—É)
    favorable = list(range(1, 6))
    unfavorable = list(range(20, 26))
    d = start
    while d <= end:
        phase_str, _ = compute_lunar_phase(d)
        advice = compute_advice(d, phase_str)
        next_ev = compute_next_event(d)
        cal[d.to_date_string()] = {
            "phase":            phase_str,
            "advice":           advice,
            "next_event":       next_ev,
            "favorable_days":   favorable,
            "unfavorable_days": unfavorable,
        }
        d = d.add(days=1)
    return cal

def main():
    today = pendulum.today()
    data = generate_calendar(today.year, today.month)
    out = Path(__file__).parent / "lunar_calendar.json"
    out.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    print(f"‚úÖ –§–∞–π–ª {out.name} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {today.format('MMMM YYYY')}")

if __name__ == "__main__":
    main()
