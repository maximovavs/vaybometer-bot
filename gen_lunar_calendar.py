#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
gen_lunar_calendar.py
~~~~~~~~~~~~~~~~~~~~~
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª lunar_calendar.json –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞.

–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç:
  - phase:          —Å—Ç—Ä–æ–∫–∞ —Å —Ñ–∞–∑–æ–π –õ—É–Ω—ã + –∑–Ω–∞–∫ + "(XX% –æ—Å–≤–µ—â.)"
  - advice:         –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
  - next_event:     –∫—Ä–∞—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏–µ
  - favorable_days: —Å–ø–∏—Å–æ–∫ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
  - unfavorable_days: —Å–ø–∏—Å–æ–∫ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
"""

import os
import json
from pathlib import Path
import pendulum
from typing import Dict, Any, List, Tuple

# –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT –¥–ª—è advice/next_event:
from openai import OpenAI

OPENAI_KEY = os.getenv("OPENAI_API_KEY")


def compute_lunar_phase(d: pendulum.Date) -> Tuple[str, int]:
    """
    –≠–º—É–ª–∏—Ä—É–µ–º —Ñ–∞–∑—É –õ—É–Ω—ã –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–Ω–∞–∑–≤–∞–Ω–∏–µ, percent).
    """
    SYNODIC = 29.530588853
    # –û–ø–æ—Ä–Ω–æ–µ –Ω–æ–≤–æ–ª—É–Ω–∏–µ
    ref = pendulum.date(2025, 5, 11)
    age = (d - ref).days % SYNODIC
    pct = int(round(abs((1 - abs((age / SYNODIC)*2-1))) * 100))
    if age < 1:
        name = "–ù–æ–≤–æ–ª—É–Ω–∏–µ"
    elif age < SYNODIC * 0.25:
        name = "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞"
    elif age < SYNODIC * 0.5:
        name = "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    elif age < SYNODIC * 0.75:
        name = "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    elif age < SYNODIC * 0.875:
        name = "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞"
    else:
        name = "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    # –ó–Ω–∞–∫ –ø–æ –¥–∞—Ç–µ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–æ—Ç–∞)
    sign_idx = (d.day + d.month) % 12
    SIGNS = ["–û–≤–Ω–µ","–¢–µ–ª—å—Ü–µ","–ë–ª–∏–∑–Ω–µ—Ü–∞—Ö","–†–∞–∫–µ","–õ—å–≤–µ","–î–µ–≤–µ",
             "–í–µ—Å–∞—Ö","–°–∫–æ—Ä–ø–∏–æ–Ω–µ","–°—Ç—Ä–µ–ª—å—Ü–µ","–ö–æ–∑–µ—Ä–æ–≥–µ","–í–æ–¥–æ–ª–µ–µ","–†—ã–±–∞—Ö"]
    sign = SIGNS[sign_idx]
    return f"{name} –≤ {sign} ({pct}% –æ—Å–≤–µ—â.)", pct


def compute_next_event(d: pendulum.Date) -> str:
    """
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ GPT –∏–ª–∏ –≤—ã—á–∏—Å–ª–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ.
    –°–µ–π—á–∞—Å ‚Äî –∑–∞–≥–ª—É—à–∫–∞: —á–µ—Ä–µ–∑ 3 –¥–Ω—è –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ ‚Üí —Å–æ–≤–µ—Ç.
    """
    # –ü—Ä–∏–º–µ—Ä GPT‚Äê–ø–æ–¥—Ö–æ–¥–∞:
    if OPENAI_KEY:
        client = OpenAI(api_key=OPENAI_KEY)
        prompt = (
            f"–î–ª—è –¥–∞—Ç—ã {d.to_date_string()}: –∫–∞–∫–æ–π –±–ª–∏–∂–∞–π—à–∏–π –∑–∞–º–µ—Ç–Ω—ã–π –ª—É–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ "
            "–∏ –¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç (‚â§12 —Å–ª–æ–≤)? –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ñ—Ä–∞–∑–∞."
        )
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.6,
            messages=[{"role":"user","content":prompt}],
        )
        text = resp.choices[0].message.content.strip()
        return f"‚Üí {text}"
    # fallback
    return "‚Üí –ß–µ—Ä–µ–∑ 3 –¥–Ω—è –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ –≤ –†—ã–±–∞—Ö ‚Äî –≤—Ä–µ–º—è –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ üé®"


def generate_calendar(year: int, month: int) -> Dict[str, Dict[str, Any]]:
    start = pendulum.date(year, month, 1)
    end = start.end_of('month')
    cal: Dict[str, Dict[str, Any]] = {}
    d = start
    # –ó–∞–≥–ª—É—à–∫–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π
    # (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∏–ª–∏ GPT-–∑–∞–ø—Ä–æ—Å)
    favorable = list(range(1, 6))
    unfavorable = list(range(20, 26))

    while d <= end:
        phase_str, pct = compute_lunar_phase(d)
        advice = (
            f"–ù–∞—á–Ω–∏—Ç–µ —É—Ç—Ä–æ —Å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ üßò "
            f"‚Äî {phase_str.split()[0].lower()} –õ—É–Ω—ã."
        )
        next_ev = compute_next_event(d)

        cal[d.to_date_string()] = {
            "phase":         phase_str,
            "advice":        advice,
            "next_event":    next_ev,
            "favorable_days": favorable,
            "unfavorable_days": unfavorable,
        }
        d = d.add(days=1)

    return cal


def main():
    today = pendulum.today()
    data = generate_calendar(today.year, today.month)
    out = Path(__file__).parent / "lunar_calendar.json"
    out.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    print(f"‚úÖ –§–∞–π–ª {out.name} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {today.format('MMMM YYYY')}")


if __name__ == "__main__":
    main()
