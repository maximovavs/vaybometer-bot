#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
gen_lunar_calendar.py
~~~~~~~~~~~~~~~~~~~~~
Генерирует файл lunar_calendar.json для текущего месяца с точными астрономическими расчётами
и профессиональными рекомендациями.

Для каждой даты рассчитывает:
  - phase         : "Полнолуние в Овне (100% освещ.)"
  - percent       : 100
  - sign          : "Овен"
  - aspects       : ["☌Saturn (+0.4°)", "☍Mars (−0.2°)", …]
  - void_of_course: {"start":"2025-06-17T04:12","end":"2025-06-17T13:45"}  (пока заглушка)
  - next_event    : "→ Через 2 дн. Новолуние в Близнецах"
  - advice        : ["Работа/финансы: …", "Что отложить: …", "Ритуал дня: …"]
  - favorable_days: {"general":[…], "haircut":[…], …}
  - unfavorable_days: {"general":[…], …}
"""

import os
import json
import math
import random
from pathlib import Path
from typing import Dict, Any, List, Optional

import pendulum
import swisseph as swe

# ── Опциональный GPT-клиент ───────────────────────────────
try:
    from openai import OpenAI
    OPENAI_KEY = os.getenv("OPENAI_API_KEY")
    gpt = OpenAI(api_key=OPENAI_KEY) if OPENAI_KEY else None
except ImportError:
    gpt = None

# ── Категории дней ────────────────────────────────────────
CATEGORIES: Dict[str, Dict[str, List[int]]] = {
    "general":  {"favorable":[1,2,3,4,7,28,29],     "unfavorable":[13,20,23,24,27]},
    "haircut":  {"favorable":[1,2,4,7,9,10,18,19,24,25,31], "unfavorable":[]},
    "travel":   {"favorable":[5,7,14,15],            "unfavorable":[]},
    "shopping": {"favorable":[3,6,9,12,14,17,20,25], "unfavorable":[13,20,23,24,27]},
    "health":   {"favorable":[1,2,3,4,7,28,29],      "unfavorable":[]},
}

# ── Аспекты и орбисы ─────────────────────────────────────
ASPECTS = {0:"☌", 60:"⚹", 90:"□", 120:"△", 180:"☍"}
ORBIS   = {0:5.0, 60:4.0, 90:3.0, 120:4.0, 180:5.0}

PLANETS = {
    "Sun":     swe.SUN,
    "Mercury": swe.MERCURY,
    "Venus":   swe.VENUS,
    "Mars":    swe.MARS,
    "Jupiter": swe.JUPITER,
    "Saturn":  swe.SATURN,
    "Uranus":  swe.URANUS,
    "Neptune": swe.NEPTUNE,
    "Pluto":   swe.PLUTO,
}

# ── Фолбэк-советы по фазам ─────────────────────────────────
FALLBACK_ADVICE: Dict[str, List[str]] = {
    "Новолуние": [
        "Работа/финансы: Запланируй цели месяца, вдохновляясь кипрским солнцем 📝☀️",
        "Здоровье: Начни день с воды и лимона из садов Лимассола 💧🍋",
        "Творчество: Создай мудборд мечты, сидя в кафе Пафоса 📌",
        "Ритуал: Медитация на очистку ума под шум моря в Ларнаке 🧘🌊",
        "Энергия: Запиши намерения и положи их под оливковую ветвь 🌿",
        "Отложи: Импульсивные траты — лучше купи халлуми на рынке 🧀",
        "Социум: Поделись планами с друзьями за фраппе в Никосии ☕",
        "Рост: Посади суккулент — символ новых начинаний на Кипре 🌱",
        "Детокс: Час без гаджетов, наслаждаясь закатом в Айя-Напе 🌅",
        "Мотивация: Читай вдохновляющую цитату, гуляя по Троодосу 📖",
        "Победа: Отметь прошлые успехи, как кипрский фестиваль вина 🏆🍷",
        "Действие: Начни утреннюю привычку — пробежка по набережной 🏃",
    ],
    "Растущий серп": [
        "Работа/финансы: Составь план действий, вдохновляясь энергией Кипра 🚀",
        "Здоровье: Утренняя йога на пляже Ларнаки для заряда 🧘‍♀️",
        "Творчество: Набросай идеи для проекта в таверне с видом на море 🎨",
        "Ритуал: Дыхательная практика под оливами в Омодосе 🌬️🌳",
        "Энергия: Начни изучать новый навык, как ремесла Лефкары 📚",
        "Отложи: Споры и конфликты — лучше пей смузи на закате 🥤",
        "Социум: Проведи нетворкинг в кафе Лимассола за сувлой 🤝🍢",
        "Рост: Запиши три цели на неделю и следуй им с кипрским упорством ✅",
        "Детокс: Очисти рабочее пространство, как кипрские виноделы бочки 🧹",
        "Мотивация: Зарегистрируйся на мастер-класс, вдохновленный Пафосом 🎓",
        "Победа: Празднуй микропобеды с бокалом зиваны 🍷",
        "Действие: Обнови резюме, как кипрские мастера обновляют кружево 📈",
    ],
    "Первая четверть": [
        "Работа/финансы: Сфокусируйся на ключевых задачах, как кипрский винодел 🍇",
        "Здоровье: Контрастный душ для энергии, как волны в Айя-Напе ⚡",
        "Творчество: Проведи креативную сессию в тени Троодоса 🎨",
        "Ритуал: Тайм-блокинг для дел, вдохновленный рынками Никосии ⏳",
        "Энергия: Проверь прогресс, как рыбаки Ларнаки проверяют сети 🐟",
        "Отложи: Крупные покупки — лучше купи билет на фестиваль 🛑",
        "Социум: Делись идеями за ужином с мезе в Пафосе 🗣️🍽️",
        "Рост: Проведи SWOT-анализ, как стратег на Кипре 📊",
        "Детокс: Без гаджетов за ужином, как в кипрских тавернах 📵",
        "Мотивация: Поставь челлендж на неделю, как на карнавале Лимассола 🎯",
        "Победа: Отметь успехи, как на празднике Катаклизмос 🎉",
        "Действие: Запланируй встречу с командой в духе кипрских парадов 🚧",
    ],
    "Растущая Луна": [
        "Работа/финансы: Запусти проект, как регата в Ларнаке 🚀⛵",
        "Здоровье: Утренняя зарядка на пляже Пафоса для бодрости 🏃",
        "Творчество: Рисуй или пиши, вдохновляясь закатами Кипра 🎨🌅",
        "Ритуал: Йога под оливами для синергии с лунной энергией 🧘‍♀️",
        "Энергия: Составь приоритеты, как кипрские повара готовят сувлу 🔝",
        "Отложи: Ссоры — лучше танцуй на пляжной вечеринке ⚔️💃",
        "Социум: Нетворкинг в кафе Айя-Напы за фраппе 🤝☕",
        "Рост: Обнови портфолио, как мастера Кипра свои изделия 📈",
        "Детокс: Проведи час без соцсетей, как монахи в Киккосе 📵",
        "Мотивация: Читай книгу, вдохновляясь видами Троодоса 📚",
        "Победа: Празднуй прогресс с бокалом кипрского вина 🍷",
        "Действие: Запусти блог или рекламу, как фестиваль в Омодосе 🚀",
    ],
    "Полнолуние": [
        "Работа/финансы: Проверь бюджет, как торговцы на рынке Никосии 💰",
        "Здоровье: Лунная ванна с солью из Ларнакского озера 🛁🦩",
        "Творчество: Пиши или рисуй под звездами Пафоса 🌕🎨",
        "Ритуал: Медитация на отпускание у моря в Айя-Напе 🌬️",
        "Энергия: Закрой дела, как кипрские рыбаки сети в конце дня 🐟",
        "Отложи: Переговоры — лучше пей зивану в таверне 🗣️🍷",
        "Социум: Напиши благодарность друзьям за ужином с мезе 💌🍽️",
        "Рост: Проведи ритуал прощения, как на Успение Богородицы 🙏",
        "Детокс: Ночь без гаджетов, как на кипрском карнавале 📵",
        "Мотивация: Смотри на Луну в телескоп, как в обсерватории Кипра 🔭",
        "Победа: Отметь успехи, как на фестивале вина в Лимассоле 🏆",
        "Действие: Танцуй под Луной, как на вечеринке в Пафосе 💃",
    ],
    "Убывающая Луна": [
        "Работа/финансы: Подведи итоги, как виноделы Кипра после урожая 🔄",
        "Здоровье: Детокс-диета с овощами из садов Троодоса 🥣",
        "Творчество: Напиши письмо прощения себе, как монахи Киккоса ✍️",
        "Ритуал: Йога нидра на закате в Ларнаке для релакса 🧘‍♂️",
        "Энергия: Очисти пространство, как кипрские таверны перед сезоном 🧹",
        "Отложи: Лишние траты — лучше купи оливковое масло 🛑🫒",
        "Социум: Отпишись от ненужных рассылок, как от шума Никосии 📧",
        "Рост: Вычеркни ненужные цели, как на Катаклизмосе 🚫",
        "Детокс: День молчания, вдохновленный монастырями Кипра 🤫",
        "Мотивация: Проведи ритуал с огнем, как на кипрском костре 🔥",
        "Победа: Отметь завершение дел с бокалом сангрии 🍹",
        "Действие: Запланируй SPA-день, как в спа Лимассола 🧖‍♀️",
    ],
    "Последняя четверть": [
        "Работа/финансы: Завершай дела, как рыбаки Пафоса сети ✔️",
        "Здоровье: Цигун на пляже Ларнаки для гармонии ☯️",
        "Творчество: Составь манифест благодарности, как в Омодосе 🙌",
        "Ритуал: Дыхательная практика под оливами Троодоса 🌬️🌳",
        "Энергия: Проанализируй уроки месяца, как на рынке Никосии 📝",
        "Отложи: Крупные решения — лучше пей фраппе в кафе ☕⏳",
        "Социум: Поделись выводами с друзьями за сувлой 🍢🗣️",
        "Рост: Пересмотри привычки, как кипрские мастера кружево 🔍",
        "Детокс: Очисти цифровой архив, как таверны перед сезоном 🗂️",
        "Мотивация: Читай книгу о развитии, вдохновляясь Кипром 📖",
        "Победа: Отметь успехи с ужином из мезе в Пафосе 🏆🍽️",
        "Действие: Ляг спать вовремя, как после фестиваля в Лимассоле 💤",
    ],
    "Убывающий серп": [
        "Работа/финансы: Сверь планы, как торговцы на рынке Лефкары 📋",
        "Здоровье: Легкая растяжка на пляже Айя-Напы для релакса 🧘",
        "Творчество: Напиши итоги цикла, вдохновляясь закатами Кипра ✍️🌅",
        "Ритуал: Медитация на отпускание под звездами Пафоса 🌬️",
        "Энергия: Избавься от хлама, как кипрские виноделы от старых бочек 🧹",
        "Отложи: Новые начинания — лучше пей чай с травами из Троодоса 🌿",
        "Социум: Поблагодари друзей за поддержку за ужином с халлуми 🧀",
        "Рост: Составь план на новый цикл, как на карнавале Лимассола 📅",
        "Детокс: Час без соцсетей, как монахи в монастыре Киккос 📵",
        "Мотивация: Прогуляйся под звездами, как на кипрском побережье 🚶‍♀️",
        "Победа: Отметь завершение цикла с бокалом зиваны 🍷",
        "Действие: Проведи ритуал с водой, как на Катаклизмосе 🌊",
    ],
}

def jd_to_datetime(jd: float) -> pendulum.DateTime:
    """Конвертирует юлианскую дату UT в pendulum DateTime (UTC)."""
    # JD 2440587.5 соответствует Unix epoch
    ts = (jd - 2440587.5) * 86400.0
    return pendulum.from_timestamp(ts, tz="UTC")

def compute_phase_and_sign(jd_ut: float) -> (str, int, str):
    """Вычисляет фазу Луны, процент освещённости и знак зодиака."""
    sun_lon  = swe.calc_ut(jd_ut, swe.SUN)[0][0]
    moon_lon = swe.calc_ut(jd_ut, swe.MOON)[0][0]
    angle    = (moon_lon - sun_lon) % 360.0
    illum    = int(round((1 - math.cos(math.radians(angle))) / 2 * 100))

    # Определяем название фазы
    if 0 <= angle < 22.5 or 337.5 <= angle < 360:
        name = "Новолуние"
    elif 22.5 <= angle < 67.5:
        name = "Растущий серп"
    elif 67.5 <= angle < 112.5:
        name = "Первая четверть"
    elif 112.5 <= angle < 157.5:
        name = "Растущая Луна"
    elif 157.5 <= angle < 202.5:
        name = "Полнолуние"
    elif 202.5 <= angle < 247.5:
        name = "Убывающая Луна"
    elif 247.5 <= angle < 292.5:
        name = "Последняя четверть"
    elif 292.5 <= angle < 337.5:
        name = "Убывающий серп"

    # Знак зодиака по долготе Луны
    idx   = int(moon_lon // 30) % 12
    signs = ["Овен","Телец","Близнецы","Рак","Лев","Дева",
             "Весы","Скорпион","Стрелец","Козерог","Водолей","Рыбы"]
    sign  = signs[idx]

    phase_str = f"{name} в {sign} ({illum}% освещ.)"
    return phase_str, illum, sign

def compute_aspects(jd_ut: float) -> List[str]:
    """Ищет основные аспекты Луны к планетам."""
    moon_lon = swe.calc_ut(jd_ut, swe.MOON)[0][0]
    out: List[str] = []
    for pname, pid in PLANETS.items():
        pl_lon = swe.calc_ut(jd_ut, pid)[0][0]
        diff   = abs((moon_lon - pl_lon + 180) % 360 - 180)
        for ang, sym in ASPECTS.items():
            orb = ORBIS.get(ang, 3.0)
            if abs(diff - ang) <= orb:
                out.append(f"{sym}{pname} ({diff - ang:+.1f}°)")
    return out

def compute_next_event(jd_ut: float) -> str:
    """Находит ближайшее полнолуние или новолуние и возвращает анонс."""
    # ближайшее новолуние
    nm_jd = swe.swe_next_new_moon(jd_ut)
    fm_jd = swe.swe_next_full_moon(jd_ut)
    now_date = pendulum.from_timestamp((jd_ut - 2440587.5)*86400, tz="UTC").date()

    nm_dt = jd_to_datetime(nm_jd).date()
    fm_dt = jd_to_datetime(fm_jd).date()
    dm = (nm_dt - now_date).days
    df = (fm_dt - now_date).days

    if dm <= df:
        days, jd_next = dm, nm_jd
    else:
        days, jd_next = df, fm_jd

    phase_str, _, _ = compute_phase_and_sign(jd_next)
    return f"→ Через {days} дн. {phase_str}"

def compute_advice(d: pendulum.Date, phase_str: str) -> List[str]:
    """Получает 3 совета через GPT или из фолбэка."""
    phase_name = phase_str.split(" в ")[0]
    if gpt:
        prompt = (
            f"Действуй как профессиональный астролог, который дает очень крутые и действенные рекомендации с чувством среднеземноморского юмора: дата {d.to_date_string()}, "
            f"фаза Луны: {phase_str}. "
            "Дай ровно три коротких практических совета, добавляя смайлики, в категориях:\n"
            "• работа/финансы\n• что отложить\n• ритуал дня"
        )
        resp = gpt.chat.completions.create(
            model="gpt-4o-mini", temperature=0.7,
            messages=[{"role":"user","content":prompt}]
        )
        lines = [ln.strip() for ln in resp.choices[0].message.content.split("\n") if ln.strip()]
        return lines[:3]
    else:
        return random.sample(FALLBACK_ADVICE.get(phase_name, FALLBACK_ADVICE["Новолуние"]), k=3)

def generate_calendar(year: int, month: int) -> Dict[str, Any]:
    swe.set_ephe_path('.')  # если нужно, укажите путь к эфемеридам
    start = pendulum.date(year, month, 1)
    end   = start.end_of('month')
    cal: Dict[str, Any] = {}

    # 1) базовые вычисления
    d = start
    while d <= end:
        jd_ut = swe.julday(d.year, d.month, d.day, 0.0)
        phase_str, illum, sign = compute_phase_and_sign(jd_ut)
        cal[d.to_date_string()] = {
            "phase":          phase_str,
            "percent":        illum,
            "sign":           sign,
            "aspects":        compute_aspects(jd_ut),
            "void_of_course": {"start": None, "end": None},  # TODO: вычислить реальный V/C
            "next_event":     compute_next_event(jd_ut),
            "advice":         compute_advice(d, phase_str),
            "favorable_days": {cat: CATEGORIES[cat]["favorable"] for cat in CATEGORIES},
            "unfavorable_days":{cat: CATEGORIES[cat]["unfavorable"] for cat in CATEGORIES},
        }
        d = d.add(days=1)

    return cal

def main():
    today = pendulum.today()
    data  = generate_calendar(today.year, today.month)
    out   = Path(__file__).parent / "lunar_calendar.json"
    out.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    print(f"✅ lunar_calendar.json сгенерирован для {today.format('MMMM YYYY')}")

if __name__ == "__main__":
    main()
