#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import datetime as dt
import math
import swisseph as swe
from typing import Optional, List

SIGNS   = ["–ö–æ–∑–µ—Ä–æ–≥–µ","–í–æ–¥–æ–ª–µ–µ","–†—ã–±–∞—Ö","–û–≤–Ω–µ", ...]  # —Ç–æ—Ç –∂–µ —Å–ø–∏—Å–æ–∫
EFFECT = [ "—Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç...", ... ]                  # —Ç–æ—Ç –∂–µ —Å–ø–∏—Å–æ–∫
MOON_ICONS = "üåëüåíüåìüåîüåïüåñüåóüåò"

def moon_phase() -> str:
    jd   = swe.julday(*dt.datetime.utcnow().timetuple()[:3])
    sun  = swe.calc_ut(jd, swe.SUN)[0][0]
    moon = swe.calc_ut(jd, swe.MOON)[0][0]
    phase = ((moon-sun+360)%360)/360
    illum = round(abs(math.cos(math.pi*phase))*100)
    icon  = MOON_ICONS[int(phase*8)%8]
    name  = ("–ù–æ–≤–æ–ª—É–Ω–∏–µ" if illum<5 else ...)
    sign  = int(moon//30)
    return f"{icon} {name} –≤ {SIGNS[sign]} ({illum} %) ‚Äî {EFFECT[sign]}"

def planet_parade() -> Optional[str]:
    jd = swe.julday(*dt.datetime.utcnow().timetuple()[:3])
    lons = sorted(... )
    best = min(... )
    return "–ú–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç" if best<90 else None

def eta_aquarids() -> Optional[str]:
    y = dt.datetime.utcnow().timetuple().tm_yday
    return "Eta Aquarids (–º–µ—Ç–µ–æ—Ä—ã)" if 120<=y<=140 else None

def upcoming_event(days:int=3) -> Optional[str]:
    return f"–ß–µ—Ä–µ–∑ {days} –¥–Ω—è —á–∞—Å—Ç–Ω–æ–µ —Å–æ–ª–Ω–µ—á–Ω–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ" if days==3 else None

def astro_events() -> List[str]:
    ev = [moon_phase()]
    if p:=planet_parade():     ev.append(p)
    if m:=eta_aquarids():      ev.append(m)
    if u:=upcoming_event():    ev.append(u)
    return ev
