#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import math
import datetime as dt
import swisseph as swe
from typing import Optional, List

# –ù–∞–∑–≤–∞–Ω–∏—è –∑–Ω–∞–∫–æ–≤ –∏ –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç—ã
SIGNS = [
    "–ö–æ–∑–µ—Ä–æ–≥–µ", "–í–æ–¥–æ–ª–µ–µ", "–†—ã–±–∞—Ö", "–û–≤–Ω–µ",
    "–¢–µ–ª—å—Ü–µ", "–ë–ª–∏–∑–Ω–µ—Ü–∞—Ö", "–†–∞–∫–µ", "–õ—å–≤–µ",
    "–î–µ–≤–µ", "–í–µ—Å–∞—Ö", "–°–∫–æ—Ä–ø–∏–æ–Ω–µ", "–°—Ç—Ä–µ–ª—å—Ü–µ"
]
EFFECT = [
    "—Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç –Ω–∞ –¥–µ–ª–µ", "–¥–∞—Ä–∏—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∏–¥–µ–∏", "—É—Å–∏–ª–∏–≤–∞–µ—Ç —ç–º–ø–∞—Ç–∏—é",
    "–ø—Ä–∏–¥–∞—ë—Ç —Å–º–µ–ª–æ—Å—Ç–∏", "–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç", "–ø–æ–≤—ã—à–∞–µ—Ç –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å",
    "—É—Å–∏–ª–∏–≤–∞–µ—Ç –∑–∞–±–æ—Ç—É", "—Ä–∞–∑–∂–∏–≥–∞–µ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –æ–≥–æ–Ω—å", "–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞ –ø–æ—Ä—è–¥–æ–∫",
    "–∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å –±–∞–ª–∞–Ω—Å", "–ø–æ–¥–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–∞—Å—Ç—å", "—Ç–æ–ª–∫–∞–µ—Ç –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º"
]

# –ö—Ä—É–≥–æ–≤–∞—è —à–∫–∞–ª–∞ –∏–∫–æ–Ω–æ–∫ —Ñ–∞–∑
MOON_ICONS = "üåëüåíüåìüåîüåïüåñüåóüåò"

def moon_phase() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:
      "<–∏–∫–æ–Ω–∫–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã> –≤ <–∑–Ω–∞–∫> (<illum> %) ‚Äî <—ç—Ñ—Ñ–µ–∫—Ç>"
    """
    # —é–ª–∏–∞–Ω—Å–∫–∞—è –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è
    jd = swe.julday(*dt.datetime.utcnow().timetuple()[:3])
    sun_lon  = swe.calc_ut(jd, swe.SUN)[0][0]
    moon_lon = swe.calc_ut(jd, swe.MOON)[0][0]
    # —Ñ–∞–∑–∞ 0‚Ä¶1
    phase = ((moon_lon - sun_lon + 360) % 360) / 360
    # –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å
    illum = round(abs(math.cos(math.pi * phase)) * 100)
    # –≤—ã–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ñ–∞–∑–µ
    icon = MOON_ICONS[int(phase * len(MOON_ICONS)) % len(MOON_ICONS)]
    # –∏–º—è —Ñ–∞–∑—ã
    if illum < 5:
        name = "–ù–æ–≤–æ–ª—É–Ω–∏–µ"
    elif phase < 0.5:
        name = "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞"
    elif illum > 95:
        name = "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    else:
        name = "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞"
    # –∑–Ω–∞–∫ –∏ —ç—Ñ—Ñ–µ–∫—Ç (–Ω–∞–∫—Ä—ã–≤–∞–µ–º % 12, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã)
    sign_index = (int(moon_lon // 30)) % 12
    sign   = SIGNS[sign_index]
    effect = EFFECT[sign_index]

    return f"{icon} {name} –≤ {sign} ({illum} %) ‚Äî {effect}"

def planet_parade() -> Optional[str]:
    """
    –ú–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç, –µ—Å–ª–∏ 3 –ª—é–±—ã—Ö –ø–ª–∞–Ω–µ—Ç—ã –ª–µ–∂–∞—Ç –≤ –æ–¥–Ω–æ–º —Å–µ–∫—Ç–æ—Ä–µ < 90¬∞.
    """
    jd = swe.julday(*dt.datetime.utcnow().timetuple()[:3])
    lons = sorted(
        swe.calc_ut(jd, body)[0][0]
        for body in (swe.MERCURY, swe.VENUS, swe.MARS, swe.JUPITER, swe.SATURN)
    )
    best = min((lons[i+2] - lons[i]) % 360 for i in range(len(lons) - 2))
    return "–ú–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç" if best < 90 else None

def eta_aquarids() -> Optional[str]:
    """–ü–∏–∫–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –º–µ—Ç–µ–æ—Ä–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ Eta Aquarids (–¥–Ω. 120‚Äì140)."""
    yday = dt.datetime.utcnow().timetuple().tm_yday
    return "Eta Aquarids (–º–µ—Ç–µ–æ—Ä—ã)" if 120 <= yday <= 140 else None

def upcoming_event(days: int = 3) -> Optional[str]:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–µ–¥–∞–Ω–æ–Ω—Å–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ N –¥–Ω–µ–π.
    –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è days==3.
    """
    if days == 3:
        return "–ß–µ—Ä–µ–∑ 3 –¥–Ω—è —á–∞—Å—Ç–Ω–æ–µ —Å–æ–ª–Ω–µ—á–Ω–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ"
    return None

def astro_events() -> List[str]:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏–π:
      ‚Ä¢ —Ç–µ–∫—É—â–∞—è —Ñ–∞–∑–∞
      ‚Ä¢ –º–∏–Ω–∏-–ø–∞—Ä–∞–¥, –µ—Å–ª–∏ –µ—Å—Ç—å
      ‚Ä¢ Eta Aquarids, –µ—Å–ª–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
      ‚Ä¢ –ø—Ä–µ–¥–∞–Ω–æ–Ω—Å —á–µ—Ä–µ–∑ upcoming_event()
    """
    ev: List[str] = [moon_phase()]
    if p := planet_parade():
        ev.append(p)
    if m := eta_aquarids():
        ev.append(m)
    if u := upcoming_event():
        ev.append(u)
    return ev
