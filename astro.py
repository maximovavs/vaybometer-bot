#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
astro.py  ‚Ä¢ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä –±–æ—Ç–∞ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ.

–¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ VoC (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é ‚â• 15 –º–∏–Ω)
‚Ä¢ –ú–µ—Ç–∫—É ¬´–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π / –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å¬ª
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ‚úÇÔ∏è —Å—Ç—Ä–∏–∂–∫–∞, ‚úàÔ∏è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, üõç –ø–æ–∫—É–ø–∫–∏, ‚ù§Ô∏è –∑–¥–æ—Ä–æ–≤—å–µ
‚Ä¢ –§–∞–∑—É –õ—É–Ω—ã + 3 —Å–æ–≤–µ—Ç–∞
‚Ä¢ next_event
"""

from __future__ import annotations
import pendulum
from typing import Any, Dict, List, Optional
from lunar import get_day_lunar_info  # —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ lunar.py

# –£—Å—Ç–∞–Ω–æ–≤–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
TZ = pendulum.timezone("Asia/Nicosia")


def _today_info() -> Optional[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ lunar_calendar.json –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.
    """
    today = pendulum.now(TZ).date()
    return get_day_lunar_info(today)


def _format_voc(rec: Dict[str, Any]) -> Optional[str]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥ Void-of-Course (–µ—Å–ª–∏ –æ–Ω –¥–ª–∏—Ç—Å—è ‚â• 15 –º–∏–Ω—É—Ç).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "‚ö´Ô∏è VoC 14:23‚Äì16:05" –∏–ª–∏ None.
    """
    voc = rec.get("void_of_course", {})
    if not voc or not voc.get("start") or not voc.get("end"):
        return None

    t1 = pendulum.parse(voc["start"]).in_tz(TZ)
    t2 = pendulum.parse(voc["end"]).in_tz(TZ)
    # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –º–µ–Ω—å—à–µ 15 –º–∏–Ω—É—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (t2 - t1).in_minutes() < 15:
        return None

    return f"‚ö´Ô∏è VoC {t1.format('HH:mm')}‚Äì{t2.format('HH:mm')}"


def _format_general_day(rec: Dict[str, Any]) -> Optional[str]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å:
    ‚Ä¢ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–º ("‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å")
    ‚Ä¢ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–º ("‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å")
    –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ.
    """
    day = pendulum.now(TZ).day
    gen = rec.get("favorable_days", {}).get("general", {})
    if day in gen.get("favorable", []):
        return "‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
    if day in gen.get("unfavorable", []):
        return "‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
    return None


# –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CAT_EMO = {
    "haircut":  "‚úÇÔ∏è",
    "travel":   "‚úàÔ∏è",
    "shopping": "üõçÔ∏è",
    "health":   "‚ù§Ô∏è",
}


def _format_categories(rec: Dict[str, Any]) -> List[str]:
    """
    –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç—Ä–∏–∂–∫–∏, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –ø–æ–∫—É–ø–∫–∏, –∑–¥–æ—Ä–æ–≤—å–µ)
    –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö / –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞ "‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∞ ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ" –∏–ª–∏ "üõçÔ∏è –ü–æ–∫—É–ø–∫–∏ ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ".
    """
    day = pendulum.now(TZ).day
    fav = rec.get("favorable_days", {})
    lines: List[str] = []

    for cat, emoji in CAT_EMO.items():
        label = cat.capitalize()  # 'haircut' ‚Üí 'Haircut'
        f_list = fav.get(cat, {}).get("favorable", [])
        u_list = fav.get(cat, {}).get("unfavorable", [])
        if day in f_list:
            lines.append(f"{emoji} {label} ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")
        elif day in u_list:
            lines.append(f"{emoji} {label} ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")

    return lines


def astro_events() -> List[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤—ã–π –∫ –ø–µ—á–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫:
    1) –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã:
       ‚Ä¢ Void-of-Course
       ‚Ä¢ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π / –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å
       ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç—Ä–∏–∂–∫–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –ø–æ–∫—É–ø–∫–∏, –∑–¥–æ—Ä–æ–≤—å–µ)
    2) –§–∞–∑–∞ –õ—É–Ω—ã + —Å–æ–≤–µ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–ø–æ —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏)
    3) –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ ("‚Üí –ß–µ—Ä–µ–∑ X –¥–Ω. ...")
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç [] –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.
    """
    info = _today_info()
    if not info:
        return []

    phase  = info.get("phase", "").strip()
    advice = info.get("advice", [])

    events: List[str] = []

    # 1) Extra markers: VoC –∏ –æ–±—â–∏–π ¬´–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π/–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π¬ª –¥–µ–Ω—å
    for extra in (_format_voc(info), _format_general_day(info)):
        if extra:
            events.append(extra)

    # 2) –û—Ç–º–µ—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    events.extend(_format_categories(info))

    # 3) –§–∞–∑–∞ –õ—É–Ω—ã –∏ —Å–∞–º–∏ —Å–æ–≤–µ—Ç—ã
    if phase and advice:
        # –°–Ω–∞—á–∞–ª–∞ —Å–∞–º —Ç–µ–∫—Å—Ç —Ñ–∞–∑—ã
        events.append(phase)
        # –ó–∞—Ç–µ–º –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞ –∫–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç:
        for adv in advice:
            events.append(adv.strip())

    # 4) ¬´–ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ¬ª
    nxt = info.get("next_event", "").strip()
    if nxt:
        events.append(nxt)

    return events


# –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
if __name__ == "__main__":
    from pprint import pprint
    pprint(astro_events())