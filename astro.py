#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
astro.py  ‚Ä¢ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ ¬´–ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è¬ª –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä –±–æ—Ç–∞ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ.

–¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ VoC (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é ‚â• 15 –º–∏–Ω)
‚Ä¢ –ú–µ—Ç–∫—É ¬´–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π / –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å¬ª
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ‚úÇÔ∏è —Å—Ç—Ä–∏–∂–∫–∞, ‚úàÔ∏è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, üõç –ø–æ–∫—É–ø–∫–∏, ‚ù§Ô∏è –∑–¥–æ—Ä–æ–≤—å–µ
‚Ä¢ –§–∞–∑—É –õ—É–Ω—ã + 3 —Å–æ–≤–µ—Ç–∞
‚Ä¢ next_event
"""

from __future__ import annotations
import pendulum
from typing import Any, Dict, List, Optional
from lunar import get_day_lunar_info         # —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ lunar.py

TZ = pendulum.timezone("Asia/Nicosia")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _today_info() -> Optional[Dict[str, Any]]:
    today = pendulum.now(TZ).date()
    return get_day_lunar_info(today)

def _format_voc(rec: Dict[str, Any]) -> Optional[str]:
    voc = rec.get("void_of_course", {})
    if not voc or not voc.get("start") or not voc.get("end"):
        return None
    t1 = pendulum.parse(voc["start"]).in_tz(TZ)
    t2 = pendulum.parse(voc["end"]).in_tz(TZ)
    if (t2 - t1).in_minutes() < 15:          # –ø—Ä—è—á–µ–º ¬´–º–∏–∫—Ä–æ-VoC¬ª
        return None
    return f"‚ö´Ô∏è VoC {t1.format('HH:mm')}‚Äì{t2.format('HH:mm')}"

def _format_general_day(rec: Dict[str, Any]) -> Optional[str]:
    day = pendulum.now(TZ).day
    gen = rec.get("favorable_days", {}).get("general", {})
    if day in gen.get("favorable", []):
        return "‚úÖ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
    if day in gen.get("unfavorable", []):
        return "‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å"
    return None

CAT_EMO = {
    "haircut":     "‚úÇÔ∏è",
    "travel":      "‚úàÔ∏è",
    "shopping":    "üõç",
    "health":      "‚ù§Ô∏è",
}

def _format_categories(rec: Dict[str, Any]) -> List[str]:
    """–°—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ '‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∞ ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ'."""
    day = pendulum.now(TZ).day
    fav  = rec.get("favorable_days", {})
    lines: List[str] = []

    for cat, emoji in CAT_EMO.items():
        f_list = fav.get(cat, {}).get("favorable", [])
        u_list = fav.get(cat, {}).get("unfavorable", [])
        if day in f_list:
            lines.append(f"{emoji} {cat.capitalize()} ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")
        elif day in u_list:
            lines.append(f"{emoji} {cat.capitalize()} ‚Äî –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ")
    return lines

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main entry point ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def astro_events() -> List[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤—ã–π –∫ –ø–µ—á–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫:
    ‚Ä¢ –¥–æ–ø. –º–∞—Ä–∫–µ—Ä—ã (VoC, –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    ‚Ä¢ —Ñ–∞–∑–∞ –õ—É–Ω—ã + —Å–æ–≤–µ—Ç—ã
    ‚Ä¢ next_event
    """
    info = _today_info()
    if not info:
        return []

    phase   = info.get("phase", "").strip()
    advice  = info.get("advice", [])

    events: List[str] = []

    # --- Extra markers ------------------------------------------------------
    for extra in (_format_voc(info), _format_general_day(info)):
        if extra:
            events.append(extra)

    events.extend(_format_categories(info))

    # --- Phase & 3 tips -----------------------------------------------------
    if phase and advice:
        events.append(f"{phase} ‚Äì {advice[0].strip()}")
        for adv in advice[1:]:
            events.append(f"‚Ä¢ {adv.strip()}")

    # --- upcoming event -----------------------------------------------------
    nxt = info.get("next_event", "").strip()
    if nxt:
        events.append(nxt)

    return events


# -------------------------- –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç ---------------------------
if __name__ == "__main__":
    from pprint import pprint
    pprint(astro_events())