#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
schumann.py
~~~~~~~~~~~
‚Ä¢ –ë–µ—Ä—ë—Ç freq/amp –∏–∑ –¥–≤—É—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö API.
‚Ä¢ –ö—ç—à–∏—Ä—É–µ—Ç —Ç–æ—á–∫–∏ –≤ ~/.cache/vaybometer/sr1.json (7 –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏).
‚Ä¢ high = freq > 8 –ì—Ü  –ò–õ–ò  amp > 100.
‚Ä¢ get_schumann_trend(hours) ‚Üí ‚Üë / ‚Üì / ‚Üí.
"""

from __future__ import annotations

import json
import logging
import os
import random
import time
from pathlib import Path
from typing import Any, Dict, List

from utils import _get

# ‚îÄ‚îÄ –∫–æ–Ω—Ñ–∏–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CACHE_PATH = (
    Path.home() / ".cache" / "vaybometer" / "sr1.json"
)  # ~/.cache/vaybometer/sr1.json
CACHE_PATH.parent.mkdir(parents=True, exist_ok=True)

URLS = (
    "https://api.glcoherence.org/v1/earth",
    "https://gci-api.ucsd.edu/data/latest",
)

SCH_QUOTES = [
    "–¥–∞—Ç—á–∏–∫–∏ –º–æ–ª—á–∞—Ç ‚Äî —Ä–µ—Ç—Ä–∏—Ç üå±",
    "–∫–æ—à–∞—á–∏–π –º—è—É-—Ñ–∞–∫—Ç–æ—Ä –∑–∞–≥–ª—É—à–∏–ª —Å–µ–Ω—Å–æ—Ä—ã üò∏",
    "–≤–æ–ª–Ω—ã —É—à–ª–∏ –ª–æ–≤–∏—Ç—å —á–∞–µ–∫ üê¶",
    "–ø–æ–∫–∞–∑–∞–Ω–∏—è –º–µ–¥–∏—Ç–∏—Ä—É—é—Ç üßò",
    "–¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–ø—É—Å–∫–µ üèùÔ∏è",
    "–®—É–º–∞–Ω —Å–ø–∏—Ç ‚Äî –Ω–µ –±—É–¥–∏–º üîï",
    "—Ç–∏—à–∏–Ω–∞ –≤ —ç—Ñ–∏—Ä–µ‚Ä¶ üéß",
]

# ‚îÄ‚îÄ —Ä–∞–±–æ—Ç–∞ —Å –∫—ç—à–µ–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _save_point(freq: float, amp: float) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é, —Ö—Ä–∞–Ω–∏–º 7 –¥–Ω–µ–π."""
    point = {"ts": time.time(), "freq": round(freq, 3), "amp": round(amp, 1)}
    try:
        history: List[dict] = json.loads(CACHE_PATH.read_text())
    except Exception:
        history = []

    history.append(point)
    week_ago = time.time() - 7 * 24 * 3600
    history = [p for p in history if p["ts"] >= week_ago]

    CACHE_PATH.write_text(json.dumps(history, ensure_ascii=False))


def _last_points(hours: int = 24) -> List[dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—á–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ *hours* —á–∞—Å–æ–≤ –∏–∑ –∫—ç—à–∞."""
    try:
        history: List[dict] = json.loads(CACHE_PATH.read_text())
    except Exception:
        return []

    border = time.time() - hours * 3600
    return [p for p in history if p["ts"] >= border]


# ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_schumann() -> Dict[str, Any]:
    """
    {'freq': 7.83, 'amp': 45.1, 'high': False}
    {'freq': 8.12, 'amp':120.3, 'high': True}
    {'freq': 7.9,  'amp': 40.0, 'high': False, 'cached': True}
    {'msg': '...'}  ‚Äì –µ—Å–ª–∏ –≤—Å—ë —É–ø–∞–ª–æ
    """
    for url in URLS:
        data = _get(url)
        if not data:
            continue
        try:
            if "data" in data:  # –≤—Ç–æ—Ä–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
                data = data["data"]["sr1"]

            freq_raw = data.get("frequency_1") or data.get("frequency")
            amp_raw  = data.get("amplitude_1") or data.get("amplitude")
            if freq_raw is None or amp_raw is None:
                raise ValueError("freq/amp absent")

            freq, amp = float(freq_raw), float(amp_raw)
            _save_point(freq, amp)

            return {
                "freq": round(freq, 2),
                "amp":  round(amp, 1),
                "high": (freq > 8.0) or (amp > 100.0),
            }

        except Exception as e:
            logging.warning("schumann parse %s: %s", url, e)

    # –æ–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚Üí –ø—Ä–æ–±—É–µ–º –∫—ç—à
    pts = _last_points(48)
    if pts:
        last = pts[-1]
        return {
            "freq": last["freq"],
            "amp":  last["amp"],
            "high": (last["freq"] > 8.0) or (last["amp"] > 100.0),
            "cached": True,
        }

    # —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ
    return {"msg": random.choice(SCH_QUOTES)}


def get_schumann_trend(hours: int = 24) -> str:
    """
    ‚Üë –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è freq > —Å—Ä–µ–¥–Ω–µ–π –∑–∞ *hours* –Ω–∞ ‚â•0.1 –ì—Ü,
    ‚Üì –µ—Å–ª–∏ –Ω–∏–∂–µ –Ω–∞ ‚â•0.1 –ì—Ü,
    ‚Üí –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö.
    """
    pts = _last_points(hours)
    if len(pts) < 3:
        return "‚Üí"

    *prev, last = pts
    avg = sum(p["freq"] for p in prev) / len(prev)
    delta = last["freq"] - avg

    if delta >= 0.10:
        return "‚Üë"
    if delta <= -0.10:
        return "‚Üì"
    return "‚Üí"


# ‚îÄ‚îÄ CLI-—Ç–µ—Å—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    from pprint import pprint

    pprint(get_schumann())
    print("trend 24 h:", get_schumann_trend())
