#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
schumann.py
~~~~~~~~~~~
‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É (–ì—Ü) –∏ –∞–º–ø–ª–∏—Ç—É–¥—É (–†) –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞ –®—É–º–∞–Ω–∞ (SR 1)
  –∏–∑ –¥–≤—É—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö API (GL Coherence / UCSD GCI).
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ ¬´~/.cache/vaybometer/sr1.json¬ª.
‚Ä¢ high = True, –µ—Å–ª–∏  freq > 8 –ì—Ü  –ò–õ–ò  amp > 100 –†.
‚Ä¢ get_schumann_trend(hours=24) ‚Üí '‚Üë' / '‚Üì' / '‚Üí'  –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é
  —Å –ø–æ–∫–∞–∑–∞–Ω–∏–µ–º N —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥.
"""

from __future__ import annotations

import json, time, logging, random, pathlib
from typing import Dict, Any, List, Optional

from utils import _get

# ‚îÄ‚îÄ —Ñ–∞–π–ª–æ–≤—ã–π –∫—ç—à ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CACHE_DIR   = pathlib.Path.home() / ".cache" / "vaybometer"
CACHE_FILE  = CACHE_DIR / "sr1.json"
CACHE_DIR.mkdir(parents=True, exist_ok=True)      # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø—É—Ç—å –µ—Å—Ç—å

# ‚îÄ‚îÄ —à—É—Ç–∫–∏-–∑–∞—Ç—ã—á–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SCH_QUOTES = [
    "–¥–∞—Ç—á–∏–∫–∏ –º–æ–ª—á–∞—Ç ‚Äî —Ä–µ—Ç—Ä–∏—Ç üå±",
    "–∫–æ—à–∞—á–∏–π –º—è—É-—Ñ–∞–∫—Ç–æ—Ä –∑–∞–≥–ª—É—à–∏–ª —Å–µ–Ω—Å–æ—Ä—ã üò∏",
    "–≤–æ–ª–Ω—ã —É—à–ª–∏ –ª–æ–≤–∏—Ç—å —á–∞–µ–∫ üê¶",
    "–ø–æ–∫–∞–∑–∞–Ω–∏—è –º–µ–¥–∏—Ç–∏—Ä—É—é—Ç üßò",
    "–¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–ø—É—Å–∫–µ üèùÔ∏è",
    "–®—É–º–∞–Ω —Å–ø–∏—Ç ‚Äî –Ω–µ –±—É–¥–∏–º üîï",
    "—Ç–∏—à–∏–Ω–∞ –≤ —ç—Ñ–∏—Ä–µ‚Ä¶ üéß",
]

# ‚îÄ‚îÄ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _load_history() -> List[Dict[str, float]]:
    if CACHE_FILE.exists():
        try:
            return json.loads(CACHE_FILE.read_text())
        except Exception:
            logging.warning("Schumann cache corrupt ‚Äì recreating")
    return []

def _save_history(hist: List[Dict[str, float]]) -> None:
    try:
        CACHE_FILE.write_text(json.dumps(hist, ensure_ascii=False))
    except Exception as e:
        logging.warning("Schumann cache save error: %s", e)

def _append_history(freq: float, amp: float) -> None:
    ts_now = int(time.time())
    hist   = _load_history()
    hist.append({"ts": ts_now, "freq": freq, "amp": amp})
    # –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –ª–∏—à—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 72 —á (–∏–∑–±—ã—Ç–æ—á–Ω–æ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞)
    cutoff = ts_now - 72 * 3600
    hist   = [h for h in hist if h["ts"] >= cutoff]
    _save_history(hist)

# ‚îÄ‚îÄ API –∑–∞–ø—Ä–æ—Å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_API_ENDPOINTS = (
    "https://api.glcoherence.org/v1/earth",       # JSON plain
    "https://gci-api.ucsd.edu/data/latest",       # JSON –≤  ["data"]["sr1"]
)

def _fetch_sr1() -> Optional[tuple[float, float]]:
    """–ü—Ä–æ–±—É–µ—Ç –æ–±–∞ —ç–Ω–¥–ø–æ–π–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (freq, amp) –∏–ª–∏ None."""
    for url in _API_ENDPOINTS:
        j = _get(url)
        if not j:
            continue
        try:
            # –≤—Ç–æ—Ä–æ–π —Å–µ—Ä–≤–∏—Å –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
            if "data" in j and "sr1" in j["data"]:
                j = j["data"]["sr1"]

            freq = j.get("frequency_1") or j.get("frequency")
            amp  = j.get("amplitude_1") or j.get("amplitude")
            if freq is None or amp is None:
                raise ValueError("missing fields")

            return float(freq), float(amp)
        except Exception as e:
            logging.warning("Schumann parse error (%s): %s", url, e)
    return None

# ‚îÄ‚îÄ –ø—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_schumann() -> Dict[str, Any]:
    """
    ‚ñ∏ –ü—Ä–∏ —É—Å–ø–µ—Ö–µ:
        {"freq": 7.83, "amp": 42.1, "high": False}
        {"freq": 8.11, "amp":123.4, "high": True}
    ‚ñ∏ –ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:
        {"msg": "<—Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞>"}
    """
    sr = _fetch_sr1()
    if not sr:
        return {"msg": random.choice(SCH_QUOTES)}

    freq, amp = sr
    _append_history(freq, amp)                  # –∫–µ—à–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è

    return {
        "freq": round(freq, 2),
        "amp":  round(amp, 1),
        "high": (freq > 8.0) or (amp > 100.0),  # –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ
    }

def get_schumann_trend(hours: int = 24) -> str:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç–æ—Ç—É —Å —á–∞—Å—Ç–æ—Ç–æ–π `hours` –Ω–∞–∑–∞–¥.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–µ–ª–∫—É:
       ‚Üë  —Ä–æ—Å—Ç > 0.05 –ì—Ü
       ‚Üì  –ø–∞–¥–µ–Ω–∏–µ < ‚àí0.05 –ì—Ü
       ‚Üí  –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    hist = _load_history()
    if len(hist) < 2:
        return "‚Üí"

    ts_now = int(time.time())
    target = ts_now - hours * 3600

    past: Optional[float] = None
    for h in hist:
        if h["ts"] <= target:
            past = h["freq"]
            break
    if past is None:          # –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏
        past = hist[0]["freq"]

    current = hist[-1]["freq"]
    diff    = current - past

    if diff > 0.05:
        return "‚Üë"
    if diff < -0.05:
        return "‚Üì"
    return "‚Üí"

# ‚îÄ‚îÄ CLI-—Ç–µ—Å—Ç  :  python -m schumann ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    from pprint import pprint
    data = get_schumann()
    trend = get_schumann_trend()
    if "freq" in data:
        data["trend"] = trend
    pprint(data)
