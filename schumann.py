#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
schumann.py
~~~~~~~~~~~
‚Ä¢ –±–µ—Ä—ë—Ç freq/amp –∏–∑ 2 open-API;
‚Ä¢ –ø–∏—à–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤  ~/cache/sr1.json  (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ—Ç);
‚Ä¢ high = freq>8 –ì—Ü  –ò–õ–ò  amp>100;
‚Ä¢ get_schumann_trend(hours) ‚Üí ‚Üë/‚Üì/‚Üí.
"""

from __future__ import annotations
import json, os, time, logging, random, pathlib
from typing import Dict, Any, List
from datetime import datetime, timedelta

from utils import _get

# -----------------------------------------------------------------
CACHE_PATH = pathlib.Path.home() / "cache" / "sr1.json"
CACHE_PATH.parent.mkdir(parents=True, exist_ok=True)

URLS = (
    "https://api.glcoherence.org/v1/earth",
    "https://gci-api.ucsd.edu/data/latest",
)

SCH_QUOTES = [
    "–¥–∞—Ç—á–∏–∫–∏ –º–æ–ª—á–∞—Ç ‚Äî —Ä–µ—Ç—Ä–∏—Ç üå±",
    "–∫–æ—à–∞—á–∏–π –º—è—É-—Ñ–∞–∫—Ç–æ—Ä –∑–∞–≥–ª—É—à–∏–ª —Å–µ–Ω—Å–æ—Ä—ã üò∏",
    "–≤–æ–ª–Ω—ã —É—à–ª–∏ –ª–æ–≤–∏—Ç—å —á–∞–µ–∫ üê¶",
    "–ø–æ–∫–∞–∑–∞–Ω–∏—è –º–µ–¥–∏—Ç–∏—Ä—É—é—Ç üßò",
    "–¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–ø—É—Å–∫–µ üèùÔ∏è",
    "–®—É–º–∞–Ω —Å–ø–∏—Ç ‚Äî –Ω–µ –±—É–¥–∏–º üîï",
    "—Ç–∏—à–∏–Ω–∞ –≤ —ç—Ñ–∏—Ä–µ‚Ä¶ üéß",
]

# -----------------------------------------------------------------
def _save_point(freq: float, amp: float) -> None:
    point = {"ts": time.time(), "freq": round(freq, 3), "amp": round(amp, 1)}
    history: List[dict] = []
    if CACHE_PATH.exists():
        try:
            history = json.loads(CACHE_PATH.read_text())
        except Exception:
            history = []
    history.append(point)
    # –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    week_ago = time.time() - 7 * 24 * 3600
    history = [p for p in history if p["ts"] >= week_ago]
    CACHE_PATH.write_text(json.dumps(history, ensure_ascii=False))

def _last_points(hours: int = 24) -> List[dict]:
    if not CACHE_PATH.exists():
        return []
    try:
        history = json.loads(CACHE_PATH.read_text())
    except Exception:
        return []
    border = time.time() - hours * 3600
    return [p for p in history if p["ts"] >= border]

# -----------------------------------------------------------------
def get_schumann() -> Dict[str, Any]:
    """
    dict:
        {'freq': 7.83, 'amp': 45.1, 'high': False}
        –∏–ª–∏ {'msg': '...'}
    """
    for url in URLS:
        j = _get(url)
        if not j:
            continue
        try:
            if "data" in j:                 # –≤—Ç–æ—Ä–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
                j = j["data"]["sr1"]
            freq = float(j.get("frequency_1") or j.get("frequency"))
            amp  = float(j.get("amplitude_1") or j.get("amplitude"))
            _save_point(freq, amp)
            return {
                "freq": round(freq, 2),
                "amp":  round(amp, 1),
                "high": freq > 8.0 or amp > 100.0,
            }
        except Exception as e:
            logging.warning("schumann parse %s: %s", url, e)

    # –æ–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚Äî –ø—Ä–æ–±—É–µ–º –∫—ç—à
    pts = _last_points(48)
    if pts:
        last = pts[-1]
        return {
            "freq": last["freq"],
            "amp":  last["amp"],
            "high": last["freq"] > 8.0 or last["amp"] > 100.0,
            "cached": True,
        }
    return {"msg": random.choice(SCH_QUOTES)}

# -----------------------------------------------------------------
def get_schumann_trend(hours: int = 24) -> str:
    """
    ‚Üë  –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è freq > —Å—Ä–µ–¥–Ω–µ–π –Ω–∞ |hours|;
    ‚Üì  –µ—Å–ª–∏ < —Å—Ä–µ–¥–Ω–µ–π ‚àí0.1 –ì—Ü;
    ‚Üí  –∏–Ω–∞—á–µ.
    """
    pts = _last_points(hours)
    if len(pts) < 3:
        return "‚Üí"
    avg = sum(p["freq"] for p in pts[:-1]) / (len(pts)-1)
    last = pts[-1]["freq"]
    if last - avg >= 0.10:
        return "‚Üë"
    if last - avg <= -0.10:
        return "‚Üì"
    return "‚Üí"

# -----------------------------------------------------------------
if __name__ == "__main__":
    from pprint import pprint
    pprint(get_schumann())
    print("trend 24 h:", get_schumann_trend())
